#nullable enable
*REMOVED*abstract Npgsql.NpgsqlDatabaseInfo.GetTypes() -> System.Collections.Generic.IEnumerable<Npgsql.PostgresTypes.PostgresType!>!
abstract NpgsqlTypes.NpgsqlTsQuery.Equals(NpgsqlTypes.NpgsqlTsQuery? other) -> bool
Npgsql.NpgsqlBatch
Npgsql.NpgsqlBatch.BatchCommands.get -> Npgsql.NpgsqlBatchCommandCollection!
Npgsql.NpgsqlBatch.Connection.get -> Npgsql.NpgsqlConnection?
Npgsql.NpgsqlBatch.Connection.set -> void
Npgsql.NpgsqlBatch.ExecuteReader(System.Data.CommandBehavior behavior = System.Data.CommandBehavior.Default) -> Npgsql.NpgsqlDataReader!
Npgsql.NpgsqlBatch.ExecuteReaderAsync(System.Data.CommandBehavior behavior, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<Npgsql.NpgsqlDataReader!>!
Npgsql.NpgsqlBatch.ExecuteReaderAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<Npgsql.NpgsqlDataReader!>!
Npgsql.NpgsqlBatch.NpgsqlBatch(Npgsql.NpgsqlConnection? connection = null, Npgsql.NpgsqlTransaction? transaction = null) -> void
Npgsql.NpgsqlBatch.Transaction.get -> Npgsql.NpgsqlTransaction?
Npgsql.NpgsqlBatch.Transaction.set -> void
Npgsql.NpgsqlBatchCommand
Npgsql.NpgsqlBatchCommand.NpgsqlBatchCommand() -> void
Npgsql.NpgsqlBatchCommand.NpgsqlBatchCommand(string! commandText) -> void
Npgsql.NpgsqlBatchCommand.OID.get -> uint
Npgsql.NpgsqlBatchCommand.Parameters.get -> Npgsql.NpgsqlParameterCollection!
Npgsql.NpgsqlBatchCommand.Rows.get -> ulong
Npgsql.NpgsqlBatchCommand.StatementType.get -> Npgsql.StatementType
Npgsql.NpgsqlBatchCommandCollection
Npgsql.NpgsqlBatchCommandCollection.Add(Npgsql.NpgsqlBatchCommand! item) -> void
Npgsql.NpgsqlBatchCommandCollection.Contains(Npgsql.NpgsqlBatchCommand! item) -> bool
Npgsql.NpgsqlBatchCommandCollection.CopyTo(Npgsql.NpgsqlBatchCommand![]! array, int arrayIndex) -> void
Npgsql.NpgsqlBatchCommandCollection.IndexOf(Npgsql.NpgsqlBatchCommand! item) -> int
Npgsql.NpgsqlBatchCommandCollection.Insert(int index, Npgsql.NpgsqlBatchCommand! item) -> void
Npgsql.NpgsqlBatchCommandCollection.Remove(Npgsql.NpgsqlBatchCommand! item) -> bool
Npgsql.NpgsqlBinaryExporter.CancelAsync() -> System.Threading.Tasks.Task!
Npgsql.NpgsqlCommand.Statements.get -> System.Collections.Generic.IReadOnlyList<Npgsql.NpgsqlBatchCommand!>!
Npgsql.NpgsqlConnection.BeginBinaryExportAsync(string! copyToCommand, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<Npgsql.NpgsqlBinaryExporter!>!
Npgsql.NpgsqlConnection.BeginBinaryImportAsync(string! copyFromCommand, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<Npgsql.NpgsqlBinaryImporter!>!
Npgsql.NpgsqlConnection.BeginRawBinaryCopyAsync(string! copyCommand, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<Npgsql.NpgsqlRawCopyStream!>!
Npgsql.NpgsqlConnection.BeginTextExportAsync(string! copyToCommand, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<System.IO.TextReader!>!
Npgsql.NpgsqlConnection.BeginTextImportAsync(string! copyFromCommand, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<System.IO.TextWriter!>!
Npgsql.NpgsqlConnection.CreateBatch() -> Npgsql.NpgsqlBatch!
Npgsql.NpgsqlConnection.PhysicalOpenAsyncCallback.get -> Npgsql.PhysicalOpenAsyncCallback?
Npgsql.NpgsqlConnection.PhysicalOpenAsyncCallback.set -> void
Npgsql.NpgsqlConnection.PhysicalOpenCallback.get -> Npgsql.PhysicalOpenCallback?
Npgsql.NpgsqlConnection.PhysicalOpenCallback.set -> void
Npgsql.NpgsqlConnection.Settings.get -> Npgsql.NpgsqlConnectionStringBuilder!
Npgsql.NpgsqlConnectionStringBuilder.HostRecheckSeconds.get -> int
Npgsql.NpgsqlConnectionStringBuilder.HostRecheckSeconds.set -> void
Npgsql.NpgsqlConnectionStringBuilder.IncludeErrorDetail.get -> bool
Npgsql.NpgsqlConnectionStringBuilder.IncludeErrorDetail.set -> void
Npgsql.NpgsqlConnectionStringBuilder.LoadBalanceHosts.get -> bool
Npgsql.NpgsqlConnectionStringBuilder.LoadBalanceHosts.set -> void
Npgsql.NpgsqlConnectionStringBuilder.SslCertificate.get -> string?
Npgsql.NpgsqlConnectionStringBuilder.SslCertificate.set -> void
Npgsql.NpgsqlConnectionStringBuilder.SslKey.get -> string?
Npgsql.NpgsqlConnectionStringBuilder.SslKey.set -> void
Npgsql.NpgsqlConnectionStringBuilder.SslPassword.get -> string?
Npgsql.NpgsqlConnectionStringBuilder.SslPassword.set -> void
Npgsql.NpgsqlConnectionStringBuilder.TargetSessionAttributes.get -> string?
Npgsql.NpgsqlConnectionStringBuilder.TargetSessionAttributes.set -> void
*REMOVED*Npgsql.NpgsqlConnectionStringBuilder.WriteCoalescingDelayUs.get -> int
*REMOVED*Npgsql.NpgsqlConnectionStringBuilder.WriteCoalescingDelayUs.set -> void
*REMOVED*Npgsql.INpgsqlDatabaseInfoFactory
*REMOVED*Npgsql.INpgsqlDatabaseInfoFactory.Load(Npgsql.NpgsqlConnection! conn, Npgsql.Util.NpgsqlTimeout timeout, bool async) -> System.Threading.Tasks.Task<Npgsql.NpgsqlDatabaseInfo?>!
*REMOVED*Npgsql.NpgsqlDatabaseInfo
*REMOVED*Npgsql.NpgsqlDatabaseInfo.Host.get -> string!
*REMOVED*Npgsql.NpgsqlDatabaseInfo.Name.get -> string!
*REMOVED*Npgsql.NpgsqlDatabaseInfo.NpgsqlDatabaseInfo(string! host, int port, string! databaseName, System.Version! version) -> void
*REMOVED*Npgsql.NpgsqlDatabaseInfo.Port.get -> int
*REMOVED*Npgsql.NpgsqlDatabaseInfo.Version.get -> System.Version!
Npgsql.NpgsqlCopyTextReader.DisposeAsync() -> System.Threading.Tasks.ValueTask
Npgsql.NpgsqlDataReader.Rows.get -> ulong
Npgsql.NpgsqlDataReader.Statements.get -> System.Collections.Generic.IReadOnlyList<Npgsql.NpgsqlBatchCommand!>!
Npgsql.NpgsqlException.BatchCommand.get -> Npgsql.NpgsqlBatchCommand?
Npgsql.NpgsqlException.BatchCommand.set -> void
Npgsql.PhysicalOpenAsyncCallback
Npgsql.PhysicalOpenCallback
Npgsql.Replication.ReplicationConnection.PostgreSqlVersion.get -> System.Version!
Npgsql.Replication.ReplicationConnection.ServerVersion.get -> string!
*REMOVED*Npgsql.Replication.PgOutput.Messages.BeginMessage.TransactionXid.get -> uint
*REMOVED*Npgsql.Replication.PgOutput.Messages.RelationMessage.Columns.get -> System.ReadOnlyMemory<Npgsql.Replication.PgOutput.Messages.RelationMessage.Column>
Npgsql.Replication.PgOutput.Messages.RelationMessage.Columns.get -> System.Collections.Generic.IReadOnlyList<Npgsql.Replication.PgOutput.Messages.RelationMessage.Column>!
Npgsql.Replication.PgOutput.Messages.TransactionalMessage
Npgsql.Replication.PgOutput.Messages.TransactionalMessage.TransactionalMessage() -> void
Npgsql.Replication.PgOutput.Messages.TransactionalMessage.TransactionXid.get -> uint?
*REMOVED*Npgsql.Replication.PgOutput.Messages.TruncateMessage.RelationIds.get -> uint[]!
Npgsql.Replication.PgOutput.Messages.TransactionControlMessage
Npgsql.Replication.PgOutput.Messages.TransactionControlMessage.TransactionControlMessage() -> void
Npgsql.Replication.PgOutput.Messages.TransactionControlMessage.TransactionXid.get -> uint
Npgsql.Replication.PgOutput.Messages.TruncateMessage.RelationIds.get -> System.Collections.Generic.IReadOnlyList<uint>!
Npgsql.Replication.ReplicationConnection.SetReplicationStatus(NpgsqlTypes.NpgsqlLogSequenceNumber lastAppliedAndFlushedLsn) -> void
*REMOVED*Npgsql.Replication.PgOutput.PgOutputReplicationOptions.PgOutputReplicationOptions(string! publicationName, ulong protocolVersion = 1, bool? binary = null, bool? streaming = null) -> void
Npgsql.Replication.PgOutput.Messages.LogicalDecodingMessage
Npgsql.Replication.PgOutput.Messages.LogicalDecodingMessage.Data.get -> System.IO.Stream!
Npgsql.Replication.PgOutput.Messages.LogicalDecodingMessage.Flags.get -> byte
Npgsql.Replication.PgOutput.Messages.LogicalDecodingMessage.LogicalDecodingMessage() -> void
Npgsql.Replication.PgOutput.Messages.LogicalDecodingMessage.MessageLsn.get -> NpgsqlTypes.NpgsqlLogSequenceNumber
Npgsql.Replication.PgOutput.Messages.LogicalDecodingMessage.Prefix.get -> string!
Npgsql.Replication.PgOutput.Messages.StreamAbortMessage
Npgsql.Replication.PgOutput.Messages.StreamAbortMessage.StreamAbortMessage() -> void
Npgsql.Replication.PgOutput.Messages.StreamAbortMessage.SubtransactionXid.get -> uint
Npgsql.Replication.PgOutput.Messages.StreamCommitMessage
Npgsql.Replication.PgOutput.Messages.StreamCommitMessage.CommitLsn.get -> NpgsqlTypes.NpgsqlLogSequenceNumber
Npgsql.Replication.PgOutput.Messages.StreamCommitMessage.Flags.get -> byte
Npgsql.Replication.PgOutput.Messages.StreamCommitMessage.StreamCommitMessage() -> void
Npgsql.Replication.PgOutput.Messages.StreamCommitMessage.TransactionCommitTimestamp.get -> System.DateTime
Npgsql.Replication.PgOutput.Messages.StreamCommitMessage.TransactionEndLsn.get -> NpgsqlTypes.NpgsqlLogSequenceNumber
Npgsql.Replication.PgOutput.Messages.StreamStartMessage
Npgsql.Replication.PgOutput.Messages.StreamStartMessage.StreamSegmentIndicator.get -> byte
Npgsql.Replication.PgOutput.Messages.StreamStartMessage.StreamStartMessage() -> void
Npgsql.Replication.PgOutput.Messages.StreamStopMessage
Npgsql.Replication.PgOutput.Messages.StreamStopMessage.StreamStopMessage() -> void
Npgsql.Replication.PgOutput.PgOutputReplicationOptions.Messages.get -> bool?
Npgsql.Replication.PgOutput.PgOutputReplicationOptions.PgOutputReplicationOptions(string! publicationName, ulong protocolVersion, bool? binary = null, bool? streaming = null, bool? messages = null) -> void
*REMOVED*Npgsql.Replication.PgOutput.PgOutputReplicationOptions.PgOutputReplicationOptions(System.Collections.Generic.IEnumerable<string!>! publicationNames, ulong protocolVersion = 1, bool? binary = null, bool? streaming = null) -> void
Npgsql.Replication.PgOutput.PgOutputReplicationOptions.PgOutputReplicationOptions(System.Collections.Generic.IEnumerable<string!>! publicationNames, ulong protocolVersion, bool? binary = null, bool? streaming = null, bool? messages = null) -> void
NpgsqlTypes.NpgsqlTsQuery.Write(System.Text.StringBuilder! stringBuilder) -> void
override Npgsql.NpgsqlBatch.Cancel() -> void
override Npgsql.NpgsqlBatch.CreateDbBatchCommand() -> System.Data.Common.DbBatchCommand!
override Npgsql.NpgsqlBatch.DbBatchCommands.get -> System.Data.Common.DbBatchCommandCollection!
override Npgsql.NpgsqlBatch.DbConnection.get -> System.Data.Common.DbConnection?
override Npgsql.NpgsqlBatch.DbConnection.set -> void
override Npgsql.NpgsqlBatch.DbTransaction.get -> System.Data.Common.DbTransaction?
override Npgsql.NpgsqlBatch.DbTransaction.set -> void
override Npgsql.NpgsqlBatch.ExecuteDbDataReader(System.Data.CommandBehavior behavior) -> System.Data.Common.DbDataReader!
override Npgsql.NpgsqlBatch.ExecuteDbDataReaderAsync(System.Data.CommandBehavior behavior, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<System.Data.Common.DbDataReader!>!
override Npgsql.NpgsqlBatch.ExecuteNonQuery() -> int
override Npgsql.NpgsqlBatch.ExecuteNonQueryAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<int>!
override Npgsql.NpgsqlBatch.ExecuteScalar() -> object?
override Npgsql.NpgsqlBatch.ExecuteScalarAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<object?>!
override Npgsql.NpgsqlBatch.Prepare() -> void
override Npgsql.NpgsqlBatch.PrepareAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
override Npgsql.NpgsqlBatch.Timeout.get -> int
override Npgsql.NpgsqlBatch.Timeout.set -> void
override Npgsql.NpgsqlBatchCommand.CommandText.get -> string!
override Npgsql.NpgsqlBatchCommand.CommandText.set -> void
override Npgsql.NpgsqlBatchCommand.CommandType.get -> System.Data.CommandType
override Npgsql.NpgsqlBatchCommand.CommandType.set -> void
override Npgsql.NpgsqlBatchCommand.RecordsAffected.get -> int
override Npgsql.NpgsqlBatchCommand.ToString() -> string!
override Npgsql.NpgsqlBatchCommandCollection.Add(System.Data.Common.DbBatchCommand! item) -> void
override Npgsql.NpgsqlBatchCommandCollection.Clear() -> void
override Npgsql.NpgsqlBatchCommandCollection.Contains(System.Data.Common.DbBatchCommand! item) -> bool
override Npgsql.NpgsqlBatchCommandCollection.CopyTo(System.Data.Common.DbBatchCommand![]! array, int arrayIndex) -> void
override Npgsql.NpgsqlBatchCommandCollection.Count.get -> int
override Npgsql.NpgsqlBatchCommandCollection.GetEnumerator() -> System.Collections.Generic.IEnumerator<System.Data.Common.DbBatchCommand!>!
override Npgsql.NpgsqlBatchCommandCollection.IndexOf(System.Data.Common.DbBatchCommand! item) -> int
override Npgsql.NpgsqlBatchCommandCollection.Insert(int index, System.Data.Common.DbBatchCommand! item) -> void
override Npgsql.NpgsqlBatchCommandCollection.IsReadOnly.get -> bool
override Npgsql.NpgsqlBatchCommandCollection.Remove(System.Data.Common.DbBatchCommand! item) -> bool
override Npgsql.NpgsqlBatchCommandCollection.RemoveAt(int index) -> void
override Npgsql.NpgsqlBatchCommandCollection.this[int index].get -> System.Data.Common.DbBatchCommand!
override Npgsql.NpgsqlBatchCommandCollection.this[int index].set -> void
override Npgsql.NpgsqlConnection.CanCreateBatch.get -> bool
override Npgsql.NpgsqlException.DbBatchCommand.get -> System.Data.Common.DbBatchCommand?
override Npgsql.NpgsqlFactory.CanCreateBatch.get -> bool
override Npgsql.NpgsqlFactory.CreateBatch() -> System.Data.Common.DbBatch!
override Npgsql.NpgsqlFactory.CreateBatchCommand() -> System.Data.Common.DbBatchCommand!
override Npgsql.NpgsqlRawCopyStream.DisposeAsync() -> System.Threading.Tasks.ValueTask
override Npgsql.Replication.PgOutput.Messages.LogicalDecodingMessage.Clone() -> Npgsql.Replication.PgOutput.Messages.LogicalDecodingMessage!
override Npgsql.Replication.PgOutput.Messages.StreamAbortMessage.Clone() -> Npgsql.Replication.PgOutput.Messages.StreamAbortMessage!
override Npgsql.Replication.PgOutput.Messages.StreamCommitMessage.Clone() -> Npgsql.Replication.PgOutput.Messages.StreamCommitMessage!
override Npgsql.Replication.PgOutput.Messages.StreamStartMessage.Clone() -> Npgsql.Replication.PgOutput.Messages.StreamStartMessage!
override Npgsql.Replication.PgOutput.Messages.StreamStopMessage.Clone() -> Npgsql.Replication.PgOutput.Messages.StreamStopMessage!
override NpgsqlTypes.NpgsqlTsQuery.Equals(object? obj) -> bool
override NpgsqlTypes.NpgsqlTsQuery.GetHashCode() -> int
*REMOVED*static Npgsql.NpgsqlDatabaseInfo.ParseServerVersion(string! value) -> System.Version!
*REMOVED*static Npgsql.NpgsqlDatabaseInfo.RegisterFactory(Npgsql.INpgsqlDatabaseInfoFactory! factory) -> void
static NpgsqlTypes.NpgsqlTsQuery.operator ==(NpgsqlTypes.NpgsqlTsQuery? left, NpgsqlTypes.NpgsqlTsQuery? right) -> bool
static NpgsqlTypes.NpgsqlTsQuery.operator !=(NpgsqlTypes.NpgsqlTsQuery? left, NpgsqlTypes.NpgsqlTsQuery? right) -> bool
override NpgsqlTypes.NpgsqlTsQueryEmpty.Equals(NpgsqlTypes.NpgsqlTsQuery? other) -> bool
override NpgsqlTypes.NpgsqlTsQueryEmpty.GetHashCode() -> int
override NpgsqlTypes.NpgsqlTsQueryLexeme.Equals(NpgsqlTypes.NpgsqlTsQuery? other) -> bool
override NpgsqlTypes.NpgsqlTsQueryLexeme.GetHashCode() -> int
override NpgsqlTypes.NpgsqlTsQueryNot.Equals(NpgsqlTypes.NpgsqlTsQuery? other) -> bool
override NpgsqlTypes.NpgsqlTsQueryNot.GetHashCode() -> int
override NpgsqlTypes.NpgsqlTsQueryOr.Equals(NpgsqlTypes.NpgsqlTsQuery? other) -> bool
override NpgsqlTypes.NpgsqlTsQueryOr.GetHashCode() -> int
override NpgsqlTypes.NpgsqlTsQueryAnd.Equals(NpgsqlTypes.NpgsqlTsQuery? other) -> bool
override NpgsqlTypes.NpgsqlTsQueryAnd.GetHashCode() -> int
override NpgsqlTypes.NpgsqlTsQueryFollowedBy.Equals(NpgsqlTypes.NpgsqlTsQuery? other) -> bool
override NpgsqlTypes.NpgsqlTsQueryFollowedBy.GetHashCode() -> int
Npgsql.NpgsqlConnectionStringBuilder.ArrayNullabilityMode.get -> Npgsql.ArrayNullabilityMode
Npgsql.NpgsqlConnectionStringBuilder.ArrayNullabilityMode.set -> void
Npgsql.ArrayNullabilityMode
Npgsql.ArrayNullabilityMode.Never = 0 -> Npgsql.ArrayNullabilityMode
Npgsql.ArrayNullabilityMode.Always = 1 -> Npgsql.ArrayNullabilityMode
Npgsql.ArrayNullabilityMode.PerInstance = 2 -> Npgsql.ArrayNullabilityMode
Npgsql.NpgsqlCommand.Disposed -> System.EventHandler?
Npgsql.NpgsqlConnection.Disposed -> System.EventHandler?
Npgsql.NpgsqlNestedDataReader
override Npgsql.NpgsqlNestedDataReader.Close() -> void
override Npgsql.NpgsqlNestedDataReader.Depth.get -> int
override Npgsql.NpgsqlNestedDataReader.FieldCount.get -> int
override Npgsql.NpgsqlNestedDataReader.GetBoolean(int ordinal) -> bool
override Npgsql.NpgsqlNestedDataReader.GetByte(int ordinal) -> byte
override Npgsql.NpgsqlNestedDataReader.GetBytes(int ordinal, long dataOffset, byte[]? buffer, int bufferOffset, int length) -> long
override Npgsql.NpgsqlNestedDataReader.GetChar(int ordinal) -> char
override Npgsql.NpgsqlNestedDataReader.GetChars(int ordinal, long dataOffset, char[]? buffer, int bufferOffset, int length) -> long
override Npgsql.NpgsqlNestedDataReader.GetDataTypeName(int ordinal) -> string!
override Npgsql.NpgsqlNestedDataReader.GetDateTime(int ordinal) -> System.DateTime
override Npgsql.NpgsqlNestedDataReader.GetDecimal(int ordinal) -> decimal
override Npgsql.NpgsqlNestedDataReader.GetDouble(int ordinal) -> double
override Npgsql.NpgsqlNestedDataReader.GetEnumerator() -> System.Collections.IEnumerator!
override Npgsql.NpgsqlNestedDataReader.GetFieldType(int ordinal) -> System.Type!
override Npgsql.NpgsqlNestedDataReader.GetFieldValue<T>(int ordinal) -> T
override Npgsql.NpgsqlNestedDataReader.GetFloat(int ordinal) -> float
override Npgsql.NpgsqlNestedDataReader.GetGuid(int ordinal) -> System.Guid
override Npgsql.NpgsqlNestedDataReader.GetInt16(int ordinal) -> short
override Npgsql.NpgsqlNestedDataReader.GetInt32(int ordinal) -> int
override Npgsql.NpgsqlNestedDataReader.GetInt64(int ordinal) -> long
override Npgsql.NpgsqlNestedDataReader.GetName(int ordinal) -> string!
override Npgsql.NpgsqlNestedDataReader.GetOrdinal(string! name) -> int
override Npgsql.NpgsqlNestedDataReader.GetProviderSpecificFieldType(int ordinal) -> System.Type!
override Npgsql.NpgsqlNestedDataReader.GetProviderSpecificValue(int ordinal) -> object!
override Npgsql.NpgsqlNestedDataReader.GetProviderSpecificValues(object![]! values) -> int
override Npgsql.NpgsqlNestedDataReader.GetString(int ordinal) -> string!
override Npgsql.NpgsqlNestedDataReader.GetValue(int ordinal) -> object!
override Npgsql.NpgsqlNestedDataReader.GetValues(object![]! values) -> int
override Npgsql.NpgsqlNestedDataReader.HasRows.get -> bool
override Npgsql.NpgsqlNestedDataReader.IsClosed.get -> bool
override Npgsql.NpgsqlNestedDataReader.IsDBNull(int ordinal) -> bool
override Npgsql.NpgsqlNestedDataReader.NextResult() -> bool
override Npgsql.NpgsqlNestedDataReader.Read() -> bool
override Npgsql.NpgsqlNestedDataReader.RecordsAffected.get -> int
override Npgsql.NpgsqlNestedDataReader.this[int ordinal].get -> object!
override Npgsql.NpgsqlNestedDataReader.this[string! name].get -> object!
Npgsql.NpgsqlNestedDataReader.GetData(int ordinal) -> Npgsql.NpgsqlNestedDataReader!
Npgsql.NpgsqlDataReader.GetData(int ordinal) -> Npgsql.NpgsqlNestedDataReader!
*REMOVED*virtual Npgsql.NpgsqlDatabaseInfo.HasIntegerDateTimes.get -> bool
*REMOVED*virtual Npgsql.NpgsqlDatabaseInfo.HasIntegerDateTimes.set -> void
*REMOVED*virtual Npgsql.NpgsqlDatabaseInfo.SupportsAdvisoryLocks.get -> bool
*REMOVED*virtual Npgsql.NpgsqlDatabaseInfo.SupportsCloseAll.get -> bool
*REMOVED*virtual Npgsql.NpgsqlDatabaseInfo.SupportsDiscard.get -> bool
*REMOVED*virtual Npgsql.NpgsqlDatabaseInfo.SupportsDiscardSequences.get -> bool
*REMOVED*virtual Npgsql.NpgsqlDatabaseInfo.SupportsDiscardTemp.get -> bool
*REMOVED*virtual Npgsql.NpgsqlDatabaseInfo.SupportsEnumTypes.get -> bool
*REMOVED*virtual Npgsql.NpgsqlDatabaseInfo.SupportsRangeTypes.get -> bool
*REMOVED*virtual Npgsql.NpgsqlDatabaseInfo.SupportsTransactions.get -> bool
*REMOVED*virtual Npgsql.NpgsqlDatabaseInfo.SupportsTransactions.set -> void
*REMOVED*virtual Npgsql.NpgsqlDatabaseInfo.SupportsUnlisten.get -> bool
Npgsql.NpgsqlParameter<T>.TypedValue.get -> T?
NpgsqlTypes.NpgsqlDate.NpgsqlDate(System.DateOnly date) -> void
static NpgsqlTypes.NpgsqlDate.ToDateOnly(NpgsqlTypes.NpgsqlDate date) -> System.DateOnly
static NpgsqlTypes.NpgsqlDate.ToNpgsqlDate(System.DateOnly date) -> NpgsqlTypes.NpgsqlDate
static NpgsqlTypes.NpgsqlDate.explicit operator NpgsqlTypes.NpgsqlDate(System.DateOnly date) -> NpgsqlTypes.NpgsqlDate
static NpgsqlTypes.NpgsqlDate.explicit operator System.DateOnly(NpgsqlTypes.NpgsqlDate date) -> System.DateOnly
NpgsqlTypes.NpgsqlDbType.Xid8 = 64 -> NpgsqlTypes.NpgsqlDbType
*REMOVED*Npgsql.NpgsqlCommand.Statements.get -> System.Collections.Generic.IReadOnlyList<Npgsql.NpgsqlStatement!>!
*REMOVED*Npgsql.NpgsqlDataReader.Statements.get -> System.Collections.Generic.IReadOnlyList<Npgsql.NpgsqlStatement!>!
*REMOVED*Npgsql.NpgsqlStatement
*REMOVED*Npgsql.NpgsqlStatement.InputParameters.get -> System.Collections.Generic.List<Npgsql.NpgsqlParameter!>!
*REMOVED*Npgsql.NpgsqlStatement.LongRows.get -> ulong
*REMOVED*Npgsql.NpgsqlStatement.NpgsqlStatement() -> void
*REMOVED*Npgsql.NpgsqlStatement.OID.get -> uint
*REMOVED*Npgsql.NpgsqlStatement.Rows.get -> uint
*REMOVED*Npgsql.NpgsqlStatement.SQL.get -> string!
*REMOVED*Npgsql.NpgsqlStatement.SQL.set -> void
*REMOVED*Npgsql.NpgsqlStatement.StatementType.get -> Npgsql.StatementType
*REMOVED*override Npgsql.NpgsqlStatement.ToString() -> string!
*REMOVED*Npgsql.PostgresException.Statement.get -> Npgsql.NpgsqlStatement?
