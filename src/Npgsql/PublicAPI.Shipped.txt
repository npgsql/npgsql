abstract Npgsql.Logging.NpgsqlLogger.IsEnabled(Npgsql.Logging.NpgsqlLogLevel level) -> bool
abstract Npgsql.Logging.NpgsqlLogger.Log(Npgsql.Logging.NpgsqlLogLevel level, int connectorId, string! msg, System.Exception? exception = null) -> void
abstract Npgsql.NpgsqlDatabaseInfo.GetTypes() -> System.Collections.Generic.IEnumerable<Npgsql.PostgresTypes.PostgresType!>!
abstract Npgsql.Replication.PgOutput.Messages.PgOutputReplicationMessage.Clone() -> Npgsql.Replication.PgOutput.Messages.PgOutputReplicationMessage!
abstract Npgsql.TypeHandling.NpgsqlSimpleTypeHandler<TDefault>.Read(Npgsql.NpgsqlReadBuffer! buf, int len, Npgsql.BackendMessages.FieldDescription? fieldDescription = null) -> TDefault
abstract Npgsql.TypeHandling.NpgsqlSimpleTypeHandler<TDefault>.ValidateAndGetLength(TDefault value, Npgsql.NpgsqlParameter? parameter) -> int
abstract Npgsql.TypeHandling.NpgsqlSimpleTypeHandler<TDefault>.Write(TDefault value, Npgsql.NpgsqlWriteBuffer! buf, Npgsql.NpgsqlParameter? parameter) -> void
abstract Npgsql.TypeHandling.NpgsqlSimpleTypeHandlerWithPsv<TDefault, TPsv>.ReadPsv(Npgsql.NpgsqlReadBuffer! buf, int len, Npgsql.BackendMessages.FieldDescription? fieldDescription = null) -> TPsv
abstract Npgsql.TypeHandling.NpgsqlSimpleTypeHandlerWithPsv<TDefault, TPsv>.ValidateAndGetLength(TPsv value, Npgsql.NpgsqlParameter? parameter) -> int
abstract Npgsql.TypeHandling.NpgsqlSimpleTypeHandlerWithPsv<TDefault, TPsv>.Write(TPsv value, Npgsql.NpgsqlWriteBuffer! buf, Npgsql.NpgsqlParameter? parameter) -> void
abstract Npgsql.TypeHandling.NpgsqlTypeHandler.CreateArrayHandler(Npgsql.PostgresTypes.PostgresArrayType! arrayBackendType) -> Npgsql.TypeHandlers.ArrayHandler!
abstract Npgsql.TypeHandling.NpgsqlTypeHandler.CreateRangeHandler(Npgsql.PostgresTypes.PostgresType! rangeBackendType) -> Npgsql.TypeHandlers.IRangeHandler!
abstract Npgsql.TypeHandling.NpgsqlTypeHandler.Read<TAny>(Npgsql.NpgsqlReadBuffer! buf, int len, bool async, Npgsql.BackendMessages.FieldDescription? fieldDescription = null) -> System.Threading.Tasks.ValueTask<TAny>
abstract Npgsql.TypeHandling.NpgsqlTypeHandler.Read<TAny>(Npgsql.NpgsqlReadBuffer! buf, int len, Npgsql.BackendMessages.FieldDescription? fieldDescription = null) -> TAny
abstract Npgsql.TypeHandling.NpgsqlTypeHandler.ValidateAndGetLength<TAny>(TAny value, ref Npgsql.NpgsqlLengthCache? lengthCache, Npgsql.NpgsqlParameter? parameter) -> int
abstract Npgsql.TypeHandling.NpgsqlTypeHandler.ValidateObjectAndGetLength(object! value, ref Npgsql.NpgsqlLengthCache? lengthCache, Npgsql.NpgsqlParameter? parameter) -> int
abstract Npgsql.TypeHandling.NpgsqlTypeHandler.WriteObjectWithLength(object! value, Npgsql.NpgsqlWriteBuffer! buf, Npgsql.NpgsqlLengthCache? lengthCache, Npgsql.NpgsqlParameter? parameter, bool async, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
abstract Npgsql.TypeHandling.NpgsqlTypeHandler<TDefault>.Read(Npgsql.NpgsqlReadBuffer! buf, int len, bool async, Npgsql.BackendMessages.FieldDescription? fieldDescription = null) -> System.Threading.Tasks.ValueTask<TDefault>
abstract Npgsql.TypeHandling.NpgsqlTypeHandler<TDefault>.ValidateAndGetLength(TDefault value, ref Npgsql.NpgsqlLengthCache? lengthCache, Npgsql.NpgsqlParameter? parameter) -> int
abstract Npgsql.TypeHandling.NpgsqlTypeHandler<TDefault>.Write(TDefault value, Npgsql.NpgsqlWriteBuffer! buf, Npgsql.NpgsqlLengthCache? lengthCache, Npgsql.NpgsqlParameter? parameter, bool async, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
abstract Npgsql.TypeHandling.NpgsqlTypeHandlerFactory.CreateNonGeneric(Npgsql.PostgresTypes.PostgresType! pgType, Npgsql.NpgsqlConnection! conn) -> Npgsql.TypeHandling.NpgsqlTypeHandler!
abstract Npgsql.TypeHandling.NpgsqlTypeHandlerFactory.DefaultValueType.get -> System.Type!
abstract Npgsql.TypeHandling.NpgsqlTypeHandlerFactory<TDefault>.Create(Npgsql.PostgresTypes.PostgresType! pgType, Npgsql.NpgsqlConnection! conn) -> Npgsql.TypeHandling.NpgsqlTypeHandler<TDefault>!
const Npgsql.NpgsqlConnection.DefaultPort = 5432 -> int
const Npgsql.PostgresErrorCodes.ActiveSqlTransaction = "25001" -> string!
const Npgsql.PostgresErrorCodes.AdminShutdown = "57P01" -> string!
const Npgsql.PostgresErrorCodes.AmbiguousAlias = "42P09" -> string!
const Npgsql.PostgresErrorCodes.AmbiguousColumn = "42702" -> string!
const Npgsql.PostgresErrorCodes.AmbiguousFunction = "42725" -> string!
const Npgsql.PostgresErrorCodes.AmbiguousParameter = "42P08" -> string!
const Npgsql.PostgresErrorCodes.ArraySubscriptError = "2202E" -> string!
const Npgsql.PostgresErrorCodes.AssertFailure = "P0004" -> string!
const Npgsql.PostgresErrorCodes.BadCopyFileFormat = "22P04" -> string!
const Npgsql.PostgresErrorCodes.BranchTransactionAlreadyActive = "25002" -> string!
const Npgsql.PostgresErrorCodes.CannotCoerce = "42846" -> string!
const Npgsql.PostgresErrorCodes.CannotConnectNow = "57P03" -> string!
const Npgsql.PostgresErrorCodes.CantChangeRuntimeParam = "55P02" -> string!
const Npgsql.PostgresErrorCodes.CardinalityViolation = "21000" -> string!
const Npgsql.PostgresErrorCodes.CaseNotFound = "20000" -> string!
const Npgsql.PostgresErrorCodes.CharacterNotInRepertoire = "22021" -> string!
const Npgsql.PostgresErrorCodes.CheckViolation = "23514" -> string!
const Npgsql.PostgresErrorCodes.CollationMismatch = "42P21" -> string!
const Npgsql.PostgresErrorCodes.ConfigFileError = "F0000" -> string!
const Npgsql.PostgresErrorCodes.ConfigurationLimitExceeded = "53400" -> string!
const Npgsql.PostgresErrorCodes.ConnectionDoesNotExist = "08003" -> string!
const Npgsql.PostgresErrorCodes.ConnectionException = "08000" -> string!
const Npgsql.PostgresErrorCodes.ConnectionFailure = "08006" -> string!
const Npgsql.PostgresErrorCodes.ContainingSqlNotPermittedExternalRoutineException = "38001" -> string!
const Npgsql.PostgresErrorCodes.CrashShutdown = "57P02" -> string!
const Npgsql.PostgresErrorCodes.DatabaseDropped = "57P04" -> string!
const Npgsql.PostgresErrorCodes.DataCorrupted = "XX001" -> string!
const Npgsql.PostgresErrorCodes.DataException = "22000" -> string!
const Npgsql.PostgresErrorCodes.DatatypeMismatch = "42804" -> string!
const Npgsql.PostgresErrorCodes.DatetimeFieldOverflow = "22008" -> string!
const Npgsql.PostgresErrorCodes.DeadlockDetected = "40P01" -> string!
const Npgsql.PostgresErrorCodes.DependentObjectsStillExist = "2BP01" -> string!
const Npgsql.PostgresErrorCodes.DependentPrivilegeDescriptorsStillExist = "2B000" -> string!
const Npgsql.PostgresErrorCodes.DeprecatedFeatureWarning = "01P01" -> string!
const Npgsql.PostgresErrorCodes.DiagnosticsException = "0Z000" -> string!
const Npgsql.PostgresErrorCodes.DiskFull = "53100" -> string!
const Npgsql.PostgresErrorCodes.DivisionByZero = "22012" -> string!
const Npgsql.PostgresErrorCodes.DuplicateAlias = "42712" -> string!
const Npgsql.PostgresErrorCodes.DuplicateColumn = "42701" -> string!
const Npgsql.PostgresErrorCodes.DuplicateCursor = "42P03" -> string!
const Npgsql.PostgresErrorCodes.DuplicateDatabase = "42P04" -> string!
const Npgsql.PostgresErrorCodes.DuplicateFile = "58P02" -> string!
const Npgsql.PostgresErrorCodes.DuplicateFunction = "42723" -> string!
const Npgsql.PostgresErrorCodes.DuplicateObject = "42710" -> string!
const Npgsql.PostgresErrorCodes.DuplicatePreparedStatement = "42P05" -> string!
const Npgsql.PostgresErrorCodes.DuplicateSchema = "42P06" -> string!
const Npgsql.PostgresErrorCodes.DuplicateTable = "42P07" -> string!
const Npgsql.PostgresErrorCodes.DynamicResultSetsReturnedWarning = "0100C" -> string!
const Npgsql.PostgresErrorCodes.ErrorInAssignment = "22005" -> string!
const Npgsql.PostgresErrorCodes.EscapeCharacterConflict = "2200B" -> string!
const Npgsql.PostgresErrorCodes.EventTriggerProtocolViolatedExternalRoutineInvocationException = "39P03" -> string!
const Npgsql.PostgresErrorCodes.ExclusionViolation = "23P01" -> string!
const Npgsql.PostgresErrorCodes.ExternalRoutineException = "38000" -> string!
const Npgsql.PostgresErrorCodes.ExternalRoutineInvocationException = "39000" -> string!
const Npgsql.PostgresErrorCodes.FdwColumnNameNotFound = "HV005" -> string!
const Npgsql.PostgresErrorCodes.FdwDynamicParameterValueNeeded = "HV002" -> string!
const Npgsql.PostgresErrorCodes.FdwError = "HV000" -> string!
const Npgsql.PostgresErrorCodes.FdwFunctionSequenceError = "HV010" -> string!
const Npgsql.PostgresErrorCodes.FdwInconsistentDescriptorInformation = "HV021" -> string!
const Npgsql.PostgresErrorCodes.FdwInvalidAttributeValue = "HV024" -> string!
const Npgsql.PostgresErrorCodes.FdwInvalidColumnName = "HV007" -> string!
const Npgsql.PostgresErrorCodes.FdwInvalidColumnNumber = "HV008" -> string!
const Npgsql.PostgresErrorCodes.FdwInvalidDataType = "HV004" -> string!
const Npgsql.PostgresErrorCodes.FdwInvalidDataTypeDescriptors = "HV006" -> string!
const Npgsql.PostgresErrorCodes.FdwInvalidDescriptorFieldIdentifier = "HV091" -> string!
const Npgsql.PostgresErrorCodes.FdwInvalidHandle = "HV00B" -> string!
const Npgsql.PostgresErrorCodes.FdwInvalidOptionIndex = "HV00C" -> string!
const Npgsql.PostgresErrorCodes.FdwInvalidOptionName = "HV00D" -> string!
const Npgsql.PostgresErrorCodes.FdwInvalidStringFormat = "HV00A" -> string!
const Npgsql.PostgresErrorCodes.FdwInvalidStringLengthOrBufferLength = "HV090" -> string!
const Npgsql.PostgresErrorCodes.FdwInvalidUseOfNullPointer = "HV009" -> string!
const Npgsql.PostgresErrorCodes.FdwNoSchemas = "HV00P" -> string!
const Npgsql.PostgresErrorCodes.FdwOptionNameNotFound = "HV00J" -> string!
const Npgsql.PostgresErrorCodes.FdwOutOfMemory = "HV001" -> string!
const Npgsql.PostgresErrorCodes.FdwReplyHandle = "HV00K" -> string!
const Npgsql.PostgresErrorCodes.FdwSchemaNotFound = "HV00Q" -> string!
const Npgsql.PostgresErrorCodes.FdwTableNotFound = "HV00R" -> string!
const Npgsql.PostgresErrorCodes.FdwTooManyHandles = "HV014" -> string!
const Npgsql.PostgresErrorCodes.FdwUnableToCreateExecution = "HV00L" -> string!
const Npgsql.PostgresErrorCodes.FdwUnableToCreateReply = "HV00M" -> string!
const Npgsql.PostgresErrorCodes.FdwUnableToEstablishConnection = "HV00N" -> string!
const Npgsql.PostgresErrorCodes.FeatureNotSupported = "0A000" -> string!
const Npgsql.PostgresErrorCodes.FloatingPointException = "22P01" -> string!
const Npgsql.PostgresErrorCodes.ForeignKeyViolation = "23503" -> string!
const Npgsql.PostgresErrorCodes.FunctionExecutedNoReturnStatementSqlRoutineException = "2F005" -> string!
const Npgsql.PostgresErrorCodes.GroupingError = "42803" -> string!
const Npgsql.PostgresErrorCodes.HeldCursorRequiresSameIsolationLevel = "25008" -> string!
const Npgsql.PostgresErrorCodes.ImplicitZeroBitPaddingWarning = "01008" -> string!
const Npgsql.PostgresErrorCodes.InappropriateAccessModeForBranchTransaction = "25003" -> string!
const Npgsql.PostgresErrorCodes.InappropriateIsolationLevelForBranchTransaction = "25004" -> string!
const Npgsql.PostgresErrorCodes.IndeterminateCollation = "42P22" -> string!
const Npgsql.PostgresErrorCodes.IndeterminateDatatype = "42P18" -> string!
const Npgsql.PostgresErrorCodes.IndexCorrupted = "XX002" -> string!
const Npgsql.PostgresErrorCodes.IndicatorOverflow = "22022" -> string!
const Npgsql.PostgresErrorCodes.InFailedSqlTransaction = "25P02" -> string!
const Npgsql.PostgresErrorCodes.InsufficientPrivilege = "42501" -> string!
const Npgsql.PostgresErrorCodes.InsufficientResources = "53000" -> string!
const Npgsql.PostgresErrorCodes.IntegrityConstraintViolation = "23000" -> string!
const Npgsql.PostgresErrorCodes.InternalError = "XX000" -> string!
const Npgsql.PostgresErrorCodes.IntervalFieldOverflow = "22015" -> string!
const Npgsql.PostgresErrorCodes.InvalidArgumentForLogarithm = "2201E" -> string!
const Npgsql.PostgresErrorCodes.InvalidArgumentForNthValueFunction = "22016" -> string!
const Npgsql.PostgresErrorCodes.InvalidArgumentForNtileFunction = "22014" -> string!
const Npgsql.PostgresErrorCodes.InvalidArgumentForPowerFunction = "2201F" -> string!
const Npgsql.PostgresErrorCodes.InvalidArgumentForWidthBucketFunction = "2201G" -> string!
const Npgsql.PostgresErrorCodes.InvalidAuthorizationSpecification = "28000" -> string!
const Npgsql.PostgresErrorCodes.InvalidBinaryRepresentation = "22P03" -> string!
const Npgsql.PostgresErrorCodes.InvalidCatalogName = "3D000" -> string!
const Npgsql.PostgresErrorCodes.InvalidCharacterValueForCast = "22018" -> string!
const Npgsql.PostgresErrorCodes.InvalidColumnDefinition = "42611" -> string!
const Npgsql.PostgresErrorCodes.InvalidColumnReference = "42P10" -> string!
const Npgsql.PostgresErrorCodes.InvalidCursorDefinition = "42P11" -> string!
const Npgsql.PostgresErrorCodes.InvalidCursorName = "34000" -> string!
const Npgsql.PostgresErrorCodes.InvalidCursorState = "24000" -> string!
const Npgsql.PostgresErrorCodes.InvalidDatabaseDefinition = "42P12" -> string!
const Npgsql.PostgresErrorCodes.InvalidDatetimeFormat = "22007" -> string!
const Npgsql.PostgresErrorCodes.InvalidEscapeCharacter = "22019" -> string!
const Npgsql.PostgresErrorCodes.InvalidEscapeOctet = "2200D" -> string!
const Npgsql.PostgresErrorCodes.InvalidEscapeSequence = "22025" -> string!
const Npgsql.PostgresErrorCodes.InvalidForeignKey = "42830" -> string!
const Npgsql.PostgresErrorCodes.InvalidFunctionDefinition = "42P13" -> string!
const Npgsql.PostgresErrorCodes.InvalidGrantOperation = "0LP01" -> string!
const Npgsql.PostgresErrorCodes.InvalidGrantor = "0L000" -> string!
const Npgsql.PostgresErrorCodes.InvalidIndicatorParameterValue = "22010" -> string!
const Npgsql.PostgresErrorCodes.InvalidLocatorSpecification = "0F001" -> string!
const Npgsql.PostgresErrorCodes.InvalidName = "42602" -> string!
const Npgsql.PostgresErrorCodes.InvalidObjectDefinition = "42P17" -> string!
const Npgsql.PostgresErrorCodes.InvalidParameterValue = "22023" -> string!
const Npgsql.PostgresErrorCodes.InvalidPassword = "28P01" -> string!
const Npgsql.PostgresErrorCodes.InvalidPreparedStatementDefinition = "42P14" -> string!
const Npgsql.PostgresErrorCodes.InvalidRecursion = "42P19" -> string!
const Npgsql.PostgresErrorCodes.InvalidRegularExpression = "2201B" -> string!
const Npgsql.PostgresErrorCodes.InvalidRoleSpecification = "0P000" -> string!
const Npgsql.PostgresErrorCodes.InvalidRowCountInLimitClause = "2201W" -> string!
const Npgsql.PostgresErrorCodes.InvalidRowCountInResultOffsetClause = "2201X" -> string!
const Npgsql.PostgresErrorCodes.InvalidSavepointSpecification = "3B001" -> string!
const Npgsql.PostgresErrorCodes.InvalidSchemaDefinition = "42P15" -> string!
const Npgsql.PostgresErrorCodes.InvalidSchemaName = "3F000" -> string!
const Npgsql.PostgresErrorCodes.InvalidSqlStatementName = "26000" -> string!
const Npgsql.PostgresErrorCodes.InvalidSqlstateReturnedExternalRoutineInvocationException = "39001" -> string!
const Npgsql.PostgresErrorCodes.InvalidTableDefinition = "42P16" -> string!
const Npgsql.PostgresErrorCodes.InvalidTablesampleArgument = "2202H" -> string!
const Npgsql.PostgresErrorCodes.InvalidTablesampleRepeat = "2202G" -> string!
const Npgsql.PostgresErrorCodes.InvalidTextRepresentation = "22P02" -> string!
const Npgsql.PostgresErrorCodes.InvalidTimeZoneDisplacementValue = "22009" -> string!
const Npgsql.PostgresErrorCodes.InvalidTransactionInitiation = "0B000" -> string!
const Npgsql.PostgresErrorCodes.InvalidTransactionState = "25000" -> string!
const Npgsql.PostgresErrorCodes.InvalidTransactionTermination = "2D000" -> string!
const Npgsql.PostgresErrorCodes.InvalidUseOfEscapeCharacter = "2200C" -> string!
const Npgsql.PostgresErrorCodes.InvalidXmlComment = "2200S" -> string!
const Npgsql.PostgresErrorCodes.InvalidXmlContent = "2200N" -> string!
const Npgsql.PostgresErrorCodes.InvalidXmlDocument = "2200M" -> string!
const Npgsql.PostgresErrorCodes.InvalidXmlProcessingInstruction = "2200T" -> string!
const Npgsql.PostgresErrorCodes.IoError = "58030" -> string!
const Npgsql.PostgresErrorCodes.LocatorException = "0F000" -> string!
const Npgsql.PostgresErrorCodes.LockFileExists = "F0001" -> string!
const Npgsql.PostgresErrorCodes.LockNotAvailable = "55P03" -> string!
const Npgsql.PostgresErrorCodes.ModifyingSqlDataNotPermittedExternalRoutineException = "38002" -> string!
const Npgsql.PostgresErrorCodes.ModifyingSqlDataNotPermittedSqlRoutineException = "2F002" -> string!
const Npgsql.PostgresErrorCodes.MostSpecificTypeMismatch = "2200G" -> string!
const Npgsql.PostgresErrorCodes.NameTooLong = "42622" -> string!
const Npgsql.PostgresErrorCodes.NoActiveSqlTransaction = "25P01" -> string!
const Npgsql.PostgresErrorCodes.NoActiveSqlTransactionForBranchTransaction = "25005" -> string!
const Npgsql.PostgresErrorCodes.NoAdditionalDynamicResultSetsReturned = "02001" -> string!
const Npgsql.PostgresErrorCodes.NoData = "02000" -> string!
const Npgsql.PostgresErrorCodes.NoDataFound = "P0002" -> string!
const Npgsql.PostgresErrorCodes.NonstandardUseOfEscapeCharacter = "22P06" -> string!
const Npgsql.PostgresErrorCodes.NotAnXmlDocument = "2200L" -> string!
const Npgsql.PostgresErrorCodes.NotNullViolation = "23502" -> string!
const Npgsql.PostgresErrorCodes.NullValueEliminatedInSetFunctionWarning = "01003" -> string!
const Npgsql.PostgresErrorCodes.NullValueNoIndicatorParameter = "22002" -> string!
const Npgsql.PostgresErrorCodes.NullValueNotAllowed = "22004" -> string!
const Npgsql.PostgresErrorCodes.NullValueNotAllowedExternalRoutineInvocationException = "39004" -> string!
const Npgsql.PostgresErrorCodes.NumericValueOutOfRange = "22003" -> string!
const Npgsql.PostgresErrorCodes.ObjectInUse = "55006" -> string!
const Npgsql.PostgresErrorCodes.ObjectNotInPrerequisiteState = "55000" -> string!
const Npgsql.PostgresErrorCodes.OperatorIntervention = "57000" -> string!
const Npgsql.PostgresErrorCodes.OutOfMemory = "53200" -> string!
const Npgsql.PostgresErrorCodes.PlpgsqlError = "P0000" -> string!
const Npgsql.PostgresErrorCodes.PrivilegeNotGrantedWarning = "01007" -> string!
const Npgsql.PostgresErrorCodes.PrivilegeNotRevokedWarning = "01006" -> string!
const Npgsql.PostgresErrorCodes.ProgramLimitExceeded = "54000" -> string!
const Npgsql.PostgresErrorCodes.ProhibitedSqlStatementAttemptedExternalRoutineException = "38003" -> string!
const Npgsql.PostgresErrorCodes.ProhibitedSqlStatementAttemptedSqlRoutineException = "2F003" -> string!
const Npgsql.PostgresErrorCodes.ProtocolViolation = "08P01" -> string!
const Npgsql.PostgresErrorCodes.QueryCanceled = "57014" -> string!
const Npgsql.PostgresErrorCodes.RaiseException = "P0001" -> string!
const Npgsql.PostgresErrorCodes.ReadingSqlDataNotPermittedExternalRoutineException = "38004" -> string!
const Npgsql.PostgresErrorCodes.ReadingSqlDataNotPermittedSqlRoutineException = "2F004" -> string!
const Npgsql.PostgresErrorCodes.ReadOnlySqlTransaction = "25006" -> string!
const Npgsql.PostgresErrorCodes.ReservedName = "42939" -> string!
const Npgsql.PostgresErrorCodes.RestrictViolation = "23001" -> string!
const Npgsql.PostgresErrorCodes.SavepointException = "3B000" -> string!
const Npgsql.PostgresErrorCodes.SchemaAndDataStatementMixingNotSupported = "25007" -> string!
const Npgsql.PostgresErrorCodes.SerializationFailure = "40001" -> string!
const Npgsql.PostgresErrorCodes.SnapshotFailure = "72000" -> string!
const Npgsql.PostgresErrorCodes.SqlClientUnableToEstablishSqlConnection = "08001" -> string!
const Npgsql.PostgresErrorCodes.SqlRoutineException = "2F000" -> string!
const Npgsql.PostgresErrorCodes.SqlServerRejectedEstablishmentOfSqlConnection = "08004" -> string!
const Npgsql.PostgresErrorCodes.SqlStatementNotYetComplete = "03000" -> string!
const Npgsql.PostgresErrorCodes.SrfProtocolViolatedExternalRoutineInvocationException = "39P02" -> string!
const Npgsql.PostgresErrorCodes.StackedDiagnosticsAccessedWithoutActiveHandler = "0Z002" -> string!
const Npgsql.PostgresErrorCodes.StatementCompletionUnknown = "40003" -> string!
const Npgsql.PostgresErrorCodes.StatementTooComplex = "54001" -> string!
const Npgsql.PostgresErrorCodes.StringDataLengthMismatch = "22026" -> string!
const Npgsql.PostgresErrorCodes.StringDataRightTruncation = "22001" -> string!
const Npgsql.PostgresErrorCodes.StringDataRightTruncationWarning = "01004" -> string!
const Npgsql.PostgresErrorCodes.SubstringError = "22011" -> string!
const Npgsql.PostgresErrorCodes.SuccessfulCompletion = "00000" -> string!
const Npgsql.PostgresErrorCodes.SyntaxError = "42601" -> string!
const Npgsql.PostgresErrorCodes.SyntaxErrorOrAccessRuleViolation = "42000" -> string!
const Npgsql.PostgresErrorCodes.SystemError = "58000" -> string!
const Npgsql.PostgresErrorCodes.TooManyArguments = "54023" -> string!
const Npgsql.PostgresErrorCodes.TooManyColumns = "54011" -> string!
const Npgsql.PostgresErrorCodes.TooManyConnections = "53300" -> string!
const Npgsql.PostgresErrorCodes.TooManyRows = "P0003" -> string!
const Npgsql.PostgresErrorCodes.TransactionIntegrityConstraintViolation = "40002" -> string!
const Npgsql.PostgresErrorCodes.TransactionResolutionUnknown = "08007" -> string!
const Npgsql.PostgresErrorCodes.TransactionRollback = "40000" -> string!
const Npgsql.PostgresErrorCodes.TriggeredActionException = "09000" -> string!
const Npgsql.PostgresErrorCodes.TriggeredDataChangeViolation = "27000" -> string!
const Npgsql.PostgresErrorCodes.TriggerProtocolViolatedExternalRoutineInvocationException = "39P01" -> string!
const Npgsql.PostgresErrorCodes.TrimError = "22027" -> string!
const Npgsql.PostgresErrorCodes.UndefinedColumn = "42703" -> string!
const Npgsql.PostgresErrorCodes.UndefinedFile = "58P01" -> string!
const Npgsql.PostgresErrorCodes.UndefinedFunction = "42883" -> string!
const Npgsql.PostgresErrorCodes.UndefinedObject = "42704" -> string!
const Npgsql.PostgresErrorCodes.UndefinedParameter = "42P02" -> string!
const Npgsql.PostgresErrorCodes.UndefinedTable = "42P01" -> string!
const Npgsql.PostgresErrorCodes.UniqueViolation = "23505" -> string!
const Npgsql.PostgresErrorCodes.UnterminatedCString = "22024" -> string!
const Npgsql.PostgresErrorCodes.UntranslatableCharacter = "22P05" -> string!
const Npgsql.PostgresErrorCodes.Warning = "01000" -> string!
const Npgsql.PostgresErrorCodes.WindowingError = "42P20" -> string!
const Npgsql.PostgresErrorCodes.WithCheckOptionViolation = "44000" -> string!
const Npgsql.PostgresErrorCodes.WrongObjectType = "42809" -> string!
const Npgsql.PostgresErrorCodes.ZeroLengthCharacterString = "2200F" -> string!
const NpgsqlTypes.NpgsqlDate.MaxYear = 5874897 -> int
const NpgsqlTypes.NpgsqlDate.MinYear = -4714 -> int
const NpgsqlTypes.NpgsqlTimeSpan.DaysPerMonth = 30 -> int
const NpgsqlTypes.NpgsqlTimeSpan.HoursPerDay = 24 -> int
const NpgsqlTypes.NpgsqlTimeSpan.MonthsPerYear = 12 -> int
const NpgsqlTypes.NpgsqlTimeSpan.TicksPerDay = 864000000000 -> long
const NpgsqlTypes.NpgsqlTimeSpan.TicksPerHour = 36000000000 -> long
const NpgsqlTypes.NpgsqlTimeSpan.TicksPerMicrosecond = 10 -> long
const NpgsqlTypes.NpgsqlTimeSpan.TicksPerMillsecond = 10000 -> long
const NpgsqlTypes.NpgsqlTimeSpan.TicksPerMinute = 600000000 -> long
const NpgsqlTypes.NpgsqlTimeSpan.TicksPerMonth = 25920000000000 -> long
const NpgsqlTypes.NpgsqlTimeSpan.TicksPerSecond = 10000000 -> long
Npgsql.BackendMessages.FieldDescription
Npgsql.BackendMessages.FieldDescription.TypeModifier.get -> int
Npgsql.BackendMessages.FieldDescription.TypeModifier.set -> void
Npgsql.BackendMessages.FieldDescription.TypeSize.get -> short
Npgsql.BackendMessages.FieldDescription.TypeSize.set -> void
Npgsql.INpgsqlDatabaseInfoFactory
Npgsql.INpgsqlDatabaseInfoFactory.Load(Npgsql.NpgsqlConnection! conn, Npgsql.Util.NpgsqlTimeout timeout, bool async) -> System.Threading.Tasks.Task<Npgsql.NpgsqlDatabaseInfo?>!
Npgsql.INpgsqlNameTranslator
Npgsql.INpgsqlNameTranslator.TranslateMemberName(string! clrName) -> string!
Npgsql.INpgsqlNameTranslator.TranslateTypeName(string! clrName) -> string!
Npgsql.Logging.ConsoleLoggingProvider
Npgsql.Logging.ConsoleLoggingProvider.ConsoleLoggingProvider(Npgsql.Logging.NpgsqlLogLevel minLevel = Npgsql.Logging.NpgsqlLogLevel.Info, bool printLevel = false, bool printConnectorId = false) -> void
Npgsql.Logging.ConsoleLoggingProvider.CreateLogger(string! name) -> Npgsql.Logging.NpgsqlLogger!
Npgsql.Logging.INpgsqlLoggingProvider
Npgsql.Logging.INpgsqlLoggingProvider.CreateLogger(string! name) -> Npgsql.Logging.NpgsqlLogger!
Npgsql.Logging.NpgsqlLogger
Npgsql.Logging.NpgsqlLogger.NpgsqlLogger() -> void
Npgsql.Logging.NpgsqlLogLevel
Npgsql.Logging.NpgsqlLogLevel.Debug = 2 -> Npgsql.Logging.NpgsqlLogLevel
Npgsql.Logging.NpgsqlLogLevel.Error = 5 -> Npgsql.Logging.NpgsqlLogLevel
Npgsql.Logging.NpgsqlLogLevel.Fatal = 6 -> Npgsql.Logging.NpgsqlLogLevel
Npgsql.Logging.NpgsqlLogLevel.Info = 3 -> Npgsql.Logging.NpgsqlLogLevel
Npgsql.Logging.NpgsqlLogLevel.Trace = 1 -> Npgsql.Logging.NpgsqlLogLevel
Npgsql.Logging.NpgsqlLogLevel.Warn = 4 -> Npgsql.Logging.NpgsqlLogLevel
Npgsql.Logging.NpgsqlLogManager
Npgsql.NameTranslation.NpgsqlNullNameTranslator
Npgsql.NameTranslation.NpgsqlNullNameTranslator.NpgsqlNullNameTranslator() -> void
Npgsql.NameTranslation.NpgsqlNullNameTranslator.TranslateMemberName(string! clrName) -> string!
Npgsql.NameTranslation.NpgsqlNullNameTranslator.TranslateTypeName(string! clrName) -> string!
Npgsql.NameTranslation.NpgsqlSnakeCaseNameTranslator
Npgsql.NameTranslation.NpgsqlSnakeCaseNameTranslator.NpgsqlSnakeCaseNameTranslator() -> void
Npgsql.NameTranslation.NpgsqlSnakeCaseNameTranslator.NpgsqlSnakeCaseNameTranslator(bool legacyMode) -> void
Npgsql.NameTranslation.NpgsqlSnakeCaseNameTranslator.TranslateMemberName(string! clrName) -> string!
Npgsql.NameTranslation.NpgsqlSnakeCaseNameTranslator.TranslateTypeName(string! clrName) -> string!
Npgsql.NoticeEventHandler
Npgsql.NotificationEventHandler
Npgsql.NpgsqlBinaryExporter
Npgsql.NpgsqlBinaryExporter.Cancel() -> void
Npgsql.NpgsqlBinaryExporter.Dispose() -> void
Npgsql.NpgsqlBinaryExporter.DisposeAsync() -> System.Threading.Tasks.ValueTask
Npgsql.NpgsqlBinaryExporter.IsNull.get -> bool
Npgsql.NpgsqlBinaryExporter.Read<T>() -> T
Npgsql.NpgsqlBinaryExporter.Read<T>(NpgsqlTypes.NpgsqlDbType type) -> T
Npgsql.NpgsqlBinaryExporter.ReadAsync<T>(NpgsqlTypes.NpgsqlDbType type, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.ValueTask<T>
Npgsql.NpgsqlBinaryExporter.ReadAsync<T>(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.ValueTask<T>
Npgsql.NpgsqlBinaryExporter.Skip() -> void
Npgsql.NpgsqlBinaryExporter.SkipAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
Npgsql.NpgsqlBinaryExporter.StartRow() -> int
Npgsql.NpgsqlBinaryExporter.StartRowAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.ValueTask<int>
Npgsql.NpgsqlBinaryExporter.Timeout.set -> void
Npgsql.NpgsqlBinaryImporter
Npgsql.NpgsqlBinaryImporter.Close() -> void
Npgsql.NpgsqlBinaryImporter.CloseAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.ValueTask
Npgsql.NpgsqlBinaryImporter.Complete() -> ulong
Npgsql.NpgsqlBinaryImporter.CompleteAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.ValueTask<ulong>
Npgsql.NpgsqlBinaryImporter.Dispose() -> void
Npgsql.NpgsqlBinaryImporter.DisposeAsync() -> System.Threading.Tasks.ValueTask
Npgsql.NpgsqlBinaryImporter.StartRow() -> void
Npgsql.NpgsqlBinaryImporter.StartRowAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
Npgsql.NpgsqlBinaryImporter.Timeout.set -> void
Npgsql.NpgsqlBinaryImporter.Write<T>(T value) -> void
Npgsql.NpgsqlBinaryImporter.Write<T>(T value, NpgsqlTypes.NpgsqlDbType npgsqlDbType) -> void
Npgsql.NpgsqlBinaryImporter.Write<T>(T value, string! dataTypeName) -> void
Npgsql.NpgsqlBinaryImporter.WriteAsync<T>(T value, NpgsqlTypes.NpgsqlDbType npgsqlDbType, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
Npgsql.NpgsqlBinaryImporter.WriteAsync<T>(T value, string! dataTypeName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
Npgsql.NpgsqlBinaryImporter.WriteAsync<T>(T value, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
Npgsql.NpgsqlBinaryImporter.WriteNull() -> void
Npgsql.NpgsqlBinaryImporter.WriteNullAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
Npgsql.NpgsqlBinaryImporter.WriteRow(params object![]! values) -> void
Npgsql.NpgsqlBinaryImporter.WriteRowAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken), params object![]! values) -> System.Threading.Tasks.Task!
Npgsql.NpgsqlCommand
Npgsql.NpgsqlCommand.AllResultTypesAreUnknown.get -> bool
Npgsql.NpgsqlCommand.AllResultTypesAreUnknown.set -> void
Npgsql.NpgsqlCommand.Clone() -> Npgsql.NpgsqlCommand!
Npgsql.NpgsqlCommand.Connection.get -> Npgsql.NpgsqlConnection?
Npgsql.NpgsqlCommand.Connection.set -> void
Npgsql.NpgsqlCommand.CreateParameter() -> Npgsql.NpgsqlParameter!
Npgsql.NpgsqlCommand.ExecuteReader(System.Data.CommandBehavior behavior = System.Data.CommandBehavior.Default) -> Npgsql.NpgsqlDataReader!
Npgsql.NpgsqlCommand.ExecuteReaderAsync(System.Data.CommandBehavior behavior, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<Npgsql.NpgsqlDataReader!>!
Npgsql.NpgsqlCommand.ExecuteReaderAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<Npgsql.NpgsqlDataReader!>!
Npgsql.NpgsqlCommand.IsPrepared.get -> bool
Npgsql.NpgsqlCommand.NpgsqlCommand() -> void
Npgsql.NpgsqlCommand.NpgsqlCommand(string? cmdText) -> void
Npgsql.NpgsqlCommand.NpgsqlCommand(string? cmdText, Npgsql.NpgsqlConnection? connection) -> void
Npgsql.NpgsqlCommand.NpgsqlCommand(string? cmdText, Npgsql.NpgsqlConnection? connection, Npgsql.NpgsqlTransaction? transaction) -> void
Npgsql.NpgsqlCommand.Parameters.get -> Npgsql.NpgsqlParameterCollection!
Npgsql.NpgsqlCommand.Statements.get -> System.Collections.Generic.IReadOnlyList<Npgsql.NpgsqlStatement!>!
Npgsql.NpgsqlCommand.Transaction.get -> Npgsql.NpgsqlTransaction?
Npgsql.NpgsqlCommand.Transaction.set -> void
Npgsql.NpgsqlCommand.UnknownResultTypeList.get -> bool[]?
Npgsql.NpgsqlCommand.UnknownResultTypeList.set -> void
Npgsql.NpgsqlCommand.Unprepare() -> void
Npgsql.NpgsqlCommand.UnprepareAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
Npgsql.NpgsqlCommandBuilder
Npgsql.NpgsqlCommandBuilder.GetDeleteCommand() -> Npgsql.NpgsqlCommand!
Npgsql.NpgsqlCommandBuilder.GetDeleteCommand(bool useColumnsForParameterNames) -> Npgsql.NpgsqlCommand!
Npgsql.NpgsqlCommandBuilder.GetInsertCommand() -> Npgsql.NpgsqlCommand!
Npgsql.NpgsqlCommandBuilder.GetInsertCommand(bool useColumnsForParameterNames) -> Npgsql.NpgsqlCommand!
Npgsql.NpgsqlCommandBuilder.GetUpdateCommand() -> Npgsql.NpgsqlCommand!
Npgsql.NpgsqlCommandBuilder.GetUpdateCommand(bool useColumnsForParameterNames) -> Npgsql.NpgsqlCommand!
Npgsql.NpgsqlCommandBuilder.NpgsqlCommandBuilder() -> void
Npgsql.NpgsqlCommandBuilder.NpgsqlCommandBuilder(Npgsql.NpgsqlDataAdapter? adapter) -> void
Npgsql.NpgsqlConnection
Npgsql.NpgsqlConnection.BeginBinaryExport(string! copyToCommand) -> Npgsql.NpgsqlBinaryExporter!
Npgsql.NpgsqlConnection.BeginBinaryImport(string! copyFromCommand) -> Npgsql.NpgsqlBinaryImporter!
Npgsql.NpgsqlConnection.BeginRawBinaryCopy(string! copyCommand) -> Npgsql.NpgsqlRawCopyStream!
Npgsql.NpgsqlConnection.BeginTextExport(string! copyToCommand) -> System.IO.TextReader!
Npgsql.NpgsqlConnection.BeginTextImport(string! copyFromCommand) -> System.IO.TextWriter!
Npgsql.NpgsqlConnection.BeginTransaction() -> Npgsql.NpgsqlTransaction!
Npgsql.NpgsqlConnection.BeginTransaction(System.Data.IsolationLevel level) -> Npgsql.NpgsqlTransaction!
Npgsql.NpgsqlConnection.BeginTransactionAsync(System.Data.IsolationLevel level, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.ValueTask<Npgsql.NpgsqlTransaction!>
Npgsql.NpgsqlConnection.BeginTransactionAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.ValueTask<Npgsql.NpgsqlTransaction!>
Npgsql.NpgsqlConnection.CloneWith(string! connectionString) -> Npgsql.NpgsqlConnection!
Npgsql.NpgsqlConnection.CommandTimeout.get -> int
Npgsql.NpgsqlConnection.CreateCommand() -> Npgsql.NpgsqlCommand!
Npgsql.NpgsqlConnection.FullState.get -> System.Data.ConnectionState
Npgsql.NpgsqlConnection.HasIntegerDateTimes.get -> bool
Npgsql.NpgsqlConnection.Host.get -> string?
Npgsql.NpgsqlConnection.IntegratedSecurity.get -> bool
Npgsql.NpgsqlConnection.MapComposite<T>(string? pgName = null, Npgsql.INpgsqlNameTranslator? nameTranslator = null) -> void
Npgsql.NpgsqlConnection.MapEnum<TEnum>(string? pgName = null, Npgsql.INpgsqlNameTranslator? nameTranslator = null) -> void
Npgsql.NpgsqlConnection.Notice -> Npgsql.NoticeEventHandler?
Npgsql.NpgsqlConnection.Notification -> Npgsql.NotificationEventHandler?
Npgsql.NpgsqlConnection.NpgsqlConnection() -> void
Npgsql.NpgsqlConnection.NpgsqlConnection(string? connectionString) -> void
Npgsql.NpgsqlConnection.Port.get -> int
Npgsql.NpgsqlConnection.PostgresParameters.get -> System.Collections.Generic.IReadOnlyDictionary<string!, string!>!
Npgsql.NpgsqlConnection.PostgreSqlVersion.get -> System.Version!
Npgsql.NpgsqlConnection.ProcessID.get -> int
Npgsql.NpgsqlConnection.ProvideClientCertificatesCallback.get -> Npgsql.ProvideClientCertificatesCallback?
Npgsql.NpgsqlConnection.ProvideClientCertificatesCallback.set -> void
Npgsql.NpgsqlConnection.ProvidePasswordCallback.get -> Npgsql.ProvidePasswordCallback?
Npgsql.NpgsqlConnection.ProvidePasswordCallback.set -> void
Npgsql.NpgsqlConnection.ReloadTypes() -> void
Npgsql.NpgsqlConnection.Timezone.get -> string!
Npgsql.NpgsqlConnection.TypeMapper.get -> Npgsql.TypeMapping.INpgsqlTypeMapper!
Npgsql.NpgsqlConnection.UnprepareAll() -> void
Npgsql.NpgsqlConnection.UserCertificateValidationCallback.get -> System.Net.Security.RemoteCertificateValidationCallback?
Npgsql.NpgsqlConnection.UserCertificateValidationCallback.set -> void
Npgsql.NpgsqlConnection.UserName.get -> string?
Npgsql.NpgsqlConnection.Wait() -> void
Npgsql.NpgsqlConnection.Wait(int timeout) -> bool
Npgsql.NpgsqlConnection.Wait(System.TimeSpan timeout) -> bool
Npgsql.NpgsqlConnection.WaitAsync(int timeout, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<bool>!
Npgsql.NpgsqlConnection.WaitAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
Npgsql.NpgsqlConnection.WaitAsync(System.TimeSpan timeout, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<bool>!
Npgsql.NpgsqlConnectionStringBuilder
Npgsql.NpgsqlConnectionStringBuilder.Add(System.Collections.Generic.KeyValuePair<string!, object?> item) -> void
Npgsql.NpgsqlConnectionStringBuilder.ApplicationName.get -> string?
Npgsql.NpgsqlConnectionStringBuilder.ApplicationName.set -> void
Npgsql.NpgsqlConnectionStringBuilder.AutoPrepareMinUsages.get -> int
Npgsql.NpgsqlConnectionStringBuilder.AutoPrepareMinUsages.set -> void
Npgsql.NpgsqlConnectionStringBuilder.BackendTimeouts.get -> bool
Npgsql.NpgsqlConnectionStringBuilder.BackendTimeouts.set -> void
Npgsql.NpgsqlConnectionStringBuilder.CancellationTimeout.get -> int
Npgsql.NpgsqlConnectionStringBuilder.CancellationTimeout.set -> void
Npgsql.NpgsqlConnectionStringBuilder.CheckCertificateRevocation.get -> bool
Npgsql.NpgsqlConnectionStringBuilder.CheckCertificateRevocation.set -> void
Npgsql.NpgsqlConnectionStringBuilder.ClientCertificate.get -> string?
Npgsql.NpgsqlConnectionStringBuilder.ClientCertificate.set -> void
Npgsql.NpgsqlConnectionStringBuilder.ClientCertificateKey.get -> string?
Npgsql.NpgsqlConnectionStringBuilder.ClientCertificateKey.set -> void
Npgsql.NpgsqlConnectionStringBuilder.ClientEncoding.get -> string?
Npgsql.NpgsqlConnectionStringBuilder.ClientEncoding.set -> void
Npgsql.NpgsqlConnectionStringBuilder.CommandTimeout.get -> int
Npgsql.NpgsqlConnectionStringBuilder.CommandTimeout.set -> void
Npgsql.NpgsqlConnectionStringBuilder.ConnectionIdleLifetime.get -> int
Npgsql.NpgsqlConnectionStringBuilder.ConnectionIdleLifetime.set -> void
Npgsql.NpgsqlConnectionStringBuilder.ConnectionLifetime.get -> int
Npgsql.NpgsqlConnectionStringBuilder.ConnectionLifetime.set -> void
Npgsql.NpgsqlConnectionStringBuilder.ConnectionPruningInterval.get -> int
Npgsql.NpgsqlConnectionStringBuilder.ConnectionPruningInterval.set -> void
Npgsql.NpgsqlConnectionStringBuilder.Contains(System.Collections.Generic.KeyValuePair<string!, object?> item) -> bool
Npgsql.NpgsqlConnectionStringBuilder.ContinuousProcessing.get -> bool
Npgsql.NpgsqlConnectionStringBuilder.ContinuousProcessing.set -> void
Npgsql.NpgsqlConnectionStringBuilder.ConvertInfinityDateTime.get -> bool
Npgsql.NpgsqlConnectionStringBuilder.ConvertInfinityDateTime.set -> void
Npgsql.NpgsqlConnectionStringBuilder.CopyTo(System.Collections.Generic.KeyValuePair<string!, object?>[]! array, int arrayIndex) -> void
Npgsql.NpgsqlConnectionStringBuilder.Database.get -> string?
Npgsql.NpgsqlConnectionStringBuilder.Database.set -> void
Npgsql.NpgsqlConnectionStringBuilder.Encoding.get -> string!
Npgsql.NpgsqlConnectionStringBuilder.Encoding.set -> void
Npgsql.NpgsqlConnectionStringBuilder.Enlist.get -> bool
Npgsql.NpgsqlConnectionStringBuilder.Enlist.set -> void
Npgsql.NpgsqlConnectionStringBuilder.EntityAdminDatabase.get -> string?
Npgsql.NpgsqlConnectionStringBuilder.EntityAdminDatabase.set -> void
Npgsql.NpgsqlConnectionStringBuilder.EntityTemplateDatabase.get -> string?
Npgsql.NpgsqlConnectionStringBuilder.EntityTemplateDatabase.set -> void
Npgsql.NpgsqlConnectionStringBuilder.GetEnumerator() -> System.Collections.Generic.IEnumerator<System.Collections.Generic.KeyValuePair<string!, object?>>!
Npgsql.NpgsqlConnectionStringBuilder.Host.get -> string?
Npgsql.NpgsqlConnectionStringBuilder.Host.set -> void
Npgsql.NpgsqlConnectionStringBuilder.IncludeErrorDetails.get -> bool
Npgsql.NpgsqlConnectionStringBuilder.IncludeErrorDetails.set -> void
Npgsql.NpgsqlConnectionStringBuilder.IncludeRealm.get -> bool
Npgsql.NpgsqlConnectionStringBuilder.IncludeRealm.set -> void
Npgsql.NpgsqlConnectionStringBuilder.IntegratedSecurity.get -> bool
Npgsql.NpgsqlConnectionStringBuilder.IntegratedSecurity.set -> void
Npgsql.NpgsqlConnectionStringBuilder.InternalCommandTimeout.get -> int
Npgsql.NpgsqlConnectionStringBuilder.InternalCommandTimeout.set -> void
Npgsql.NpgsqlConnectionStringBuilder.KeepAlive.get -> int
Npgsql.NpgsqlConnectionStringBuilder.KeepAlive.set -> void
Npgsql.NpgsqlConnectionStringBuilder.KerberosServiceName.get -> string!
Npgsql.NpgsqlConnectionStringBuilder.KerberosServiceName.set -> void
Npgsql.NpgsqlConnectionStringBuilder.Keys.get -> System.Collections.Generic.ICollection<string!>!
Npgsql.NpgsqlConnectionStringBuilder.LoadTableComposites.get -> bool
Npgsql.NpgsqlConnectionStringBuilder.LoadTableComposites.set -> void
Npgsql.NpgsqlConnectionStringBuilder.LogParameters.get -> bool
Npgsql.NpgsqlConnectionStringBuilder.LogParameters.set -> void
Npgsql.NpgsqlConnectionStringBuilder.MaxAutoPrepare.get -> int
Npgsql.NpgsqlConnectionStringBuilder.MaxAutoPrepare.set -> void
Npgsql.NpgsqlConnectionStringBuilder.MaxPoolSize.get -> int
Npgsql.NpgsqlConnectionStringBuilder.MaxPoolSize.set -> void
Npgsql.NpgsqlConnectionStringBuilder.MinPoolSize.get -> int
Npgsql.NpgsqlConnectionStringBuilder.MinPoolSize.set -> void
Npgsql.NpgsqlConnectionStringBuilder.Multiplexing.get -> bool
Npgsql.NpgsqlConnectionStringBuilder.Multiplexing.set -> void
Npgsql.NpgsqlConnectionStringBuilder.NoResetOnClose.get -> bool
Npgsql.NpgsqlConnectionStringBuilder.NoResetOnClose.set -> void
Npgsql.NpgsqlConnectionStringBuilder.NpgsqlConnectionStringBuilder() -> void
Npgsql.NpgsqlConnectionStringBuilder.NpgsqlConnectionStringBuilder(bool useOdbcRules) -> void
Npgsql.NpgsqlConnectionStringBuilder.NpgsqlConnectionStringBuilder(string? connectionString) -> void
Npgsql.NpgsqlConnectionStringBuilder.Options.get -> string?
Npgsql.NpgsqlConnectionStringBuilder.Options.set -> void
Npgsql.NpgsqlConnectionStringBuilder.Passfile.get -> string?
Npgsql.NpgsqlConnectionStringBuilder.Passfile.set -> void
Npgsql.NpgsqlConnectionStringBuilder.Password.get -> string?
Npgsql.NpgsqlConnectionStringBuilder.Password.set -> void
Npgsql.NpgsqlConnectionStringBuilder.PersistSecurityInfo.get -> bool
Npgsql.NpgsqlConnectionStringBuilder.PersistSecurityInfo.set -> void
Npgsql.NpgsqlConnectionStringBuilder.Pooling.get -> bool
Npgsql.NpgsqlConnectionStringBuilder.Pooling.set -> void
Npgsql.NpgsqlConnectionStringBuilder.Port.get -> int
Npgsql.NpgsqlConnectionStringBuilder.Port.set -> void
Npgsql.NpgsqlConnectionStringBuilder.PreloadReader.get -> bool
Npgsql.NpgsqlConnectionStringBuilder.PreloadReader.set -> void
Npgsql.NpgsqlConnectionStringBuilder.ReadBufferSize.get -> int
Npgsql.NpgsqlConnectionStringBuilder.ReadBufferSize.set -> void
Npgsql.NpgsqlConnectionStringBuilder.Remove(System.Collections.Generic.KeyValuePair<string!, object?> item) -> bool
Npgsql.NpgsqlConnectionStringBuilder.RootCertificate.get -> string?
Npgsql.NpgsqlConnectionStringBuilder.RootCertificate.set -> void
Npgsql.NpgsqlConnectionStringBuilder.SearchPath.get -> string?
Npgsql.NpgsqlConnectionStringBuilder.SearchPath.set -> void
Npgsql.NpgsqlConnectionStringBuilder.ServerCompatibilityMode.get -> Npgsql.ServerCompatibilityMode
Npgsql.NpgsqlConnectionStringBuilder.ServerCompatibilityMode.set -> void
Npgsql.NpgsqlConnectionStringBuilder.SocketReceiveBufferSize.get -> int
Npgsql.NpgsqlConnectionStringBuilder.SocketReceiveBufferSize.set -> void
Npgsql.NpgsqlConnectionStringBuilder.SocketSendBufferSize.get -> int
Npgsql.NpgsqlConnectionStringBuilder.SocketSendBufferSize.set -> void
Npgsql.NpgsqlConnectionStringBuilder.SslMode.get -> Npgsql.SslMode
Npgsql.NpgsqlConnectionStringBuilder.SslMode.set -> void
Npgsql.NpgsqlConnectionStringBuilder.TcpKeepAlive.get -> bool
Npgsql.NpgsqlConnectionStringBuilder.TcpKeepAlive.set -> void
Npgsql.NpgsqlConnectionStringBuilder.TcpKeepAliveInterval.get -> int
Npgsql.NpgsqlConnectionStringBuilder.TcpKeepAliveInterval.set -> void
Npgsql.NpgsqlConnectionStringBuilder.TcpKeepAliveTime.get -> int
Npgsql.NpgsqlConnectionStringBuilder.TcpKeepAliveTime.set -> void
Npgsql.NpgsqlConnectionStringBuilder.Timeout.get -> int
Npgsql.NpgsqlConnectionStringBuilder.Timeout.set -> void
Npgsql.NpgsqlConnectionStringBuilder.Timezone.get -> string?
Npgsql.NpgsqlConnectionStringBuilder.Timezone.set -> void
Npgsql.NpgsqlConnectionStringBuilder.TrustServerCertificate.get -> bool
Npgsql.NpgsqlConnectionStringBuilder.TrustServerCertificate.set -> void
Npgsql.NpgsqlConnectionStringBuilder.UseExtendedTypes.get -> bool
Npgsql.NpgsqlConnectionStringBuilder.UseExtendedTypes.set -> void
Npgsql.NpgsqlConnectionStringBuilder.UsePerfCounters.get -> bool
Npgsql.NpgsqlConnectionStringBuilder.UsePerfCounters.set -> void
Npgsql.NpgsqlConnectionStringBuilder.Username.get -> string?
Npgsql.NpgsqlConnectionStringBuilder.Username.set -> void
Npgsql.NpgsqlConnectionStringBuilder.UseSslStream.get -> bool
Npgsql.NpgsqlConnectionStringBuilder.UseSslStream.set -> void
Npgsql.NpgsqlConnectionStringBuilder.Values.get -> System.Collections.Generic.ICollection<object?>!
Npgsql.NpgsqlConnectionStringBuilder.WriteBufferSize.get -> int
Npgsql.NpgsqlConnectionStringBuilder.WriteBufferSize.set -> void
Npgsql.NpgsqlConnectionStringBuilder.WriteCoalescingBufferThresholdBytes.get -> int
Npgsql.NpgsqlConnectionStringBuilder.WriteCoalescingBufferThresholdBytes.set -> void
Npgsql.NpgsqlConnectionStringBuilder.WriteCoalescingDelayUs.get -> int
Npgsql.NpgsqlConnectionStringBuilder.WriteCoalescingDelayUs.set -> void
Npgsql.NpgsqlConnectionStringPropertyAttribute
Npgsql.NpgsqlConnectionStringPropertyAttribute.NpgsqlConnectionStringPropertyAttribute() -> void
Npgsql.NpgsqlConnectionStringPropertyAttribute.NpgsqlConnectionStringPropertyAttribute(params string![]! synonyms) -> void
Npgsql.NpgsqlConnectionStringPropertyAttribute.Synonyms.get -> string![]!
Npgsql.NpgsqlCopyTextReader
Npgsql.NpgsqlCopyTextReader.Cancel() -> void
Npgsql.NpgsqlCopyTextReader.CancelAsync() -> System.Threading.Tasks.Task!
Npgsql.NpgsqlCopyTextWriter
Npgsql.NpgsqlCopyTextWriter.Cancel() -> void
Npgsql.NpgsqlCopyTextWriter.CancelAsync() -> System.Threading.Tasks.Task!
Npgsql.NpgsqlDataAdapter
Npgsql.NpgsqlDataAdapter.DeleteCommand.get -> Npgsql.NpgsqlCommand?
Npgsql.NpgsqlDataAdapter.DeleteCommand.set -> void
Npgsql.NpgsqlDataAdapter.InsertCommand.get -> Npgsql.NpgsqlCommand?
Npgsql.NpgsqlDataAdapter.InsertCommand.set -> void
Npgsql.NpgsqlDataAdapter.NpgsqlDataAdapter() -> void
Npgsql.NpgsqlDataAdapter.NpgsqlDataAdapter(Npgsql.NpgsqlCommand! selectCommand) -> void
Npgsql.NpgsqlDataAdapter.NpgsqlDataAdapter(string! selectCommandText, Npgsql.NpgsqlConnection! selectConnection) -> void
Npgsql.NpgsqlDataAdapter.NpgsqlDataAdapter(string! selectCommandText, string! selectConnectionString) -> void
Npgsql.NpgsqlDataAdapter.RowUpdated -> Npgsql.NpgsqlRowUpdatedEventHandler?
Npgsql.NpgsqlDataAdapter.RowUpdating -> Npgsql.NpgsqlRowUpdatingEventHandler?
Npgsql.NpgsqlDataAdapter.SelectCommand.get -> Npgsql.NpgsqlCommand?
Npgsql.NpgsqlDataAdapter.SelectCommand.set -> void
Npgsql.NpgsqlDataAdapter.UpdateCommand.get -> Npgsql.NpgsqlCommand?
Npgsql.NpgsqlDataAdapter.UpdateCommand.set -> void
Npgsql.NpgsqlDatabaseInfo
Npgsql.NpgsqlDatabaseInfo.Host.get -> string!
Npgsql.NpgsqlDatabaseInfo.Name.get -> string!
Npgsql.NpgsqlDatabaseInfo.NpgsqlDatabaseInfo(string! host, int port, string! databaseName, System.Version! version) -> void
Npgsql.NpgsqlDatabaseInfo.Port.get -> int
Npgsql.NpgsqlDatabaseInfo.Version.get -> System.Version!
Npgsql.NpgsqlDataReader
Npgsql.NpgsqlDataReader.GetColumnSchema() -> System.Collections.ObjectModel.ReadOnlyCollection<Npgsql.Schema.NpgsqlDbColumn!>!
Npgsql.NpgsqlDataReader.GetColumnSchemaAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<System.Collections.ObjectModel.ReadOnlyCollection<Npgsql.Schema.NpgsqlDbColumn!>!>!
Npgsql.NpgsqlDataReader.GetDataTypeOID(int ordinal) -> uint
Npgsql.NpgsqlDataReader.GetDate(int ordinal) -> NpgsqlTypes.NpgsqlDate
Npgsql.NpgsqlDataReader.GetInterval(int ordinal) -> NpgsqlTypes.NpgsqlTimeSpan
Npgsql.NpgsqlDataReader.GetPostgresType(int ordinal) -> Npgsql.PostgresTypes.PostgresType!
Npgsql.NpgsqlDataReader.GetStreamAsync(int ordinal, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<System.IO.Stream!>!
Npgsql.NpgsqlDataReader.GetTextReaderAsync(int ordinal, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<System.IO.TextReader!>!
Npgsql.NpgsqlDataReader.GetTimeSpan(int ordinal) -> System.TimeSpan
Npgsql.NpgsqlDataReader.GetTimeStamp(int ordinal) -> NpgsqlTypes.NpgsqlDateTime
Npgsql.NpgsqlDataReader.IsOnRow.get -> bool
Npgsql.NpgsqlDataReader.ReaderClosed -> System.EventHandler?
Npgsql.NpgsqlDataReader.Statements.get -> System.Collections.Generic.IReadOnlyList<Npgsql.NpgsqlStatement!>!
Npgsql.NpgsqlException
Npgsql.NpgsqlException.NpgsqlException() -> void
Npgsql.NpgsqlException.NpgsqlException(string? message) -> void
Npgsql.NpgsqlException.NpgsqlException(string? message, System.Exception? innerException) -> void
Npgsql.NpgsqlException.NpgsqlException(System.Runtime.Serialization.SerializationInfo! info, System.Runtime.Serialization.StreamingContext context) -> void
Npgsql.NpgsqlFactory
Npgsql.NpgsqlFactory.GetService(System.Type! serviceType) -> object?
Npgsql.NpgsqlLargeObjectManager
Npgsql.NpgsqlLargeObjectManager.Create(uint preferredOid = 0) -> uint
Npgsql.NpgsqlLargeObjectManager.CreateAsync(uint preferredOid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<uint>!
Npgsql.NpgsqlLargeObjectManager.ExportRemote(uint oid, string! path) -> void
Npgsql.NpgsqlLargeObjectManager.ExportRemoteAsync(uint oid, string! path, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
Npgsql.NpgsqlLargeObjectManager.Has64BitSupport.get -> bool
Npgsql.NpgsqlLargeObjectManager.ImportRemote(string! path, uint oid = 0) -> void
Npgsql.NpgsqlLargeObjectManager.ImportRemoteAsync(string! path, uint oid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
Npgsql.NpgsqlLargeObjectManager.MaxTransferBlockSize.get -> int
Npgsql.NpgsqlLargeObjectManager.MaxTransferBlockSize.set -> void
Npgsql.NpgsqlLargeObjectManager.NpgsqlLargeObjectManager(Npgsql.NpgsqlConnection! connection) -> void
Npgsql.NpgsqlLargeObjectManager.OpenRead(uint oid) -> Npgsql.NpgsqlLargeObjectStream!
Npgsql.NpgsqlLargeObjectManager.OpenReadAsync(uint oid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<Npgsql.NpgsqlLargeObjectStream!>!
Npgsql.NpgsqlLargeObjectManager.OpenReadWrite(uint oid) -> Npgsql.NpgsqlLargeObjectStream!
Npgsql.NpgsqlLargeObjectManager.OpenReadWriteAsync(uint oid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<Npgsql.NpgsqlLargeObjectStream!>!
Npgsql.NpgsqlLargeObjectManager.Unlink(uint oid) -> void
Npgsql.NpgsqlLargeObjectManager.UnlinkAsync(uint oid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
Npgsql.NpgsqlLargeObjectStream
Npgsql.NpgsqlLargeObjectStream.GetLengthAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<long>!
Npgsql.NpgsqlLargeObjectStream.Has64BitSupport.get -> bool
Npgsql.NpgsqlLargeObjectStream.SeekAsync(long offset, System.IO.SeekOrigin origin, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<long>!
Npgsql.NpgsqlLargeObjectStream.SetLength(long value, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task!
Npgsql.NpgsqlLengthCache
Npgsql.NpgsqlLengthCache.Get() -> int
Npgsql.NpgsqlLengthCache.Set(int len) -> int
Npgsql.NpgsqlNoticeEventArgs
Npgsql.NpgsqlNoticeEventArgs.Notice.get -> Npgsql.PostgresNotice!
Npgsql.NpgsqlNotificationEventArgs
Npgsql.NpgsqlNotificationEventArgs.AdditionalInformation.get -> string!
Npgsql.NpgsqlNotificationEventArgs.Channel.get -> string!
Npgsql.NpgsqlNotificationEventArgs.Condition.get -> string!
Npgsql.NpgsqlNotificationEventArgs.Payload.get -> string!
Npgsql.NpgsqlNotificationEventArgs.PID.get -> int
Npgsql.NpgsqlOperationInProgressException
Npgsql.NpgsqlOperationInProgressException.CommandInProgress.get -> Npgsql.NpgsqlCommand?
Npgsql.NpgsqlOperationInProgressException.NpgsqlOperationInProgressException(Npgsql.NpgsqlCommand! command) -> void
Npgsql.NpgsqlParameter
Npgsql.NpgsqlParameter.Clone() -> Npgsql.NpgsqlParameter!
Npgsql.NpgsqlParameter.Collection.get -> Npgsql.NpgsqlParameterCollection?
Npgsql.NpgsqlParameter.Collection.set -> void
Npgsql.NpgsqlParameter.ConvertedValue.get -> object?
Npgsql.NpgsqlParameter.ConvertedValue.set -> void
Npgsql.NpgsqlParameter.DataTypeName.get -> string?
Npgsql.NpgsqlParameter.DataTypeName.set -> void
Npgsql.NpgsqlParameter.NpgsqlDbType.get -> NpgsqlTypes.NpgsqlDbType
Npgsql.NpgsqlParameter.NpgsqlDbType.set -> void
Npgsql.NpgsqlParameter.NpgsqlParameter() -> void
Npgsql.NpgsqlParameter.NpgsqlParameter(string! parameterName, NpgsqlTypes.NpgsqlDbType parameterType, int size, string? sourceColumn, System.Data.ParameterDirection direction, bool isNullable, byte precision, byte scale, System.Data.DataRowVersion sourceVersion, object! value) -> void
Npgsql.NpgsqlParameter.NpgsqlParameter(string! parameterName, System.Data.DbType parameterType, int size, string? sourceColumn, System.Data.ParameterDirection direction, bool isNullable, byte precision, byte scale, System.Data.DataRowVersion sourceVersion, object! value) -> void
Npgsql.NpgsqlParameter.NpgsqlParameter(string? parameterName, NpgsqlTypes.NpgsqlDbType parameterType) -> void
Npgsql.NpgsqlParameter.NpgsqlParameter(string? parameterName, NpgsqlTypes.NpgsqlDbType parameterType, int size) -> void
Npgsql.NpgsqlParameter.NpgsqlParameter(string? parameterName, NpgsqlTypes.NpgsqlDbType parameterType, int size, string? sourceColumn) -> void
Npgsql.NpgsqlParameter.NpgsqlParameter(string? parameterName, object? value) -> void
Npgsql.NpgsqlParameter.NpgsqlParameter(string? parameterName, System.Data.DbType parameterType) -> void
Npgsql.NpgsqlParameter.NpgsqlParameter(string? parameterName, System.Data.DbType parameterType, int size) -> void
Npgsql.NpgsqlParameter.NpgsqlParameter(string? parameterName, System.Data.DbType parameterType, int size, string? sourceColumn) -> void
Npgsql.NpgsqlParameter.NpgsqlValue.get -> object?
Npgsql.NpgsqlParameter.NpgsqlValue.set -> void
Npgsql.NpgsqlParameter.PostgresType.get -> Npgsql.PostgresTypes.PostgresType?
Npgsql.NpgsqlParameter.Precision.get -> byte
Npgsql.NpgsqlParameter.Precision.set -> void
Npgsql.NpgsqlParameter.Scale.get -> byte
Npgsql.NpgsqlParameter.Scale.set -> void
Npgsql.NpgsqlParameter<T>
Npgsql.NpgsqlParameter<T>.NpgsqlParameter() -> void
Npgsql.NpgsqlParameter<T>.NpgsqlParameter(string! parameterName, NpgsqlTypes.NpgsqlDbType npgsqlDbType) -> void
Npgsql.NpgsqlParameter<T>.NpgsqlParameter(string! parameterName, System.Data.DbType dbType) -> void
Npgsql.NpgsqlParameter<T>.NpgsqlParameter(string! parameterName, T value) -> void
Npgsql.NpgsqlParameter<T>.TypedValue.get -> T
Npgsql.NpgsqlParameter<T>.TypedValue.set -> void
Npgsql.NpgsqlParameterCollection
Npgsql.NpgsqlParameterCollection.Add(Npgsql.NpgsqlParameter! value) -> Npgsql.NpgsqlParameter!
Npgsql.NpgsqlParameterCollection.Add(string! parameterName, NpgsqlTypes.NpgsqlDbType parameterType) -> Npgsql.NpgsqlParameter!
Npgsql.NpgsqlParameterCollection.Add(string! parameterName, NpgsqlTypes.NpgsqlDbType parameterType, int size) -> Npgsql.NpgsqlParameter!
Npgsql.NpgsqlParameterCollection.Add(string! parameterName, NpgsqlTypes.NpgsqlDbType parameterType, int size, string! sourceColumn) -> Npgsql.NpgsqlParameter!
Npgsql.NpgsqlParameterCollection.AddWithValue(NpgsqlTypes.NpgsqlDbType parameterType, object! value) -> Npgsql.NpgsqlParameter!
Npgsql.NpgsqlParameterCollection.AddWithValue(object! value) -> Npgsql.NpgsqlParameter!
Npgsql.NpgsqlParameterCollection.AddWithValue(string! parameterName, NpgsqlTypes.NpgsqlDbType parameterType, int size, object! value) -> Npgsql.NpgsqlParameter!
Npgsql.NpgsqlParameterCollection.AddWithValue(string! parameterName, NpgsqlTypes.NpgsqlDbType parameterType, int size, string? sourceColumn, object! value) -> Npgsql.NpgsqlParameter!
Npgsql.NpgsqlParameterCollection.AddWithValue(string! parameterName, NpgsqlTypes.NpgsqlDbType parameterType, object! value) -> Npgsql.NpgsqlParameter!
Npgsql.NpgsqlParameterCollection.AddWithValue(string! parameterName, object! value) -> Npgsql.NpgsqlParameter!
Npgsql.NpgsqlParameterCollection.Contains(Npgsql.NpgsqlParameter! item) -> bool
Npgsql.NpgsqlParameterCollection.CopyTo(Npgsql.NpgsqlParameter![]! array, int arrayIndex) -> void
Npgsql.NpgsqlParameterCollection.IndexOf(Npgsql.NpgsqlParameter! item) -> int
Npgsql.NpgsqlParameterCollection.Insert(int index, Npgsql.NpgsqlParameter! item) -> void
Npgsql.NpgsqlParameterCollection.Remove(Npgsql.NpgsqlParameter! item) -> bool
Npgsql.NpgsqlParameterCollection.Remove(string! parameterName) -> void
Npgsql.NpgsqlParameterCollection.this[int index].get -> Npgsql.NpgsqlParameter!
Npgsql.NpgsqlParameterCollection.this[int index].set -> void
Npgsql.NpgsqlParameterCollection.this[string! parameterName].get -> Npgsql.NpgsqlParameter!
Npgsql.NpgsqlParameterCollection.this[string! parameterName].set -> void
Npgsql.NpgsqlParameterCollection.ToArray() -> Npgsql.NpgsqlParameter![]!
Npgsql.NpgsqlParameterCollection.TryGetValue(string! parameterName, out Npgsql.NpgsqlParameter? parameter) -> bool
Npgsql.NpgsqlRawCopyStream
Npgsql.NpgsqlRawCopyStream.Cancel() -> void
Npgsql.NpgsqlRawCopyStream.CancelAsync() -> System.Threading.Tasks.Task!
Npgsql.NpgsqlReadBuffer
Npgsql.NpgsqlReadBuffer.Connection.get -> Npgsql.NpgsqlConnection!
Npgsql.NpgsqlReadBuffer.Dispose() -> void
Npgsql.NpgsqlReadBuffer.Ensure(int count, bool async) -> System.Threading.Tasks.Task!
Npgsql.NpgsqlReadBuffer.EnsureAsync(int count) -> System.Threading.Tasks.Task!
Npgsql.NpgsqlReadBuffer.GetNullTerminatedBytes() -> System.ReadOnlySpan<byte>
Npgsql.NpgsqlReadBuffer.GetStream(int len, bool canSeek) -> System.IO.Stream!
Npgsql.NpgsqlReadBuffer.Read(System.Span<byte> output) -> int
Npgsql.NpgsqlReadBuffer.ReadAsync(System.Memory<byte> output, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.ValueTask<int>
Npgsql.NpgsqlReadBuffer.ReadByte() -> byte
Npgsql.NpgsqlReadBuffer.ReadBytes(byte[]! output, int outputOffset, int len) -> void
Npgsql.NpgsqlReadBuffer.ReadBytes(System.Span<byte> output) -> void
Npgsql.NpgsqlReadBuffer.ReadChars(int byteLen) -> char[]!
Npgsql.NpgsqlReadBuffer.ReadDouble() -> double
Npgsql.NpgsqlReadBuffer.ReadDouble(bool littleEndian) -> double
Npgsql.NpgsqlReadBuffer.ReadInt16() -> short
Npgsql.NpgsqlReadBuffer.ReadInt16(bool littleEndian) -> short
Npgsql.NpgsqlReadBuffer.ReadInt32() -> int
Npgsql.NpgsqlReadBuffer.ReadInt32(bool littleEndian) -> int
Npgsql.NpgsqlReadBuffer.ReadInt64() -> long
Npgsql.NpgsqlReadBuffer.ReadInt64(bool littleEndian) -> long
Npgsql.NpgsqlReadBuffer.ReadMemory(int len) -> System.ReadOnlyMemory<byte>
Npgsql.NpgsqlReadBuffer.ReadNullTerminatedString() -> string!
Npgsql.NpgsqlReadBuffer.ReadNullTerminatedString(bool async, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.ValueTask<string!>
Npgsql.NpgsqlReadBuffer.ReadNullTerminatedStringRelaxed() -> string!
Npgsql.NpgsqlReadBuffer.ReadSByte() -> sbyte
Npgsql.NpgsqlReadBuffer.ReadSingle() -> float
Npgsql.NpgsqlReadBuffer.ReadSingle(bool littleEndian) -> float
Npgsql.NpgsqlReadBuffer.ReadSpan(int len) -> System.ReadOnlySpan<byte>
Npgsql.NpgsqlReadBuffer.ReadString(int byteLen) -> string!
Npgsql.NpgsqlReadBuffer.ReadUInt16() -> ushort
Npgsql.NpgsqlReadBuffer.ReadUInt16(bool littleEndian) -> ushort
Npgsql.NpgsqlReadBuffer.ReadUInt32() -> uint
Npgsql.NpgsqlReadBuffer.ReadUInt32(bool littleEndian) -> uint
Npgsql.NpgsqlReadBuffer.ReadUInt64() -> ulong
Npgsql.NpgsqlReadBuffer.ReadUInt64(bool littleEndian) -> ulong
Npgsql.NpgsqlReadBuffer.Skip(long len, bool async) -> System.Threading.Tasks.Task!
Npgsql.NpgsqlRowUpdatedEventArgs
Npgsql.NpgsqlRowUpdatedEventArgs.NpgsqlRowUpdatedEventArgs(System.Data.DataRow! dataRow, System.Data.IDbCommand? command, System.Data.StatementType statementType, System.Data.Common.DataTableMapping! tableMapping) -> void
Npgsql.NpgsqlRowUpdatedEventHandler
Npgsql.NpgsqlRowUpdatingEventArgs
Npgsql.NpgsqlRowUpdatingEventArgs.NpgsqlRowUpdatingEventArgs(System.Data.DataRow! dataRow, System.Data.IDbCommand? command, System.Data.StatementType statementType, System.Data.Common.DataTableMapping! tableMapping) -> void
Npgsql.NpgsqlRowUpdatingEventHandler
Npgsql.NpgsqlStatement
Npgsql.NpgsqlStatement.InputParameters.get -> System.Collections.Generic.List<Npgsql.NpgsqlParameter!>!
Npgsql.NpgsqlStatement.LongRows.get -> ulong
Npgsql.NpgsqlStatement.NpgsqlStatement() -> void
Npgsql.NpgsqlStatement.OID.get -> uint
Npgsql.NpgsqlStatement.Rows.get -> uint
Npgsql.NpgsqlStatement.SQL.get -> string!
Npgsql.NpgsqlStatement.SQL.set -> void
Npgsql.NpgsqlStatement.StatementType.get -> Npgsql.StatementType
Npgsql.NpgsqlTransaction
Npgsql.NpgsqlTransaction.Connection.get -> Npgsql.NpgsqlConnection?
Npgsql.NpgsqlWriteBuffer
Npgsql.NpgsqlWriteBuffer.Dispose() -> void
Npgsql.NpgsqlWriteBuffer.Flush(bool async, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
Npgsql.NpgsqlWriteBuffer.GetStream() -> System.IO.Stream!
Npgsql.NpgsqlWriteBuffer.WriteByte(byte value) -> void
Npgsql.NpgsqlWriteBuffer.WriteBytes(byte[]! buf, int offset, int count) -> void
Npgsql.NpgsqlWriteBuffer.WriteBytes(System.ReadOnlySpan<byte> buf) -> void
Npgsql.NpgsqlWriteBuffer.WriteBytesRaw(byte[]! bytes, bool async, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
Npgsql.NpgsqlWriteBuffer.WriteDouble(double value) -> void
Npgsql.NpgsqlWriteBuffer.WriteDouble(double value, bool littleEndian) -> void
Npgsql.NpgsqlWriteBuffer.WriteInt16(short value) -> void
Npgsql.NpgsqlWriteBuffer.WriteInt16(short value, bool littleEndian) -> void
Npgsql.NpgsqlWriteBuffer.WriteInt32(int value) -> void
Npgsql.NpgsqlWriteBuffer.WriteInt32(int value, bool littleEndian) -> void
Npgsql.NpgsqlWriteBuffer.WriteInt64(long value) -> void
Npgsql.NpgsqlWriteBuffer.WriteInt64(long value, bool littleEndian) -> void
Npgsql.NpgsqlWriteBuffer.WriteNullTerminatedString(string! s) -> void
Npgsql.NpgsqlWriteBuffer.WriteSByte(sbyte value) -> void
Npgsql.NpgsqlWriteBuffer.WriteSingle(float value) -> void
Npgsql.NpgsqlWriteBuffer.WriteSingle(float value, bool littleEndian) -> void
Npgsql.NpgsqlWriteBuffer.WriteSpaceLeft.get -> int
Npgsql.NpgsqlWriteBuffer.WriteString(string! s, int byteLen, bool async, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
Npgsql.NpgsqlWriteBuffer.WriteString(string! s, int charLen, int byteLen, bool async, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
Npgsql.NpgsqlWriteBuffer.WriteString(string! s, int len = 0) -> void
Npgsql.NpgsqlWriteBuffer.WriteUInt16(ushort value) -> void
Npgsql.NpgsqlWriteBuffer.WriteUInt16(ushort value, bool littleEndian) -> void
Npgsql.NpgsqlWriteBuffer.WriteUInt32(uint value) -> void
Npgsql.NpgsqlWriteBuffer.WriteUInt32(uint value, bool littleEndian) -> void
Npgsql.NpgsqlWriteBuffer.WriteUInt64(ulong value) -> void
Npgsql.NpgsqlWriteBuffer.WriteUInt64(ulong value, bool littleEndian) -> void
Npgsql.PostgresErrorCodes
Npgsql.PostgresException
Npgsql.PostgresException.Code.get -> string!
Npgsql.PostgresException.ColumnName.get -> string?
Npgsql.PostgresException.ConstraintName.get -> string?
Npgsql.PostgresException.DataTypeName.get -> string?
Npgsql.PostgresException.Detail.get -> string?
Npgsql.PostgresException.File.get -> string?
Npgsql.PostgresException.Hint.get -> string?
Npgsql.PostgresException.InternalPosition.get -> int
Npgsql.PostgresException.InternalQuery.get -> string?
Npgsql.PostgresException.InvariantSeverity.get -> string!
Npgsql.PostgresException.Line.get -> string?
Npgsql.PostgresException.MessageText.get -> string!
Npgsql.PostgresException.Position.get -> int
Npgsql.PostgresException.PostgresException(string! messageText, string! severity, string! invariantSeverity, string! sqlState) -> void
Npgsql.PostgresException.PostgresException(string! messageText, string! severity, string! invariantSeverity, string! sqlState, string? detail = null, string? hint = null, int position = 0, int internalPosition = 0, string? internalQuery = null, string? where = null, string? schemaName = null, string? tableName = null, string? columnName = null, string? dataTypeName = null, string? constraintName = null, string? file = null, string? line = null, string? routine = null) -> void
Npgsql.PostgresException.Routine.get -> string?
Npgsql.PostgresException.SchemaName.get -> string?
Npgsql.PostgresException.Severity.get -> string!
Npgsql.PostgresException.Statement.get -> Npgsql.NpgsqlStatement?
Npgsql.PostgresException.TableName.get -> string?
Npgsql.PostgresException.Where.get -> string?
Npgsql.PostgresNotice
Npgsql.PostgresNotice.Code.get -> string!
Npgsql.PostgresNotice.ColumnName.get -> string?
Npgsql.PostgresNotice.ColumnName.set -> void
Npgsql.PostgresNotice.ConstraintName.get -> string?
Npgsql.PostgresNotice.ConstraintName.set -> void
Npgsql.PostgresNotice.DataTypeName.get -> string?
Npgsql.PostgresNotice.DataTypeName.set -> void
Npgsql.PostgresNotice.Detail.get -> string?
Npgsql.PostgresNotice.Detail.set -> void
Npgsql.PostgresNotice.File.get -> string?
Npgsql.PostgresNotice.File.set -> void
Npgsql.PostgresNotice.Hint.get -> string?
Npgsql.PostgresNotice.Hint.set -> void
Npgsql.PostgresNotice.InternalPosition.get -> int
Npgsql.PostgresNotice.InternalPosition.set -> void
Npgsql.PostgresNotice.InternalQuery.get -> string?
Npgsql.PostgresNotice.InternalQuery.set -> void
Npgsql.PostgresNotice.InvariantSeverity.get -> string!
Npgsql.PostgresNotice.Line.get -> string?
Npgsql.PostgresNotice.Line.set -> void
Npgsql.PostgresNotice.MessageText.get -> string!
Npgsql.PostgresNotice.MessageText.set -> void
Npgsql.PostgresNotice.Position.get -> int
Npgsql.PostgresNotice.Position.set -> void
Npgsql.PostgresNotice.PostgresNotice(string! messageText, string! severity, string! invariantSeverity, string! sqlState, string? detail = null, string? hint = null, int position = 0, int internalPosition = 0, string? internalQuery = null, string? where = null, string? schemaName = null, string? tableName = null, string? columnName = null, string? dataTypeName = null, string? constraintName = null, string? file = null, string? line = null, string? routine = null) -> void
Npgsql.PostgresNotice.PostgresNotice(string! severity, string! invariantSeverity, string! sqlState, string! messageText) -> void
Npgsql.PostgresNotice.Routine.get -> string?
Npgsql.PostgresNotice.Routine.set -> void
Npgsql.PostgresNotice.SchemaName.get -> string?
Npgsql.PostgresNotice.SchemaName.set -> void
Npgsql.PostgresNotice.Severity.get -> string!
Npgsql.PostgresNotice.Severity.set -> void
Npgsql.PostgresNotice.SqlState.get -> string!
Npgsql.PostgresNotice.SqlState.set -> void
Npgsql.PostgresNotice.TableName.get -> string?
Npgsql.PostgresNotice.TableName.set -> void
Npgsql.PostgresNotice.Where.get -> string?
Npgsql.PostgresNotice.Where.set -> void
Npgsql.PostgresTypes.PostgresArrayType
Npgsql.PostgresTypes.PostgresArrayType.Element.get -> Npgsql.PostgresTypes.PostgresType!
Npgsql.PostgresTypes.PostgresArrayType.PostgresArrayType(string! ns, string! internalName, uint oid, Npgsql.PostgresTypes.PostgresType! elementPostgresType) -> void
Npgsql.PostgresTypes.PostgresBaseType
Npgsql.PostgresTypes.PostgresBaseType.PostgresBaseType(string! ns, string! internalName, uint oid) -> void
Npgsql.PostgresTypes.PostgresCompositeType
Npgsql.PostgresTypes.PostgresCompositeType.Field
Npgsql.PostgresTypes.PostgresCompositeType.Field.Name.get -> string!
Npgsql.PostgresTypes.PostgresCompositeType.Field.Type.get -> Npgsql.PostgresTypes.PostgresType!
Npgsql.PostgresTypes.PostgresCompositeType.Fields.get -> System.Collections.Generic.IReadOnlyList<Npgsql.PostgresTypes.PostgresCompositeType.Field!>!
Npgsql.PostgresTypes.PostgresDomainType
Npgsql.PostgresTypes.PostgresDomainType.BaseType.get -> Npgsql.PostgresTypes.PostgresType!
Npgsql.PostgresTypes.PostgresDomainType.NotNull.get -> bool
Npgsql.PostgresTypes.PostgresDomainType.PostgresDomainType(string! ns, string! name, uint oid, Npgsql.PostgresTypes.PostgresType! baseType, bool notNull) -> void
Npgsql.PostgresTypes.PostgresEnumType
Npgsql.PostgresTypes.PostgresEnumType.Labels.get -> System.Collections.Generic.IReadOnlyList<string!>!
Npgsql.PostgresTypes.PostgresEnumType.PostgresEnumType(string! ns, string! name, uint oid) -> void
Npgsql.PostgresTypes.PostgresRangeType
Npgsql.PostgresTypes.PostgresRangeType.PostgresRangeType(string! ns, string! name, uint oid, Npgsql.PostgresTypes.PostgresType! subtypePostgresType) -> void
Npgsql.PostgresTypes.PostgresRangeType.Subtype.get -> Npgsql.PostgresTypes.PostgresType!
Npgsql.PostgresTypes.PostgresType
Npgsql.PostgresTypes.PostgresType.Array.get -> Npgsql.PostgresTypes.PostgresArrayType?
Npgsql.PostgresTypes.PostgresType.DisplayName.get -> string!
Npgsql.PostgresTypes.PostgresType.FullName.get -> string!
Npgsql.PostgresTypes.PostgresType.InternalName.get -> string!
Npgsql.PostgresTypes.PostgresType.Name.get -> string!
Npgsql.PostgresTypes.PostgresType.Namespace.get -> string!
Npgsql.PostgresTypes.PostgresType.OID.get -> uint
Npgsql.PostgresTypes.PostgresType.PostgresType(string! ns, string! name, string! internalName, uint oid) -> void
Npgsql.PostgresTypes.PostgresType.PostgresType(string! ns, string! name, uint oid) -> void
Npgsql.PostgresTypes.PostgresType.Range.get -> Npgsql.PostgresTypes.PostgresRangeType?
Npgsql.PostgresTypes.UnknownBackendType
Npgsql.ProvideClientCertificatesCallback
Npgsql.ProvidePasswordCallback
Npgsql.Replication.Internal.LogicalReplicationConnectionExtensions
Npgsql.Replication.Internal.LogicalReplicationSlot
Npgsql.Replication.Internal.LogicalReplicationSlot.ConsistentPoint.get -> NpgsqlTypes.NpgsqlLogSequenceNumber
Npgsql.Replication.Internal.LogicalReplicationSlot.LogicalReplicationSlot(string! outputPlugin, Npgsql.Replication.ReplicationSlotOptions replicationSlotOptions) -> void
Npgsql.Replication.Internal.LogicalReplicationSlot.OutputPlugin.get -> string!
Npgsql.Replication.Internal.LogicalReplicationSlot.SnapshotName.get -> string?
Npgsql.Replication.LogicalReplicationConnection
Npgsql.Replication.LogicalReplicationConnection.LogicalReplicationConnection() -> void
Npgsql.Replication.LogicalReplicationConnection.LogicalReplicationConnection(string? connectionString) -> void
Npgsql.Replication.LogicalSlotSnapshotInitMode
Npgsql.Replication.LogicalSlotSnapshotInitMode.Export = 0 -> Npgsql.Replication.LogicalSlotSnapshotInitMode
Npgsql.Replication.LogicalSlotSnapshotInitMode.NoExport = 2 -> Npgsql.Replication.LogicalSlotSnapshotInitMode
Npgsql.Replication.LogicalSlotSnapshotInitMode.Use = 1 -> Npgsql.Replication.LogicalSlotSnapshotInitMode
Npgsql.Replication.PgOutput.Messages.BeginMessage
Npgsql.Replication.PgOutput.Messages.BeginMessage.BeginMessage() -> void
Npgsql.Replication.PgOutput.Messages.BeginMessage.TransactionCommitTimestamp.get -> System.DateTime
Npgsql.Replication.PgOutput.Messages.BeginMessage.TransactionFinalLsn.get -> NpgsqlTypes.NpgsqlLogSequenceNumber
Npgsql.Replication.PgOutput.Messages.BeginMessage.TransactionXid.get -> uint
Npgsql.Replication.PgOutput.Messages.CommitMessage
Npgsql.Replication.PgOutput.Messages.CommitMessage.CommitLsn.get -> NpgsqlTypes.NpgsqlLogSequenceNumber
Npgsql.Replication.PgOutput.Messages.CommitMessage.CommitMessage() -> void
Npgsql.Replication.PgOutput.Messages.CommitMessage.Flags.get -> byte
Npgsql.Replication.PgOutput.Messages.CommitMessage.TransactionCommitTimestamp.get -> System.DateTime
Npgsql.Replication.PgOutput.Messages.CommitMessage.TransactionEndLsn.get -> NpgsqlTypes.NpgsqlLogSequenceNumber
Npgsql.Replication.PgOutput.Messages.DeleteMessage
Npgsql.Replication.PgOutput.Messages.DeleteMessage.DeleteMessage() -> void
Npgsql.Replication.PgOutput.Messages.DeleteMessage.RelationId.get -> uint
Npgsql.Replication.PgOutput.Messages.FullDeleteMessage
Npgsql.Replication.PgOutput.Messages.FullDeleteMessage.FullDeleteMessage() -> void
Npgsql.Replication.PgOutput.Messages.FullDeleteMessage.OldRow.get -> System.ReadOnlyMemory<Npgsql.Replication.PgOutput.Messages.TupleData>
Npgsql.Replication.PgOutput.Messages.FullUpdateMessage
Npgsql.Replication.PgOutput.Messages.FullUpdateMessage.FullUpdateMessage() -> void
Npgsql.Replication.PgOutput.Messages.FullUpdateMessage.OldRow.get -> System.ReadOnlyMemory<Npgsql.Replication.PgOutput.Messages.TupleData>
Npgsql.Replication.PgOutput.Messages.IndexUpdateMessage
Npgsql.Replication.PgOutput.Messages.IndexUpdateMessage.IndexUpdateMessage() -> void
Npgsql.Replication.PgOutput.Messages.IndexUpdateMessage.KeyRow.get -> System.ReadOnlyMemory<Npgsql.Replication.PgOutput.Messages.TupleData>
Npgsql.Replication.PgOutput.Messages.InsertMessage
Npgsql.Replication.PgOutput.Messages.InsertMessage.InsertMessage() -> void
Npgsql.Replication.PgOutput.Messages.InsertMessage.NewRow.get -> System.ReadOnlyMemory<Npgsql.Replication.PgOutput.Messages.TupleData>
Npgsql.Replication.PgOutput.Messages.InsertMessage.RelationId.get -> uint
Npgsql.Replication.PgOutput.Messages.KeyDeleteMessage
Npgsql.Replication.PgOutput.Messages.KeyDeleteMessage.KeyDeleteMessage() -> void
Npgsql.Replication.PgOutput.Messages.KeyDeleteMessage.KeyRow.get -> System.ReadOnlyMemory<Npgsql.Replication.PgOutput.Messages.TupleData>
Npgsql.Replication.PgOutput.Messages.OriginMessage
Npgsql.Replication.PgOutput.Messages.OriginMessage.OriginCommitLsn.get -> NpgsqlTypes.NpgsqlLogSequenceNumber
Npgsql.Replication.PgOutput.Messages.OriginMessage.OriginMessage() -> void
Npgsql.Replication.PgOutput.Messages.OriginMessage.OriginName.get -> string!
Npgsql.Replication.PgOutput.Messages.PgOutputReplicationMessage
Npgsql.Replication.PgOutput.Messages.PgOutputReplicationMessage.PgOutputReplicationMessage() -> void
Npgsql.Replication.PgOutput.Messages.RelationMessage
Npgsql.Replication.PgOutput.Messages.RelationMessage.Column
Npgsql.Replication.PgOutput.Messages.RelationMessage.Column.Column() -> void
Npgsql.Replication.PgOutput.Messages.RelationMessage.Column.ColumnName.get -> string!
Npgsql.Replication.PgOutput.Messages.RelationMessage.Column.DataTypeId.get -> uint
Npgsql.Replication.PgOutput.Messages.RelationMessage.Column.Flags.get -> byte
Npgsql.Replication.PgOutput.Messages.RelationMessage.Column.TypeModifier.get -> int
Npgsql.Replication.PgOutput.Messages.RelationMessage.Columns.get -> System.ReadOnlyMemory<Npgsql.Replication.PgOutput.Messages.RelationMessage.Column>
Npgsql.Replication.PgOutput.Messages.RelationMessage.Namespace.get -> string!
Npgsql.Replication.PgOutput.Messages.RelationMessage.RelationId.get -> uint
Npgsql.Replication.PgOutput.Messages.RelationMessage.RelationMessage() -> void
Npgsql.Replication.PgOutput.Messages.RelationMessage.RelationName.get -> string!
Npgsql.Replication.PgOutput.Messages.RelationMessage.RelationReplicaIdentitySetting.get -> char
Npgsql.Replication.PgOutput.Messages.RelationMessageColumn
Npgsql.Replication.PgOutput.Messages.RelationMessageColumn.ColumnName.get -> string!
Npgsql.Replication.PgOutput.Messages.RelationMessageColumn.DataTypeId.get -> uint
Npgsql.Replication.PgOutput.Messages.RelationMessageColumn.Flags.get -> byte
Npgsql.Replication.PgOutput.Messages.RelationMessageColumn.RelationMessageColumn() -> void
Npgsql.Replication.PgOutput.Messages.RelationMessageColumn.TypeModifier.get -> int
Npgsql.Replication.PgOutput.Messages.TruncateMessage
Npgsql.Replication.PgOutput.Messages.TruncateMessage.Options.get -> Npgsql.Replication.PgOutput.Messages.TruncateOptions
Npgsql.Replication.PgOutput.Messages.TruncateMessage.RelationIds.get -> uint[]!
Npgsql.Replication.PgOutput.Messages.TruncateMessage.TruncateMessage() -> void
Npgsql.Replication.PgOutput.Messages.TruncateOptions
Npgsql.Replication.PgOutput.Messages.TruncateOptions.Cascade = 1 -> Npgsql.Replication.PgOutput.Messages.TruncateOptions
Npgsql.Replication.PgOutput.Messages.TruncateOptions.None = 0 -> Npgsql.Replication.PgOutput.Messages.TruncateOptions
Npgsql.Replication.PgOutput.Messages.TruncateOptions.RestartIdentity = 2 -> Npgsql.Replication.PgOutput.Messages.TruncateOptions
Npgsql.Replication.PgOutput.Messages.TupleData
Npgsql.Replication.PgOutput.Messages.TupleData.Kind.get -> Npgsql.Replication.PgOutput.Messages.TupleDataKind
Npgsql.Replication.PgOutput.Messages.TupleData.TextValue.get -> string!
Npgsql.Replication.PgOutput.Messages.TupleData.TupleData() -> void
Npgsql.Replication.PgOutput.Messages.TupleData.Value.get -> object?
Npgsql.Replication.PgOutput.Messages.TupleDataKind
Npgsql.Replication.PgOutput.Messages.TupleDataKind.Null = 110 -> Npgsql.Replication.PgOutput.Messages.TupleDataKind
Npgsql.Replication.PgOutput.Messages.TupleDataKind.TextValue = 116 -> Npgsql.Replication.PgOutput.Messages.TupleDataKind
Npgsql.Replication.PgOutput.Messages.TupleDataKind.UnchangedToastedValue = 117 -> Npgsql.Replication.PgOutput.Messages.TupleDataKind
Npgsql.Replication.PgOutput.Messages.TypeMessage
Npgsql.Replication.PgOutput.Messages.TypeMessage.Name.get -> string!
Npgsql.Replication.PgOutput.Messages.TypeMessage.Namespace.get -> string!
Npgsql.Replication.PgOutput.Messages.TypeMessage.TypeId.get -> uint
Npgsql.Replication.PgOutput.Messages.TypeMessage.TypeMessage() -> void
Npgsql.Replication.PgOutput.Messages.UpdateMessage
Npgsql.Replication.PgOutput.Messages.UpdateMessage.NewRow.get -> System.ReadOnlyMemory<Npgsql.Replication.PgOutput.Messages.TupleData>
Npgsql.Replication.PgOutput.Messages.UpdateMessage.RelationId.get -> uint
Npgsql.Replication.PgOutput.Messages.UpdateMessage.UpdateMessage() -> void
Npgsql.Replication.PgOutput.PgOutputReplicationOptions
Npgsql.Replication.PgOutput.PgOutputReplicationOptions.Binary.get -> bool?
Npgsql.Replication.PgOutput.PgOutputReplicationOptions.Equals(Npgsql.Replication.PgOutput.PgOutputReplicationOptions? other) -> bool
Npgsql.Replication.PgOutput.PgOutputReplicationOptions.PgOutputReplicationOptions(string! publicationName, ulong protocolVersion = 1, bool? binary = null, bool? streaming = null) -> void
Npgsql.Replication.PgOutput.PgOutputReplicationOptions.PgOutputReplicationOptions(System.Collections.Generic.IEnumerable<string!>! publicationNames, ulong protocolVersion = 1, bool? binary = null, bool? streaming = null) -> void
Npgsql.Replication.PgOutput.PgOutputReplicationOptions.ProtocolVersion.get -> ulong
Npgsql.Replication.PgOutput.PgOutputReplicationOptions.PublicationNames.get -> System.Collections.Generic.List<string!>!
Npgsql.Replication.PgOutput.PgOutputReplicationOptions.Streaming.get -> bool?
Npgsql.Replication.PgOutput.PgOutputReplicationSlot
Npgsql.Replication.PgOutput.PgOutputReplicationSlot.PgOutputReplicationSlot(Npgsql.Replication.PgOutput.PgOutputReplicationSlot! slot) -> void
Npgsql.Replication.PgOutput.PgOutputReplicationSlot.PgOutputReplicationSlot(Npgsql.Replication.ReplicationSlotOptions options) -> void
Npgsql.Replication.PgOutput.PgOutputReplicationSlot.PgOutputReplicationSlot(string! slotName) -> void
Npgsql.Replication.PgOutputConnectionExtensions
Npgsql.Replication.PhysicalReplicationConnection
Npgsql.Replication.PhysicalReplicationConnection.CreateReplicationSlot(string! slotName, bool isTemporary = false, bool reserveWal = false, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<Npgsql.Replication.PhysicalReplicationSlot!>!
Npgsql.Replication.PhysicalReplicationConnection.PhysicalReplicationConnection() -> void
Npgsql.Replication.PhysicalReplicationConnection.PhysicalReplicationConnection(string? connectionString) -> void
Npgsql.Replication.PhysicalReplicationConnection.StartReplication(Npgsql.Replication.PhysicalReplicationSlot? slot, NpgsqlTypes.NpgsqlLogSequenceNumber walLocation, System.Threading.CancellationToken cancellationToken, uint timeline = 0) -> System.Collections.Generic.IAsyncEnumerable<Npgsql.Replication.XLogDataMessage!>!
Npgsql.Replication.PhysicalReplicationConnection.StartReplication(NpgsqlTypes.NpgsqlLogSequenceNumber walLocation, System.Threading.CancellationToken cancellationToken, uint timeline = 0) -> System.Collections.Generic.IAsyncEnumerable<Npgsql.Replication.XLogDataMessage!>!
Npgsql.Replication.PhysicalReplicationSlot
Npgsql.Replication.PhysicalReplicationSlot.PhysicalReplicationSlot(string! slotName) -> void
Npgsql.Replication.ReplicationConnection
Npgsql.Replication.ReplicationConnection.CommandTimeout.get -> System.TimeSpan
Npgsql.Replication.ReplicationConnection.CommandTimeout.set -> void
Npgsql.Replication.ReplicationConnection.ConnectionString.get -> string!
Npgsql.Replication.ReplicationConnection.ConnectionString.set -> void
Npgsql.Replication.ReplicationConnection.DisposeAsync() -> System.Threading.Tasks.ValueTask
Npgsql.Replication.ReplicationConnection.DropReplicationSlot(string! slotName, bool wait = false, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
Npgsql.Replication.ReplicationConnection.Encoding.get -> System.Text.Encoding!
Npgsql.Replication.ReplicationConnection.IdentifySystem(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<Npgsql.Replication.ReplicationSystemIdentification!>!
Npgsql.Replication.ReplicationConnection.LastAppliedLsn.get -> NpgsqlTypes.NpgsqlLogSequenceNumber
Npgsql.Replication.ReplicationConnection.LastAppliedLsn.set -> void
Npgsql.Replication.ReplicationConnection.LastFlushedLsn.get -> NpgsqlTypes.NpgsqlLogSequenceNumber
Npgsql.Replication.ReplicationConnection.LastFlushedLsn.set -> void
Npgsql.Replication.ReplicationConnection.LastReceivedLsn.get -> NpgsqlTypes.NpgsqlLogSequenceNumber
Npgsql.Replication.ReplicationConnection.Open(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
Npgsql.Replication.ReplicationConnection.ProcessID.get -> int
Npgsql.Replication.ReplicationConnection.SendStatusUpdate(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
Npgsql.Replication.ReplicationConnection.Show(string! parameterName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<string!>!
Npgsql.Replication.ReplicationConnection.TimelineHistory(uint tli, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<Npgsql.Replication.TimelineHistoryFile>!
Npgsql.Replication.ReplicationConnection.WalReceiverStatusInterval.get -> System.TimeSpan
Npgsql.Replication.ReplicationConnection.WalReceiverStatusInterval.set -> void
Npgsql.Replication.ReplicationConnection.WalReceiverTimeout.get -> System.TimeSpan
Npgsql.Replication.ReplicationConnection.WalReceiverTimeout.set -> void
Npgsql.Replication.ReplicationMessage
Npgsql.Replication.ReplicationMessage.ReplicationMessage() -> void
Npgsql.Replication.ReplicationMessage.ServerClock.get -> System.DateTime
Npgsql.Replication.ReplicationMessage.WalEnd.get -> NpgsqlTypes.NpgsqlLogSequenceNumber
Npgsql.Replication.ReplicationMessage.WalStart.get -> NpgsqlTypes.NpgsqlLogSequenceNumber
Npgsql.Replication.ReplicationSlot
Npgsql.Replication.ReplicationSlot.Name.get -> string!
Npgsql.Replication.ReplicationSlotOptions
Npgsql.Replication.ReplicationSlotOptions.ConsistentPoint.get -> NpgsqlTypes.NpgsqlLogSequenceNumber
Npgsql.Replication.ReplicationSlotOptions.ReplicationSlotOptions() -> void
Npgsql.Replication.ReplicationSlotOptions.ReplicationSlotOptions(string! slotName, NpgsqlTypes.NpgsqlLogSequenceNumber consistentPoint) -> void
Npgsql.Replication.ReplicationSlotOptions.ReplicationSlotOptions(string! slotName, string? consistentPoint = null) -> void
Npgsql.Replication.ReplicationSlotOptions.SlotName.get -> string!
Npgsql.Replication.ReplicationSystemIdentification
Npgsql.Replication.ReplicationSystemIdentification.DbName.get -> string?
Npgsql.Replication.ReplicationSystemIdentification.SystemId.get -> string!
Npgsql.Replication.ReplicationSystemIdentification.Timeline.get -> uint
Npgsql.Replication.ReplicationSystemIdentification.XLogPos.get -> NpgsqlTypes.NpgsqlLogSequenceNumber
Npgsql.Replication.TestDecoding.TestDecodingData
Npgsql.Replication.TestDecoding.TestDecodingData.Clone() -> Npgsql.Replication.TestDecoding.TestDecodingData!
Npgsql.Replication.TestDecoding.TestDecodingData.Data.get -> string!
Npgsql.Replication.TestDecoding.TestDecodingData.TestDecodingData() -> void
Npgsql.Replication.TestDecoding.TestDecodingOptions
Npgsql.Replication.TestDecoding.TestDecodingOptions.Equals(Npgsql.Replication.TestDecoding.TestDecodingOptions? other) -> bool
Npgsql.Replication.TestDecoding.TestDecodingOptions.ForceBinary.get -> bool?
Npgsql.Replication.TestDecoding.TestDecodingOptions.IncludeRewrites.get -> bool?
Npgsql.Replication.TestDecoding.TestDecodingOptions.IncludeTimestamp.get -> bool?
Npgsql.Replication.TestDecoding.TestDecodingOptions.IncludeXids.get -> bool?
Npgsql.Replication.TestDecoding.TestDecodingOptions.OnlyLocal.get -> bool?
Npgsql.Replication.TestDecoding.TestDecodingOptions.SkipEmptyXacts.get -> bool?
Npgsql.Replication.TestDecoding.TestDecodingOptions.StreamChanges.get -> bool?
Npgsql.Replication.TestDecoding.TestDecodingOptions.TestDecodingOptions(bool? includeXids = null, bool? includeTimestamp = null, bool? forceBinary = null, bool? skipEmptyXacts = null, bool? onlyLocal = null, bool? includeRewrites = null, bool? streamChanges = null) -> void
Npgsql.Replication.TestDecoding.TestDecodingReplicationSlot
Npgsql.Replication.TestDecoding.TestDecodingReplicationSlot.TestDecodingReplicationSlot(Npgsql.Replication.ReplicationSlotOptions options) -> void
Npgsql.Replication.TestDecoding.TestDecodingReplicationSlot.TestDecodingReplicationSlot(string! slotName) -> void
Npgsql.Replication.TestDecodingConnectionExtensions
Npgsql.Replication.TimelineHistoryFile
Npgsql.Replication.TimelineHistoryFile.Content.get -> byte[]!
Npgsql.Replication.TimelineHistoryFile.FileName.get -> string!
Npgsql.Replication.TimelineHistoryFile.TimelineHistoryFile() -> void
Npgsql.Replication.XLogDataMessage
Npgsql.Replication.XLogDataMessage.Data.get -> System.IO.Stream!
Npgsql.Replication.XLogDataMessage.XLogDataMessage() -> void
Npgsql.Schema.NpgsqlDbColumn
Npgsql.Schema.NpgsqlDbColumn.AllowDBNull.get -> bool?
Npgsql.Schema.NpgsqlDbColumn.AllowDBNull.set -> void
Npgsql.Schema.NpgsqlDbColumn.BaseCatalogName.get -> string!
Npgsql.Schema.NpgsqlDbColumn.BaseCatalogName.set -> void
Npgsql.Schema.NpgsqlDbColumn.BaseColumnName.get -> string?
Npgsql.Schema.NpgsqlDbColumn.BaseColumnName.set -> void
Npgsql.Schema.NpgsqlDbColumn.BaseSchemaName.get -> string?
Npgsql.Schema.NpgsqlDbColumn.BaseSchemaName.set -> void
Npgsql.Schema.NpgsqlDbColumn.BaseServerName.get -> string!
Npgsql.Schema.NpgsqlDbColumn.BaseServerName.set -> void
Npgsql.Schema.NpgsqlDbColumn.BaseTableName.get -> string?
Npgsql.Schema.NpgsqlDbColumn.BaseTableName.set -> void
Npgsql.Schema.NpgsqlDbColumn.ColumnAttributeNumber.get -> short?
Npgsql.Schema.NpgsqlDbColumn.ColumnName.get -> string!
Npgsql.Schema.NpgsqlDbColumn.ColumnName.set -> void
Npgsql.Schema.NpgsqlDbColumn.ColumnOrdinal.get -> int?
Npgsql.Schema.NpgsqlDbColumn.ColumnOrdinal.set -> void
Npgsql.Schema.NpgsqlDbColumn.ColumnSize.get -> int?
Npgsql.Schema.NpgsqlDbColumn.ColumnSize.set -> void
Npgsql.Schema.NpgsqlDbColumn.DataType.get -> System.Type?
Npgsql.Schema.NpgsqlDbColumn.DataType.set -> void
Npgsql.Schema.NpgsqlDbColumn.DataTypeName.get -> string!
Npgsql.Schema.NpgsqlDbColumn.DataTypeName.set -> void
Npgsql.Schema.NpgsqlDbColumn.DefaultValue.get -> string?
Npgsql.Schema.NpgsqlDbColumn.IsAliased.get -> bool?
Npgsql.Schema.NpgsqlDbColumn.IsAliased.set -> void
Npgsql.Schema.NpgsqlDbColumn.IsAutoIncrement.get -> bool?
Npgsql.Schema.NpgsqlDbColumn.IsAutoIncrement.set -> void
Npgsql.Schema.NpgsqlDbColumn.IsKey.get -> bool?
Npgsql.Schema.NpgsqlDbColumn.IsKey.set -> void
Npgsql.Schema.NpgsqlDbColumn.IsLong.get -> bool?
Npgsql.Schema.NpgsqlDbColumn.IsLong.set -> void
Npgsql.Schema.NpgsqlDbColumn.IsReadOnly.get -> bool?
Npgsql.Schema.NpgsqlDbColumn.IsReadOnly.set -> void
Npgsql.Schema.NpgsqlDbColumn.IsUnique.get -> bool?
Npgsql.Schema.NpgsqlDbColumn.IsUnique.set -> void
Npgsql.Schema.NpgsqlDbColumn.NpgsqlDbColumn() -> void
Npgsql.Schema.NpgsqlDbColumn.NpgsqlDbType.get -> NpgsqlTypes.NpgsqlDbType?
Npgsql.Schema.NpgsqlDbColumn.NumericPrecision.get -> int?
Npgsql.Schema.NpgsqlDbColumn.NumericPrecision.set -> void
Npgsql.Schema.NpgsqlDbColumn.NumericScale.get -> int?
Npgsql.Schema.NpgsqlDbColumn.NumericScale.set -> void
Npgsql.Schema.NpgsqlDbColumn.PostgresType.get -> Npgsql.PostgresTypes.PostgresType!
Npgsql.Schema.NpgsqlDbColumn.TableOID.get -> uint
Npgsql.Schema.NpgsqlDbColumn.TypeOID.get -> uint
Npgsql.Schema.NpgsqlDbColumn.UdtAssemblyQualifiedName.get -> string?
Npgsql.Schema.NpgsqlDbColumn.UdtAssemblyQualifiedName.set -> void
Npgsql.ServerCompatibilityMode
Npgsql.ServerCompatibilityMode.None = 0 -> Npgsql.ServerCompatibilityMode
Npgsql.ServerCompatibilityMode.NoTypeLoading = 2 -> Npgsql.ServerCompatibilityMode
Npgsql.ServerCompatibilityMode.Redshift = 1 -> Npgsql.ServerCompatibilityMode
Npgsql.SslMode
Npgsql.SslMode.Disable = 0 -> Npgsql.SslMode
Npgsql.SslMode.Prefer = 1 -> Npgsql.SslMode
Npgsql.SslMode.Require = 2 -> Npgsql.SslMode
Npgsql.StatementType
Npgsql.StatementType.Copy = 8 -> Npgsql.StatementType
Npgsql.StatementType.CreateTableAs = 5 -> Npgsql.StatementType
Npgsql.StatementType.Delete = 3 -> Npgsql.StatementType
Npgsql.StatementType.Fetch = 7 -> Npgsql.StatementType
Npgsql.StatementType.Insert = 2 -> Npgsql.StatementType
Npgsql.StatementType.Move = 6 -> Npgsql.StatementType
Npgsql.StatementType.Other = 9 -> Npgsql.StatementType
Npgsql.StatementType.Select = 1 -> Npgsql.StatementType
Npgsql.StatementType.Unknown = 0 -> Npgsql.StatementType
Npgsql.StatementType.Update = 4 -> Npgsql.StatementType
Npgsql.TypeHandlers.ArrayHandler
Npgsql.TypeHandlers.ArrayHandler.ArrayHandler(Npgsql.PostgresTypes.PostgresType! arrayPostgresType, Npgsql.TypeHandling.NpgsqlTypeHandler! elementHandler, int lowerBound = 1) -> void
Npgsql.TypeHandlers.ArrayHandler.ReadArray<TRequestedElement>(Npgsql.NpgsqlReadBuffer! buf, bool async, int expectedDimensions = 0) -> System.Threading.Tasks.ValueTask<System.Array!>
Npgsql.TypeHandlers.ArrayHandler.ReadList<TRequestedElement>(Npgsql.NpgsqlReadBuffer! buf, bool async) -> System.Threading.Tasks.ValueTask<System.Collections.Generic.List<TRequestedElement>!>
Npgsql.TypeHandlers.ArrayHandler<TElement>
Npgsql.TypeHandlers.ArrayHandler<TElement>.ArrayHandler(Npgsql.PostgresTypes.PostgresType! arrayPostgresType, Npgsql.TypeHandling.NpgsqlTypeHandler! elementHandler, int lowerBound = 1) -> void
Npgsql.TypeHandlers.BitStringArrayHandler
Npgsql.TypeHandlers.BitStringArrayHandler.BitStringArrayHandler(Npgsql.PostgresTypes.PostgresType! postgresType, Npgsql.TypeHandlers.BitStringHandler! elementHandler) -> void
Npgsql.TypeHandlers.BitStringHandler
Npgsql.TypeHandlers.BitStringHandler.BitStringHandler(Npgsql.PostgresTypes.PostgresType! postgresType) -> void
Npgsql.TypeHandlers.BitStringHandler.ValidateAndGetLength(bool value, ref Npgsql.NpgsqlLengthCache? lengthCache, Npgsql.NpgsqlParameter? parameter) -> int
Npgsql.TypeHandlers.BitStringHandler.ValidateAndGetLength(string! value, ref Npgsql.NpgsqlLengthCache? lengthCache, Npgsql.NpgsqlParameter? parameter) -> int
Npgsql.TypeHandlers.BitStringHandler.ValidateAndGetLength(System.Collections.Specialized.BitVector32 value, ref Npgsql.NpgsqlLengthCache? lengthCache, Npgsql.NpgsqlParameter? parameter) -> int
Npgsql.TypeHandlers.BitStringHandler.Write(bool value, Npgsql.NpgsqlWriteBuffer! buf, Npgsql.NpgsqlLengthCache? lengthCache, Npgsql.NpgsqlParameter? parameter, bool async, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
Npgsql.TypeHandlers.BitStringHandler.Write(string! value, Npgsql.NpgsqlWriteBuffer! buf, Npgsql.NpgsqlLengthCache? lengthCache, Npgsql.NpgsqlParameter? parameter, bool async, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
Npgsql.TypeHandlers.BitStringHandler.Write(System.Collections.Specialized.BitVector32 value, Npgsql.NpgsqlWriteBuffer! buf, Npgsql.NpgsqlLengthCache? lengthCache, Npgsql.NpgsqlParameter? parameter, bool async, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
Npgsql.TypeHandlers.BoolHandler
Npgsql.TypeHandlers.BoolHandler.BoolHandler(Npgsql.PostgresTypes.PostgresType! postgresType) -> void
Npgsql.TypeHandlers.ByteaHandler
Npgsql.TypeHandlers.ByteaHandler.ByteaHandler(Npgsql.PostgresTypes.PostgresType! postgresType) -> void
Npgsql.TypeHandlers.ByteaHandler.ValidateAndGetLength(System.ArraySegment<byte> value, ref Npgsql.NpgsqlLengthCache? lengthCache, Npgsql.NpgsqlParameter? parameter) -> int
Npgsql.TypeHandlers.ByteaHandler.ValidateAndGetLength(System.Memory<byte> value, ref Npgsql.NpgsqlLengthCache? lengthCache, Npgsql.NpgsqlParameter? parameter) -> int
Npgsql.TypeHandlers.ByteaHandler.ValidateAndGetLength(System.ReadOnlyMemory<byte> value, ref Npgsql.NpgsqlLengthCache? lengthCache, Npgsql.NpgsqlParameter? parameter) -> int
Npgsql.TypeHandlers.ByteaHandler.Write(System.ArraySegment<byte> value, Npgsql.NpgsqlWriteBuffer! buf, Npgsql.NpgsqlLengthCache? lengthCache, Npgsql.NpgsqlParameter? parameter, bool async, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
Npgsql.TypeHandlers.ByteaHandler.Write(System.Memory<byte> value, Npgsql.NpgsqlWriteBuffer! buf, Npgsql.NpgsqlLengthCache? lengthCache, Npgsql.NpgsqlParameter? parameter, bool async, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
Npgsql.TypeHandlers.ByteaHandler.Write(System.ReadOnlyMemory<byte> value, Npgsql.NpgsqlWriteBuffer! buf, Npgsql.NpgsqlLengthCache? lengthCache, Npgsql.NpgsqlParameter? parameter, bool async, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
Npgsql.TypeHandlers.CompositeHandlers.ICompositeTypeHandlerFactory
Npgsql.TypeHandlers.CompositeHandlers.ICompositeTypeHandlerFactory.NameTranslator.get -> Npgsql.INpgsqlNameTranslator!
Npgsql.TypeHandlers.DateTimeHandlers.DateHandler
Npgsql.TypeHandlers.DateTimeHandlers.DateHandler.DateHandler(Npgsql.PostgresTypes.PostgresType! postgresType, bool convertInfinityDateTime) -> void
Npgsql.TypeHandlers.DateTimeHandlers.DateHandlerFactory
Npgsql.TypeHandlers.DateTimeHandlers.DateHandlerFactory.DateHandlerFactory() -> void
Npgsql.TypeHandlers.DateTimeHandlers.IntervalHandler
Npgsql.TypeHandlers.DateTimeHandlers.IntervalHandler.IntervalHandler(Npgsql.PostgresTypes.PostgresType! postgresType) -> void
Npgsql.TypeHandlers.DateTimeHandlers.IntervalHandlerFactory
Npgsql.TypeHandlers.DateTimeHandlers.IntervalHandlerFactory.IntervalHandlerFactory() -> void
Npgsql.TypeHandlers.DateTimeHandlers.TimeHandler
Npgsql.TypeHandlers.DateTimeHandlers.TimeHandler.TimeHandler(Npgsql.PostgresTypes.PostgresType! postgresType) -> void
Npgsql.TypeHandlers.DateTimeHandlers.TimeHandlerFactory
Npgsql.TypeHandlers.DateTimeHandlers.TimeHandlerFactory.TimeHandlerFactory() -> void
Npgsql.TypeHandlers.DateTimeHandlers.TimestampHandler
Npgsql.TypeHandlers.DateTimeHandlers.TimestampHandler.ReadTimeStamp(Npgsql.NpgsqlReadBuffer! buf, int len, Npgsql.BackendMessages.FieldDescription? fieldDescription = null) -> NpgsqlTypes.NpgsqlDateTime
Npgsql.TypeHandlers.DateTimeHandlers.TimestampHandler.TimestampHandler(Npgsql.PostgresTypes.PostgresType! postgresType, bool convertInfinityDateTime) -> void
Npgsql.TypeHandlers.DateTimeHandlers.TimestampHandlerFactory
Npgsql.TypeHandlers.DateTimeHandlers.TimestampHandlerFactory.TimestampHandlerFactory() -> void
Npgsql.TypeHandlers.DateTimeHandlers.TimestampTzHandler
Npgsql.TypeHandlers.DateTimeHandlers.TimestampTzHandler.TimestampTzHandler(Npgsql.PostgresTypes.PostgresType! postgresType, bool convertInfinityDateTime) -> void
Npgsql.TypeHandlers.DateTimeHandlers.TimestampTzHandler.ValidateAndGetLength(System.DateTimeOffset value, Npgsql.NpgsqlParameter? parameter) -> int
Npgsql.TypeHandlers.DateTimeHandlers.TimestampTzHandler.Write(System.DateTimeOffset value, Npgsql.NpgsqlWriteBuffer! buf, Npgsql.NpgsqlParameter? parameter) -> void
Npgsql.TypeHandlers.DateTimeHandlers.TimestampTzHandlerFactory
Npgsql.TypeHandlers.DateTimeHandlers.TimestampTzHandlerFactory.TimestampTzHandlerFactory() -> void
Npgsql.TypeHandlers.DateTimeHandlers.TimeTzHandler
Npgsql.TypeHandlers.DateTimeHandlers.TimeTzHandler.TimeTzHandler(Npgsql.PostgresTypes.PostgresType! postgresType) -> void
Npgsql.TypeHandlers.DateTimeHandlers.TimeTzHandler.ValidateAndGetLength(System.DateTime value, Npgsql.NpgsqlParameter? parameter) -> int
Npgsql.TypeHandlers.DateTimeHandlers.TimeTzHandler.ValidateAndGetLength(System.TimeSpan value, Npgsql.NpgsqlParameter? parameter) -> int
Npgsql.TypeHandlers.DateTimeHandlers.TimeTzHandler.Write(System.DateTime value, Npgsql.NpgsqlWriteBuffer! buf, Npgsql.NpgsqlParameter? parameter) -> void
Npgsql.TypeHandlers.DateTimeHandlers.TimeTzHandler.Write(System.TimeSpan value, Npgsql.NpgsqlWriteBuffer! buf, Npgsql.NpgsqlParameter? parameter) -> void
Npgsql.TypeHandlers.DateTimeHandlers.TimeTzHandlerFactory
Npgsql.TypeHandlers.DateTimeHandlers.TimeTzHandlerFactory.TimeTzHandlerFactory() -> void
Npgsql.TypeHandlers.FullTextSearchHandlers.TsQueryHandler
Npgsql.TypeHandlers.FullTextSearchHandlers.TsVectorHandler
Npgsql.TypeHandlers.FullTextSearchHandlers.TsVectorHandler.TsVectorHandler(Npgsql.PostgresTypes.PostgresType! postgresType) -> void
Npgsql.TypeHandlers.GeometricHandlers.BoxHandler
Npgsql.TypeHandlers.GeometricHandlers.BoxHandler.BoxHandler(Npgsql.PostgresTypes.PostgresType! postgresType) -> void
Npgsql.TypeHandlers.GeometricHandlers.CircleHandler
Npgsql.TypeHandlers.GeometricHandlers.CircleHandler.CircleHandler(Npgsql.PostgresTypes.PostgresType! postgresType) -> void
Npgsql.TypeHandlers.GeometricHandlers.LineHandler
Npgsql.TypeHandlers.GeometricHandlers.LineHandler.LineHandler(Npgsql.PostgresTypes.PostgresType! postgresType) -> void
Npgsql.TypeHandlers.GeometricHandlers.LineSegmentHandler
Npgsql.TypeHandlers.GeometricHandlers.LineSegmentHandler.LineSegmentHandler(Npgsql.PostgresTypes.PostgresType! postgresType) -> void
Npgsql.TypeHandlers.GeometricHandlers.PathHandler
Npgsql.TypeHandlers.GeometricHandlers.PathHandler.PathHandler(Npgsql.PostgresTypes.PostgresType! postgresType) -> void
Npgsql.TypeHandlers.GeometricHandlers.PointHandler
Npgsql.TypeHandlers.GeometricHandlers.PointHandler.PointHandler(Npgsql.PostgresTypes.PostgresType! postgresType) -> void
Npgsql.TypeHandlers.GeometricHandlers.PolygonHandler
Npgsql.TypeHandlers.GeometricHandlers.PolygonHandler.PolygonHandler(Npgsql.PostgresTypes.PostgresType! postgresType) -> void
Npgsql.TypeHandlers.HstoreHandler
Npgsql.TypeHandlers.HstoreHandler.ValidateAndGetLength(System.Collections.Generic.IDictionary<string!, string?>! value, ref Npgsql.NpgsqlLengthCache? lengthCache, Npgsql.NpgsqlParameter? parameter) -> int
Npgsql.TypeHandlers.HstoreHandler.ValidateAndGetLength(System.Collections.Immutable.ImmutableDictionary<string!, string?>! value, ref Npgsql.NpgsqlLengthCache? lengthCache, Npgsql.NpgsqlParameter? parameter) -> int
Npgsql.TypeHandlers.HstoreHandler.Write(System.Collections.Generic.IDictionary<string!, string?>! value, Npgsql.NpgsqlWriteBuffer! buf, Npgsql.NpgsqlLengthCache? lengthCache, Npgsql.NpgsqlParameter? parameter, bool async, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
Npgsql.TypeHandlers.HstoreHandler.Write(System.Collections.Immutable.ImmutableDictionary<string!, string?>! value, Npgsql.NpgsqlWriteBuffer! buf, Npgsql.NpgsqlLengthCache? lengthCache, Npgsql.NpgsqlParameter? parameter, bool async, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
Npgsql.TypeHandlers.HstoreHandlerFactory
Npgsql.TypeHandlers.HstoreHandlerFactory.HstoreHandlerFactory() -> void
Npgsql.TypeHandlers.IEnumTypeHandlerFactory
Npgsql.TypeHandlers.IEnumTypeHandlerFactory.NameTranslator.get -> Npgsql.INpgsqlNameTranslator!
Npgsql.TypeHandlers.InternalCharHandler
Npgsql.TypeHandlers.InternalCharHandler.InternalCharHandler(Npgsql.PostgresTypes.PostgresType! postgresType) -> void
Npgsql.TypeHandlers.InternalCharHandler.ValidateAndGetLength(byte value, Npgsql.NpgsqlParameter? parameter) -> int
Npgsql.TypeHandlers.InternalCharHandler.ValidateAndGetLength(int value, Npgsql.NpgsqlParameter? parameter) -> int
Npgsql.TypeHandlers.InternalCharHandler.ValidateAndGetLength(long value, Npgsql.NpgsqlParameter? parameter) -> int
Npgsql.TypeHandlers.InternalCharHandler.ValidateAndGetLength(short value, Npgsql.NpgsqlParameter? parameter) -> int
Npgsql.TypeHandlers.InternalCharHandler.Write(byte value, Npgsql.NpgsqlWriteBuffer! buf, Npgsql.NpgsqlParameter? parameter) -> void
Npgsql.TypeHandlers.InternalCharHandler.Write(int value, Npgsql.NpgsqlWriteBuffer! buf, Npgsql.NpgsqlParameter? parameter) -> void
Npgsql.TypeHandlers.InternalCharHandler.Write(long value, Npgsql.NpgsqlWriteBuffer! buf, Npgsql.NpgsqlParameter? parameter) -> void
Npgsql.TypeHandlers.InternalCharHandler.Write(short value, Npgsql.NpgsqlWriteBuffer! buf, Npgsql.NpgsqlParameter? parameter) -> void
Npgsql.TypeHandlers.IRangeHandler
Npgsql.TypeHandlers.IRangeHandler.SupportedRangeClrTypes.get -> System.Type![]!
Npgsql.TypeHandlers.JsonbHandlerFactory
Npgsql.TypeHandlers.JsonbHandlerFactory.JsonbHandlerFactory() -> void
Npgsql.TypeHandlers.JsonbHandlerFactory.JsonbHandlerFactory(System.Text.Json.JsonSerializerOptions! serializerOptions) -> void
Npgsql.TypeHandlers.JsonHandler
Npgsql.TypeHandlers.JsonHandler.GetTextReader(System.IO.Stream! stream) -> System.IO.TextReader!
Npgsql.TypeHandlers.JsonHandler.JsonHandler(Npgsql.PostgresTypes.PostgresType! postgresType, Npgsql.NpgsqlConnection! connection, bool isJsonb, System.Text.Json.JsonSerializerOptions? serializerOptions = null) -> void
Npgsql.TypeHandlers.JsonHandlerFactory
Npgsql.TypeHandlers.JsonHandlerFactory.JsonHandlerFactory() -> void
Npgsql.TypeHandlers.JsonHandlerFactory.JsonHandlerFactory(System.Text.Json.JsonSerializerOptions! serializerOptions) -> void
Npgsql.TypeHandlers.JsonPathHandler
Npgsql.TypeHandlers.JsonPathHandler.GetTextReader(System.IO.Stream! stream) -> System.IO.TextReader!
Npgsql.TypeHandlers.JsonPathHandler.JsonPathHandler(Npgsql.PostgresTypes.PostgresType! postgresType, Npgsql.NpgsqlConnection! connection) -> void
Npgsql.TypeHandlers.JsonPathHandlerFactory
Npgsql.TypeHandlers.JsonPathHandlerFactory.JsonPathHandlerFactory() -> void
Npgsql.TypeHandlers.LQueryHandler
Npgsql.TypeHandlers.LQueryHandler.LQueryHandler(Npgsql.PostgresTypes.PostgresType! postgresType, Npgsql.NpgsqlConnection! connection) -> void
Npgsql.TypeHandlers.LTreeHandler
Npgsql.TypeHandlers.LTreeHandler.LTreeHandler(Npgsql.PostgresTypes.PostgresType! postgresType, Npgsql.NpgsqlConnection! connection) -> void
Npgsql.TypeHandlers.LTxtQueryHandler
Npgsql.TypeHandlers.LTxtQueryHandler.LTxtQueryHandler(Npgsql.PostgresTypes.PostgresType! postgresType, Npgsql.NpgsqlConnection! connection) -> void
Npgsql.TypeHandlers.NetworkHandlers.CidrHandler
Npgsql.TypeHandlers.NetworkHandlers.CidrHandler.CidrHandler(Npgsql.PostgresTypes.PostgresType! postgresType) -> void
Npgsql.TypeHandlers.NetworkHandlers.CidrHandler.ValidateAndGetLength(NpgsqlTypes.NpgsqlInet value, Npgsql.NpgsqlParameter? parameter) -> int
Npgsql.TypeHandlers.NetworkHandlers.CidrHandler.Write(NpgsqlTypes.NpgsqlInet value, Npgsql.NpgsqlWriteBuffer! buf, Npgsql.NpgsqlParameter? parameter) -> void
Npgsql.TypeHandlers.NetworkHandlers.InetHandler
Npgsql.TypeHandlers.NetworkHandlers.InetHandler.InetHandler(Npgsql.PostgresTypes.PostgresType! postgresType) -> void
Npgsql.TypeHandlers.NetworkHandlers.InetHandler.ValidateAndGetLength(NpgsqlTypes.NpgsqlInet value, Npgsql.NpgsqlParameter? parameter) -> int
Npgsql.TypeHandlers.NetworkHandlers.InetHandler.Write(NpgsqlTypes.NpgsqlInet value, Npgsql.NpgsqlWriteBuffer! buf, Npgsql.NpgsqlParameter? parameter) -> void
Npgsql.TypeHandlers.NetworkHandlers.MacaddrHandler
Npgsql.TypeHandlers.NetworkHandlers.MacaddrHandler.MacaddrHandler(Npgsql.PostgresTypes.PostgresType! postgresType) -> void
Npgsql.TypeHandlers.NumericHandlers.DoubleHandler
Npgsql.TypeHandlers.NumericHandlers.DoubleHandler.DoubleHandler(Npgsql.PostgresTypes.PostgresType! postgresType) -> void
Npgsql.TypeHandlers.NumericHandlers.Int16Handler
Npgsql.TypeHandlers.NumericHandlers.Int16Handler.Int16Handler(Npgsql.PostgresTypes.PostgresType! postgresType) -> void
Npgsql.TypeHandlers.NumericHandlers.Int16Handler.ValidateAndGetLength(byte value, Npgsql.NpgsqlParameter? parameter) -> int
Npgsql.TypeHandlers.NumericHandlers.Int16Handler.ValidateAndGetLength(decimal value, Npgsql.NpgsqlParameter? parameter) -> int
Npgsql.TypeHandlers.NumericHandlers.Int16Handler.ValidateAndGetLength(double value, Npgsql.NpgsqlParameter? parameter) -> int
Npgsql.TypeHandlers.NumericHandlers.Int16Handler.ValidateAndGetLength(float value, Npgsql.NpgsqlParameter? parameter) -> int
Npgsql.TypeHandlers.NumericHandlers.Int16Handler.ValidateAndGetLength(int value, Npgsql.NpgsqlParameter? parameter) -> int
Npgsql.TypeHandlers.NumericHandlers.Int16Handler.ValidateAndGetLength(long value, Npgsql.NpgsqlParameter? parameter) -> int
Npgsql.TypeHandlers.NumericHandlers.Int16Handler.ValidateAndGetLength(sbyte value, Npgsql.NpgsqlParameter? parameter) -> int
Npgsql.TypeHandlers.NumericHandlers.Int16Handler.Write(byte value, Npgsql.NpgsqlWriteBuffer! buf, Npgsql.NpgsqlParameter? parameter) -> void
Npgsql.TypeHandlers.NumericHandlers.Int16Handler.Write(decimal value, Npgsql.NpgsqlWriteBuffer! buf, Npgsql.NpgsqlParameter? parameter) -> void
Npgsql.TypeHandlers.NumericHandlers.Int16Handler.Write(double value, Npgsql.NpgsqlWriteBuffer! buf, Npgsql.NpgsqlParameter? parameter) -> void
Npgsql.TypeHandlers.NumericHandlers.Int16Handler.Write(float value, Npgsql.NpgsqlWriteBuffer! buf, Npgsql.NpgsqlParameter? parameter) -> void
Npgsql.TypeHandlers.NumericHandlers.Int16Handler.Write(int value, Npgsql.NpgsqlWriteBuffer! buf, Npgsql.NpgsqlParameter? parameter) -> void
Npgsql.TypeHandlers.NumericHandlers.Int16Handler.Write(long value, Npgsql.NpgsqlWriteBuffer! buf, Npgsql.NpgsqlParameter? parameter) -> void
Npgsql.TypeHandlers.NumericHandlers.Int16Handler.Write(sbyte value, Npgsql.NpgsqlWriteBuffer! buf, Npgsql.NpgsqlParameter? parameter) -> void
Npgsql.TypeHandlers.NumericHandlers.Int32Handler
Npgsql.TypeHandlers.NumericHandlers.Int32Handler.Int32Handler(Npgsql.PostgresTypes.PostgresType! postgresType) -> void
Npgsql.TypeHandlers.NumericHandlers.Int32Handler.ValidateAndGetLength(byte value, Npgsql.NpgsqlParameter? parameter) -> int
Npgsql.TypeHandlers.NumericHandlers.Int32Handler.ValidateAndGetLength(decimal value, Npgsql.NpgsqlParameter? parameter) -> int
Npgsql.TypeHandlers.NumericHandlers.Int32Handler.ValidateAndGetLength(double value, Npgsql.NpgsqlParameter? parameter) -> int
Npgsql.TypeHandlers.NumericHandlers.Int32Handler.ValidateAndGetLength(float value, Npgsql.NpgsqlParameter? parameter) -> int
Npgsql.TypeHandlers.NumericHandlers.Int32Handler.ValidateAndGetLength(long value, Npgsql.NpgsqlParameter? parameter) -> int
Npgsql.TypeHandlers.NumericHandlers.Int32Handler.ValidateAndGetLength(short value, Npgsql.NpgsqlParameter? parameter) -> int
Npgsql.TypeHandlers.NumericHandlers.Int32Handler.Write(byte value, Npgsql.NpgsqlWriteBuffer! buf, Npgsql.NpgsqlParameter? parameter) -> void
Npgsql.TypeHandlers.NumericHandlers.Int32Handler.Write(decimal value, Npgsql.NpgsqlWriteBuffer! buf, Npgsql.NpgsqlParameter? parameter) -> void
Npgsql.TypeHandlers.NumericHandlers.Int32Handler.Write(double value, Npgsql.NpgsqlWriteBuffer! buf, Npgsql.NpgsqlParameter? parameter) -> void
Npgsql.TypeHandlers.NumericHandlers.Int32Handler.Write(float value, Npgsql.NpgsqlWriteBuffer! buf, Npgsql.NpgsqlParameter? parameter) -> void
Npgsql.TypeHandlers.NumericHandlers.Int32Handler.Write(long value, Npgsql.NpgsqlWriteBuffer! buf, Npgsql.NpgsqlParameter? parameter) -> void
Npgsql.TypeHandlers.NumericHandlers.Int32Handler.Write(short value, Npgsql.NpgsqlWriteBuffer! buf, Npgsql.NpgsqlParameter? parameter) -> void
Npgsql.TypeHandlers.NumericHandlers.Int64Handler
Npgsql.TypeHandlers.NumericHandlers.Int64Handler.Int64Handler(Npgsql.PostgresTypes.PostgresType! postgresType) -> void
Npgsql.TypeHandlers.NumericHandlers.Int64Handler.ValidateAndGetLength(byte value, Npgsql.NpgsqlParameter? parameter) -> int
Npgsql.TypeHandlers.NumericHandlers.Int64Handler.ValidateAndGetLength(decimal value, Npgsql.NpgsqlParameter? parameter) -> int
Npgsql.TypeHandlers.NumericHandlers.Int64Handler.ValidateAndGetLength(double value, Npgsql.NpgsqlParameter? parameter) -> int
Npgsql.TypeHandlers.NumericHandlers.Int64Handler.ValidateAndGetLength(float value, Npgsql.NpgsqlParameter? parameter) -> int
Npgsql.TypeHandlers.NumericHandlers.Int64Handler.ValidateAndGetLength(int value, Npgsql.NpgsqlParameter? parameter) -> int
Npgsql.TypeHandlers.NumericHandlers.Int64Handler.ValidateAndGetLength(short value, Npgsql.NpgsqlParameter? parameter) -> int
Npgsql.TypeHandlers.NumericHandlers.Int64Handler.Write(byte value, Npgsql.NpgsqlWriteBuffer! buf, Npgsql.NpgsqlParameter? parameter) -> void
Npgsql.TypeHandlers.NumericHandlers.Int64Handler.Write(decimal value, Npgsql.NpgsqlWriteBuffer! buf, Npgsql.NpgsqlParameter? parameter) -> void
Npgsql.TypeHandlers.NumericHandlers.Int64Handler.Write(double value, Npgsql.NpgsqlWriteBuffer! buf, Npgsql.NpgsqlParameter? parameter) -> void
Npgsql.TypeHandlers.NumericHandlers.Int64Handler.Write(float value, Npgsql.NpgsqlWriteBuffer! buf, Npgsql.NpgsqlParameter? parameter) -> void
Npgsql.TypeHandlers.NumericHandlers.Int64Handler.Write(int value, Npgsql.NpgsqlWriteBuffer! buf, Npgsql.NpgsqlParameter? parameter) -> void
Npgsql.TypeHandlers.NumericHandlers.Int64Handler.Write(short value, Npgsql.NpgsqlWriteBuffer! buf, Npgsql.NpgsqlParameter? parameter) -> void
Npgsql.TypeHandlers.NumericHandlers.MoneyHandler
Npgsql.TypeHandlers.NumericHandlers.MoneyHandler.MoneyHandler(Npgsql.PostgresTypes.PostgresType! postgresType) -> void
Npgsql.TypeHandlers.NumericHandlers.NumericHandler
Npgsql.TypeHandlers.NumericHandlers.NumericHandler.NumericHandler(Npgsql.PostgresTypes.PostgresType! postgresType) -> void
Npgsql.TypeHandlers.NumericHandlers.NumericHandler.ValidateAndGetLength(byte value, Npgsql.NpgsqlParameter? parameter) -> int
Npgsql.TypeHandlers.NumericHandlers.NumericHandler.ValidateAndGetLength(double value, Npgsql.NpgsqlParameter? parameter) -> int
Npgsql.TypeHandlers.NumericHandlers.NumericHandler.ValidateAndGetLength(float value, Npgsql.NpgsqlParameter? parameter) -> int
Npgsql.TypeHandlers.NumericHandlers.NumericHandler.ValidateAndGetLength(int value, Npgsql.NpgsqlParameter? parameter) -> int
Npgsql.TypeHandlers.NumericHandlers.NumericHandler.ValidateAndGetLength(long value, Npgsql.NpgsqlParameter? parameter) -> int
Npgsql.TypeHandlers.NumericHandlers.NumericHandler.ValidateAndGetLength(short value, Npgsql.NpgsqlParameter? parameter) -> int
Npgsql.TypeHandlers.NumericHandlers.NumericHandler.Write(byte value, Npgsql.NpgsqlWriteBuffer! buf, Npgsql.NpgsqlParameter? parameter) -> void
Npgsql.TypeHandlers.NumericHandlers.NumericHandler.Write(double value, Npgsql.NpgsqlWriteBuffer! buf, Npgsql.NpgsqlParameter? parameter) -> void
Npgsql.TypeHandlers.NumericHandlers.NumericHandler.Write(float value, Npgsql.NpgsqlWriteBuffer! buf, Npgsql.NpgsqlParameter? parameter) -> void
Npgsql.TypeHandlers.NumericHandlers.NumericHandler.Write(int value, Npgsql.NpgsqlWriteBuffer! buf, Npgsql.NpgsqlParameter? parameter) -> void
Npgsql.TypeHandlers.NumericHandlers.NumericHandler.Write(long value, Npgsql.NpgsqlWriteBuffer! buf, Npgsql.NpgsqlParameter? parameter) -> void
Npgsql.TypeHandlers.NumericHandlers.NumericHandler.Write(short value, Npgsql.NpgsqlWriteBuffer! buf, Npgsql.NpgsqlParameter? parameter) -> void
Npgsql.TypeHandlers.NumericHandlers.SingleHandler
Npgsql.TypeHandlers.NumericHandlers.SingleHandler.SingleHandler(Npgsql.PostgresTypes.PostgresType! postgresType) -> void
Npgsql.TypeHandlers.NumericHandlers.SingleHandler.ValidateAndGetLength(double value, Npgsql.NpgsqlParameter? parameter) -> int
Npgsql.TypeHandlers.NumericHandlers.SingleHandler.Write(double value, Npgsql.NpgsqlWriteBuffer! buf, Npgsql.NpgsqlParameter? parameter) -> void
Npgsql.TypeHandlers.NumericHandlers.UInt32Handler
Npgsql.TypeHandlers.NumericHandlers.UInt32Handler.UInt32Handler(Npgsql.PostgresTypes.PostgresType! postgresType) -> void
Npgsql.TypeHandlers.RangeHandler<TElement1, TElement2>
Npgsql.TypeHandlers.RangeHandler<TElement1, TElement2>.RangeHandler(Npgsql.PostgresTypes.PostgresType! rangePostgresType, Npgsql.TypeHandling.NpgsqlTypeHandler! elementHandler) -> void
Npgsql.TypeHandlers.RangeHandler<TElement1, TElement2>.ValidateAndGetLength(NpgsqlTypes.NpgsqlRange<TElement2> value, ref Npgsql.NpgsqlLengthCache? lengthCache, Npgsql.NpgsqlParameter? parameter) -> int
Npgsql.TypeHandlers.RangeHandler<TElement1, TElement2>.Write(NpgsqlTypes.NpgsqlRange<TElement2> value, Npgsql.NpgsqlWriteBuffer! buf, Npgsql.NpgsqlLengthCache? lengthCache, Npgsql.NpgsqlParameter? parameter, bool async, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
Npgsql.TypeHandlers.RangeHandler<TElement>
Npgsql.TypeHandlers.RangeHandler<TElement>.RangeHandler(Npgsql.PostgresTypes.PostgresType! rangePostgresType, Npgsql.TypeHandling.NpgsqlTypeHandler! elementHandler) -> void
Npgsql.TypeHandlers.RangeHandler<TElement>.RangeHandler(Npgsql.PostgresTypes.PostgresType! rangePostgresType, Npgsql.TypeHandling.NpgsqlTypeHandler! elementHandler, System.Type![]! supportedElementClrTypes) -> void
Npgsql.TypeHandlers.RangeHandler<TElement>.SupportedRangeClrTypes.get -> System.Type![]!
Npgsql.TypeHandlers.TextHandler
Npgsql.TypeHandlers.TextHandler.TextHandler(Npgsql.PostgresTypes.PostgresType! postgresType, Npgsql.NpgsqlConnection! connection) -> void
Npgsql.TypeHandlers.TextHandler.TextHandler(Npgsql.PostgresTypes.PostgresType! postgresType, System.Text.Encoding! encoding) -> void
Npgsql.TypeHandlers.TextHandler.ValidateAndGetLength(byte[]! value, ref Npgsql.NpgsqlLengthCache? lengthCache, Npgsql.NpgsqlParameter? parameter) -> int
Npgsql.TypeHandlers.TextHandler.ValidateAndGetLength(char value, ref Npgsql.NpgsqlLengthCache? lengthCache, Npgsql.NpgsqlParameter? parameter) -> int
Npgsql.TypeHandlers.TextHandler.Write(byte[]! value, Npgsql.NpgsqlWriteBuffer! buf, Npgsql.NpgsqlLengthCache? lengthCache, Npgsql.NpgsqlParameter? parameter, bool async, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
Npgsql.TypeHandlers.TextHandler.Write(char value, Npgsql.NpgsqlWriteBuffer! buf, Npgsql.NpgsqlLengthCache? lengthCache, Npgsql.NpgsqlParameter? parameter, bool async, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
Npgsql.TypeHandlers.TextHandlerFactory
Npgsql.TypeHandlers.TextHandlerFactory.TextHandlerFactory() -> void
Npgsql.TypeHandlers.UuidHandler
Npgsql.TypeHandlers.UuidHandler.UuidHandler(Npgsql.PostgresTypes.PostgresType! postgresType) -> void
Npgsql.TypeHandling.INpgsqlSimpleTypeHandler<T>
Npgsql.TypeHandling.INpgsqlSimpleTypeHandler<T>.Read(Npgsql.NpgsqlReadBuffer! buf, int len, Npgsql.BackendMessages.FieldDescription? fieldDescription = null) -> T
Npgsql.TypeHandling.INpgsqlSimpleTypeHandler<T>.ValidateAndGetLength(T value, Npgsql.NpgsqlParameter? parameter) -> int
Npgsql.TypeHandling.INpgsqlSimpleTypeHandler<T>.Write(T value, Npgsql.NpgsqlWriteBuffer! buf, Npgsql.NpgsqlParameter? parameter) -> void
Npgsql.TypeHandling.INpgsqlTypeHandler<T>
Npgsql.TypeHandling.INpgsqlTypeHandler<T>.Read(Npgsql.NpgsqlReadBuffer! buf, int len, bool async, Npgsql.BackendMessages.FieldDescription? fieldDescription = null) -> System.Threading.Tasks.ValueTask<T>
Npgsql.TypeHandling.INpgsqlTypeHandler<T>.ValidateAndGetLength(T value, ref Npgsql.NpgsqlLengthCache? lengthCache, Npgsql.NpgsqlParameter? parameter) -> int
Npgsql.TypeHandling.INpgsqlTypeHandler<T>.Write(T value, Npgsql.NpgsqlWriteBuffer! buf, Npgsql.NpgsqlLengthCache? lengthCache, Npgsql.NpgsqlParameter? parameter, bool async, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
Npgsql.TypeHandling.NpgsqlSimpleTypeHandler<TDefault>
Npgsql.TypeHandling.NpgsqlSimpleTypeHandler<TDefault>.NpgsqlSimpleTypeHandler(Npgsql.PostgresTypes.PostgresType! postgresType) -> void
Npgsql.TypeHandling.NpgsqlSimpleTypeHandlerWithPsv<TDefault, TPsv>
Npgsql.TypeHandling.NpgsqlSimpleTypeHandlerWithPsv<TDefault, TPsv>.NpgsqlSimpleTypeHandlerWithPsv(Npgsql.PostgresTypes.PostgresType! postgresType) -> void
Npgsql.TypeHandling.NpgsqlTypeHandler
Npgsql.TypeHandling.NpgsqlTypeHandler.CreateConversionButNoParamException(System.Type! clrType) -> System.Exception!
Npgsql.TypeHandling.NpgsqlTypeHandler.NpgsqlTypeHandler(Npgsql.PostgresTypes.PostgresType! postgresType) -> void
Npgsql.TypeHandling.NpgsqlTypeHandler<TDefault>
Npgsql.TypeHandling.NpgsqlTypeHandler<TDefault>.NpgsqlTypeHandler(Npgsql.PostgresTypes.PostgresType! postgresType) -> void
Npgsql.TypeHandling.NpgsqlTypeHandlerFactory
Npgsql.TypeHandling.NpgsqlTypeHandlerFactory.NpgsqlTypeHandlerFactory() -> void
Npgsql.TypeHandling.NpgsqlTypeHandlerFactory<TDefault>
Npgsql.TypeHandling.NpgsqlTypeHandlerFactory<TDefault>.NpgsqlTypeHandlerFactory() -> void
Npgsql.TypeMapping.INpgsqlTypeMapper
Npgsql.TypeMapping.INpgsqlTypeMapper.AddMapping(Npgsql.TypeMapping.NpgsqlTypeMapping! mapping) -> Npgsql.TypeMapping.INpgsqlTypeMapper!
Npgsql.TypeMapping.INpgsqlTypeMapper.DefaultNameTranslator.get -> Npgsql.INpgsqlNameTranslator!
Npgsql.TypeMapping.INpgsqlTypeMapper.MapComposite(System.Type! clrType, string? pgName = null, Npgsql.INpgsqlNameTranslator? nameTranslator = null) -> Npgsql.TypeMapping.INpgsqlTypeMapper!
Npgsql.TypeMapping.INpgsqlTypeMapper.MapComposite<T>(string? pgName = null, Npgsql.INpgsqlNameTranslator? nameTranslator = null) -> Npgsql.TypeMapping.INpgsqlTypeMapper!
Npgsql.TypeMapping.INpgsqlTypeMapper.MapEnum<TEnum>(string? pgName = null, Npgsql.INpgsqlNameTranslator? nameTranslator = null) -> Npgsql.TypeMapping.INpgsqlTypeMapper!
Npgsql.TypeMapping.INpgsqlTypeMapper.Mappings.get -> System.Collections.Generic.IEnumerable<Npgsql.TypeMapping.NpgsqlTypeMapping!>!
Npgsql.TypeMapping.INpgsqlTypeMapper.RemoveMapping(string! pgTypeName) -> bool
Npgsql.TypeMapping.INpgsqlTypeMapper.Reset() -> void
Npgsql.TypeMapping.INpgsqlTypeMapper.UnmapComposite(System.Type! clrType, string? pgName = null, Npgsql.INpgsqlNameTranslator? nameTranslator = null) -> bool
Npgsql.TypeMapping.INpgsqlTypeMapper.UnmapComposite<T>(string? pgName = null, Npgsql.INpgsqlNameTranslator? nameTranslator = null) -> bool
Npgsql.TypeMapping.INpgsqlTypeMapper.UnmapEnum<TEnum>(string? pgName = null, Npgsql.INpgsqlNameTranslator? nameTranslator = null) -> bool
Npgsql.TypeMapping.NpgsqlTypeMapping
Npgsql.TypeMapping.NpgsqlTypeMapping.ClrTypes.get -> System.Type![]!
Npgsql.TypeMapping.NpgsqlTypeMapping.DbTypes.get -> System.Data.DbType[]!
Npgsql.TypeMapping.NpgsqlTypeMapping.InferredDbType.get -> System.Data.DbType?
Npgsql.TypeMapping.NpgsqlTypeMapping.NpgsqlDbType.get -> NpgsqlTypes.NpgsqlDbType?
Npgsql.TypeMapping.NpgsqlTypeMapping.PgTypeName.get -> string!
Npgsql.TypeMapping.NpgsqlTypeMapping.TypeHandlerFactory.get -> Npgsql.TypeHandling.NpgsqlTypeHandlerFactory!
Npgsql.TypeMapping.NpgsqlTypeMappingBuilder
Npgsql.TypeMapping.NpgsqlTypeMappingBuilder.Build() -> Npgsql.TypeMapping.NpgsqlTypeMapping!
Npgsql.TypeMapping.NpgsqlTypeMappingBuilder.ClrTypes.get -> System.Type![]?
Npgsql.TypeMapping.NpgsqlTypeMappingBuilder.ClrTypes.set -> void
Npgsql.TypeMapping.NpgsqlTypeMappingBuilder.DbTypes.get -> System.Data.DbType[]?
Npgsql.TypeMapping.NpgsqlTypeMappingBuilder.DbTypes.set -> void
Npgsql.TypeMapping.NpgsqlTypeMappingBuilder.InferredDbType.get -> System.Data.DbType?
Npgsql.TypeMapping.NpgsqlTypeMappingBuilder.InferredDbType.set -> void
Npgsql.TypeMapping.NpgsqlTypeMappingBuilder.NpgsqlDbType.get -> NpgsqlTypes.NpgsqlDbType?
Npgsql.TypeMapping.NpgsqlTypeMappingBuilder.NpgsqlDbType.set -> void
Npgsql.TypeMapping.NpgsqlTypeMappingBuilder.NpgsqlTypeMappingBuilder() -> void
Npgsql.TypeMapping.NpgsqlTypeMappingBuilder.PgTypeName.get -> string?
Npgsql.TypeMapping.NpgsqlTypeMappingBuilder.PgTypeName.set -> void
Npgsql.TypeMapping.NpgsqlTypeMappingBuilder.TypeHandlerFactory.get -> Npgsql.TypeHandling.NpgsqlTypeHandlerFactory?
Npgsql.TypeMapping.NpgsqlTypeMappingBuilder.TypeHandlerFactory.set -> void
Npgsql.Util.NpgsqlTimeout
Npgsql.Util.NpgsqlTimeout.NpgsqlTimeout() -> void
NpgsqlTypes.NpgsqlBox
NpgsqlTypes.NpgsqlBox.Bottom.get -> double
NpgsqlTypes.NpgsqlBox.Equals(NpgsqlTypes.NpgsqlBox other) -> bool
NpgsqlTypes.NpgsqlBox.Height.get -> double
NpgsqlTypes.NpgsqlBox.IsEmpty.get -> bool
NpgsqlTypes.NpgsqlBox.Left.get -> double
NpgsqlTypes.NpgsqlBox.LowerLeft.get -> NpgsqlTypes.NpgsqlPoint
NpgsqlTypes.NpgsqlBox.LowerLeft.set -> void
NpgsqlTypes.NpgsqlBox.NpgsqlBox() -> void
NpgsqlTypes.NpgsqlBox.NpgsqlBox(double top, double right, double bottom, double left) -> void
NpgsqlTypes.NpgsqlBox.NpgsqlBox(NpgsqlTypes.NpgsqlPoint upperRight, NpgsqlTypes.NpgsqlPoint lowerLeft) -> void
NpgsqlTypes.NpgsqlBox.Right.get -> double
NpgsqlTypes.NpgsqlBox.Top.get -> double
NpgsqlTypes.NpgsqlBox.UpperRight.get -> NpgsqlTypes.NpgsqlPoint
NpgsqlTypes.NpgsqlBox.UpperRight.set -> void
NpgsqlTypes.NpgsqlBox.Width.get -> double
NpgsqlTypes.NpgsqlCircle
NpgsqlTypes.NpgsqlCircle.Center.get -> NpgsqlTypes.NpgsqlPoint
NpgsqlTypes.NpgsqlCircle.Center.set -> void
NpgsqlTypes.NpgsqlCircle.Equals(NpgsqlTypes.NpgsqlCircle other) -> bool
NpgsqlTypes.NpgsqlCircle.NpgsqlCircle() -> void
NpgsqlTypes.NpgsqlCircle.NpgsqlCircle(double x, double y, double radius) -> void
NpgsqlTypes.NpgsqlCircle.NpgsqlCircle(NpgsqlTypes.NpgsqlPoint center, double radius) -> void
NpgsqlTypes.NpgsqlCircle.Radius.get -> double
NpgsqlTypes.NpgsqlCircle.Radius.set -> void
NpgsqlTypes.NpgsqlCircle.X.get -> double
NpgsqlTypes.NpgsqlCircle.X.set -> void
NpgsqlTypes.NpgsqlCircle.Y.get -> double
NpgsqlTypes.NpgsqlCircle.Y.set -> void
NpgsqlTypes.NpgsqlDate
NpgsqlTypes.NpgsqlDate.Add(in NpgsqlTypes.NpgsqlTimeSpan interval) -> NpgsqlTypes.NpgsqlDate
NpgsqlTypes.NpgsqlDate.AddDays(int days) -> NpgsqlTypes.NpgsqlDate
NpgsqlTypes.NpgsqlDate.AddMonths(int months) -> NpgsqlTypes.NpgsqlDate
NpgsqlTypes.NpgsqlDate.AddYears(int years) -> NpgsqlTypes.NpgsqlDate
NpgsqlTypes.NpgsqlDate.Compare(NpgsqlTypes.NpgsqlDate x, NpgsqlTypes.NpgsqlDate y) -> int
NpgsqlTypes.NpgsqlDate.Compare(object? x, object? y) -> int
NpgsqlTypes.NpgsqlDate.CompareTo(NpgsqlTypes.NpgsqlDate other) -> int
NpgsqlTypes.NpgsqlDate.CompareTo(object? o) -> int
NpgsqlTypes.NpgsqlDate.Day.get -> int
NpgsqlTypes.NpgsqlDate.DayOfWeek.get -> System.DayOfWeek
NpgsqlTypes.NpgsqlDate.DayOfYear.get -> int
NpgsqlTypes.NpgsqlDate.Equals(NpgsqlTypes.NpgsqlDate other) -> bool
NpgsqlTypes.NpgsqlDate.IsFinite.get -> bool
NpgsqlTypes.NpgsqlDate.IsInfinity.get -> bool
NpgsqlTypes.NpgsqlDate.IsLeapYear.get -> bool
NpgsqlTypes.NpgsqlDate.IsNegativeInfinity.get -> bool
NpgsqlTypes.NpgsqlDate.Month.get -> int
NpgsqlTypes.NpgsqlDate.NpgsqlDate() -> void
NpgsqlTypes.NpgsqlDate.NpgsqlDate(int year, int month, int day) -> void
NpgsqlTypes.NpgsqlDate.NpgsqlDate(NpgsqlTypes.NpgsqlDate copyFrom) -> void
NpgsqlTypes.NpgsqlDate.NpgsqlDate(System.DateTime dateTime) -> void
NpgsqlTypes.NpgsqlDate.Subtract(in NpgsqlTypes.NpgsqlTimeSpan interval) -> NpgsqlTypes.NpgsqlDate
NpgsqlTypes.NpgsqlDate.Year.get -> int
NpgsqlTypes.NpgsqlDateTime
NpgsqlTypes.NpgsqlDateTime.Add(in NpgsqlTypes.NpgsqlTimeSpan value) -> NpgsqlTypes.NpgsqlDateTime
NpgsqlTypes.NpgsqlDateTime.Add(System.TimeSpan value) -> NpgsqlTypes.NpgsqlDateTime
NpgsqlTypes.NpgsqlDateTime.AddDays(double value) -> NpgsqlTypes.NpgsqlDateTime
NpgsqlTypes.NpgsqlDateTime.AddHours(double value) -> NpgsqlTypes.NpgsqlDateTime
NpgsqlTypes.NpgsqlDateTime.AddMilliseconds(double value) -> NpgsqlTypes.NpgsqlDateTime
NpgsqlTypes.NpgsqlDateTime.AddMinutes(double value) -> NpgsqlTypes.NpgsqlDateTime
NpgsqlTypes.NpgsqlDateTime.AddMonths(int value) -> NpgsqlTypes.NpgsqlDateTime
NpgsqlTypes.NpgsqlDateTime.AddSeconds(double value) -> NpgsqlTypes.NpgsqlDateTime
NpgsqlTypes.NpgsqlDateTime.AddTicks(long value) -> NpgsqlTypes.NpgsqlDateTime
NpgsqlTypes.NpgsqlDateTime.AddYears(int value) -> NpgsqlTypes.NpgsqlDateTime
NpgsqlTypes.NpgsqlDateTime.Compare(NpgsqlTypes.NpgsqlDateTime x, NpgsqlTypes.NpgsqlDateTime y) -> int
NpgsqlTypes.NpgsqlDateTime.Compare(object? x, object? y) -> int
NpgsqlTypes.NpgsqlDateTime.CompareTo(NpgsqlTypes.NpgsqlDateTime other) -> int
NpgsqlTypes.NpgsqlDateTime.CompareTo(object? o) -> int
NpgsqlTypes.NpgsqlDateTime.Date.get -> NpgsqlTypes.NpgsqlDate
NpgsqlTypes.NpgsqlDateTime.Day.get -> int
NpgsqlTypes.NpgsqlDateTime.DayOfWeek.get -> System.DayOfWeek
NpgsqlTypes.NpgsqlDateTime.DayOfYear.get -> int
NpgsqlTypes.NpgsqlDateTime.Equals(NpgsqlTypes.NpgsqlDateTime other) -> bool
NpgsqlTypes.NpgsqlDateTime.Hour.get -> int
NpgsqlTypes.NpgsqlDateTime.IsFinite.get -> bool
NpgsqlTypes.NpgsqlDateTime.IsInfinity.get -> bool
NpgsqlTypes.NpgsqlDateTime.IsLeapYear.get -> bool
NpgsqlTypes.NpgsqlDateTime.IsNegativeInfinity.get -> bool
NpgsqlTypes.NpgsqlDateTime.Kind.get -> System.DateTimeKind
NpgsqlTypes.NpgsqlDateTime.Millisecond.get -> int
NpgsqlTypes.NpgsqlDateTime.Minute.get -> int
NpgsqlTypes.NpgsqlDateTime.Month.get -> int
NpgsqlTypes.NpgsqlDateTime.Normalize() -> NpgsqlTypes.NpgsqlDateTime
NpgsqlTypes.NpgsqlDateTime.NpgsqlDateTime() -> void
NpgsqlTypes.NpgsqlDateTime.NpgsqlDateTime(int year, int month, int day, int hours, int minutes, int seconds, int milliseconds, System.DateTimeKind kind = System.DateTimeKind.Unspecified) -> void
NpgsqlTypes.NpgsqlDateTime.NpgsqlDateTime(int year, int month, int day, int hours, int minutes, int seconds, System.DateTimeKind kind = System.DateTimeKind.Unspecified) -> void
NpgsqlTypes.NpgsqlDateTime.NpgsqlDateTime(long ticks) -> void
NpgsqlTypes.NpgsqlDateTime.NpgsqlDateTime(long ticks, System.DateTimeKind kind) -> void
NpgsqlTypes.NpgsqlDateTime.NpgsqlDateTime(NpgsqlTypes.NpgsqlDate date) -> void
NpgsqlTypes.NpgsqlDateTime.NpgsqlDateTime(NpgsqlTypes.NpgsqlDate date, System.TimeSpan time, System.DateTimeKind kind = System.DateTimeKind.Unspecified) -> void
NpgsqlTypes.NpgsqlDateTime.NpgsqlDateTime(System.DateTime dateTime) -> void
NpgsqlTypes.NpgsqlDateTime.Second.get -> int
NpgsqlTypes.NpgsqlDateTime.Subtract(in NpgsqlTypes.NpgsqlTimeSpan interval) -> NpgsqlTypes.NpgsqlDateTime
NpgsqlTypes.NpgsqlDateTime.Subtract(NpgsqlTypes.NpgsqlDateTime timestamp) -> NpgsqlTypes.NpgsqlTimeSpan
NpgsqlTypes.NpgsqlDateTime.Ticks.get -> long
NpgsqlTypes.NpgsqlDateTime.Time.get -> System.TimeSpan
NpgsqlTypes.NpgsqlDateTime.ToDateTime() -> System.DateTime
NpgsqlTypes.NpgsqlDateTime.ToLocalTime() -> NpgsqlTypes.NpgsqlDateTime
NpgsqlTypes.NpgsqlDateTime.ToUniversalTime() -> NpgsqlTypes.NpgsqlDateTime
NpgsqlTypes.NpgsqlDateTime.Year.get -> int
NpgsqlTypes.NpgsqlDbType
NpgsqlTypes.NpgsqlDbType.Abstime = 33 -> NpgsqlTypes.NpgsqlDbType
NpgsqlTypes.NpgsqlDbType.Array = -2147483648 -> NpgsqlTypes.NpgsqlDbType
NpgsqlTypes.NpgsqlDbType.Bigint = 1 -> NpgsqlTypes.NpgsqlDbType
NpgsqlTypes.NpgsqlDbType.Bit = 25 -> NpgsqlTypes.NpgsqlDbType
NpgsqlTypes.NpgsqlDbType.Boolean = 2 -> NpgsqlTypes.NpgsqlDbType
NpgsqlTypes.NpgsqlDbType.Box = 3 -> NpgsqlTypes.NpgsqlDbType
NpgsqlTypes.NpgsqlDbType.Bytea = 4 -> NpgsqlTypes.NpgsqlDbType
NpgsqlTypes.NpgsqlDbType.Char = 6 -> NpgsqlTypes.NpgsqlDbType
NpgsqlTypes.NpgsqlDbType.Cid = 43 -> NpgsqlTypes.NpgsqlDbType
NpgsqlTypes.NpgsqlDbType.Cidr = 44 -> NpgsqlTypes.NpgsqlDbType
NpgsqlTypes.NpgsqlDbType.Circle = 5 -> NpgsqlTypes.NpgsqlDbType
NpgsqlTypes.NpgsqlDbType.Citext = 51 -> NpgsqlTypes.NpgsqlDbType
NpgsqlTypes.NpgsqlDbType.Date = 7 -> NpgsqlTypes.NpgsqlDbType
NpgsqlTypes.NpgsqlDbType.Double = 8 -> NpgsqlTypes.NpgsqlDbType
NpgsqlTypes.NpgsqlDbType.Geography = 55 -> NpgsqlTypes.NpgsqlDbType
NpgsqlTypes.NpgsqlDbType.Geometry = 50 -> NpgsqlTypes.NpgsqlDbType
NpgsqlTypes.NpgsqlDbType.Hstore = 37 -> NpgsqlTypes.NpgsqlDbType
NpgsqlTypes.NpgsqlDbType.Inet = 24 -> NpgsqlTypes.NpgsqlDbType
NpgsqlTypes.NpgsqlDbType.Int2Vector = 52 -> NpgsqlTypes.NpgsqlDbType
NpgsqlTypes.NpgsqlDbType.Integer = 9 -> NpgsqlTypes.NpgsqlDbType
NpgsqlTypes.NpgsqlDbType.InternalChar = 38 -> NpgsqlTypes.NpgsqlDbType
NpgsqlTypes.NpgsqlDbType.Interval = 30 -> NpgsqlTypes.NpgsqlDbType
NpgsqlTypes.NpgsqlDbType.Json = 35 -> NpgsqlTypes.NpgsqlDbType
NpgsqlTypes.NpgsqlDbType.Jsonb = 36 -> NpgsqlTypes.NpgsqlDbType
NpgsqlTypes.NpgsqlDbType.JsonPath = 57 -> NpgsqlTypes.NpgsqlDbType
NpgsqlTypes.NpgsqlDbType.Line = 10 -> NpgsqlTypes.NpgsqlDbType
NpgsqlTypes.NpgsqlDbType.LQuery = 61 -> NpgsqlTypes.NpgsqlDbType
NpgsqlTypes.NpgsqlDbType.LSeg = 11 -> NpgsqlTypes.NpgsqlDbType
NpgsqlTypes.NpgsqlDbType.LTree = 60 -> NpgsqlTypes.NpgsqlDbType
NpgsqlTypes.NpgsqlDbType.LTxtQuery = 62 -> NpgsqlTypes.NpgsqlDbType
NpgsqlTypes.NpgsqlDbType.MacAddr = 34 -> NpgsqlTypes.NpgsqlDbType
NpgsqlTypes.NpgsqlDbType.MacAddr8 = 54 -> NpgsqlTypes.NpgsqlDbType
NpgsqlTypes.NpgsqlDbType.Money = 12 -> NpgsqlTypes.NpgsqlDbType
NpgsqlTypes.NpgsqlDbType.Name = 32 -> NpgsqlTypes.NpgsqlDbType
NpgsqlTypes.NpgsqlDbType.Numeric = 13 -> NpgsqlTypes.NpgsqlDbType
NpgsqlTypes.NpgsqlDbType.Oid = 41 -> NpgsqlTypes.NpgsqlDbType
NpgsqlTypes.NpgsqlDbType.Oidvector = 29 -> NpgsqlTypes.NpgsqlDbType
NpgsqlTypes.NpgsqlDbType.Path = 14 -> NpgsqlTypes.NpgsqlDbType
NpgsqlTypes.NpgsqlDbType.PgLsn = 59 -> NpgsqlTypes.NpgsqlDbType
NpgsqlTypes.NpgsqlDbType.Point = 15 -> NpgsqlTypes.NpgsqlDbType
NpgsqlTypes.NpgsqlDbType.Polygon = 16 -> NpgsqlTypes.NpgsqlDbType
NpgsqlTypes.NpgsqlDbType.Range = 1073741824 -> NpgsqlTypes.NpgsqlDbType
NpgsqlTypes.NpgsqlDbType.Real = 17 -> NpgsqlTypes.NpgsqlDbType
NpgsqlTypes.NpgsqlDbType.Refcursor = 23 -> NpgsqlTypes.NpgsqlDbType
NpgsqlTypes.NpgsqlDbType.Regconfig = 56 -> NpgsqlTypes.NpgsqlDbType
NpgsqlTypes.NpgsqlDbType.Regtype = 49 -> NpgsqlTypes.NpgsqlDbType
NpgsqlTypes.NpgsqlDbType.Smallint = 18 -> NpgsqlTypes.NpgsqlDbType
NpgsqlTypes.NpgsqlDbType.Text = 19 -> NpgsqlTypes.NpgsqlDbType
NpgsqlTypes.NpgsqlDbType.Tid = 53 -> NpgsqlTypes.NpgsqlDbType
NpgsqlTypes.NpgsqlDbType.Time = 20 -> NpgsqlTypes.NpgsqlDbType
NpgsqlTypes.NpgsqlDbType.Timestamp = 21 -> NpgsqlTypes.NpgsqlDbType
NpgsqlTypes.NpgsqlDbType.TimestampTZ = 26 -> NpgsqlTypes.NpgsqlDbType
NpgsqlTypes.NpgsqlDbType.TimestampTz = 26 -> NpgsqlTypes.NpgsqlDbType
NpgsqlTypes.NpgsqlDbType.TimeTZ = 31 -> NpgsqlTypes.NpgsqlDbType
NpgsqlTypes.NpgsqlDbType.TimeTz = 31 -> NpgsqlTypes.NpgsqlDbType
NpgsqlTypes.NpgsqlDbType.TsQuery = 46 -> NpgsqlTypes.NpgsqlDbType
NpgsqlTypes.NpgsqlDbType.TsVector = 45 -> NpgsqlTypes.NpgsqlDbType
NpgsqlTypes.NpgsqlDbType.Unknown = 40 -> NpgsqlTypes.NpgsqlDbType
NpgsqlTypes.NpgsqlDbType.Uuid = 27 -> NpgsqlTypes.NpgsqlDbType
NpgsqlTypes.NpgsqlDbType.Varbit = 39 -> NpgsqlTypes.NpgsqlDbType
NpgsqlTypes.NpgsqlDbType.Varchar = 22 -> NpgsqlTypes.NpgsqlDbType
NpgsqlTypes.NpgsqlDbType.Xid = 42 -> NpgsqlTypes.NpgsqlDbType
NpgsqlTypes.NpgsqlDbType.Xml = 28 -> NpgsqlTypes.NpgsqlDbType
NpgsqlTypes.NpgsqlInet
NpgsqlTypes.NpgsqlInet.Address.get -> System.Net.IPAddress!
NpgsqlTypes.NpgsqlInet.Address.set -> void
NpgsqlTypes.NpgsqlInet.Deconstruct(out System.Net.IPAddress! address, out int netmask) -> void
NpgsqlTypes.NpgsqlInet.Equals(NpgsqlTypes.NpgsqlInet other) -> bool
NpgsqlTypes.NpgsqlInet.Netmask.get -> int
NpgsqlTypes.NpgsqlInet.Netmask.set -> void
NpgsqlTypes.NpgsqlInet.NpgsqlInet() -> void
NpgsqlTypes.NpgsqlInet.NpgsqlInet(string! addr) -> void
NpgsqlTypes.NpgsqlInet.NpgsqlInet(System.Net.IPAddress! address) -> void
NpgsqlTypes.NpgsqlInet.NpgsqlInet(System.Net.IPAddress! address, int netmask) -> void
NpgsqlTypes.NpgsqlLine
NpgsqlTypes.NpgsqlLine.A.get -> double
NpgsqlTypes.NpgsqlLine.A.set -> void
NpgsqlTypes.NpgsqlLine.B.get -> double
NpgsqlTypes.NpgsqlLine.B.set -> void
NpgsqlTypes.NpgsqlLine.C.get -> double
NpgsqlTypes.NpgsqlLine.C.set -> void
NpgsqlTypes.NpgsqlLine.Equals(NpgsqlTypes.NpgsqlLine other) -> bool
NpgsqlTypes.NpgsqlLine.NpgsqlLine() -> void
NpgsqlTypes.NpgsqlLine.NpgsqlLine(double a, double b, double c) -> void
NpgsqlTypes.NpgsqlLogSequenceNumber
NpgsqlTypes.NpgsqlLogSequenceNumber.CompareTo(NpgsqlTypes.NpgsqlLogSequenceNumber value) -> int
NpgsqlTypes.NpgsqlLogSequenceNumber.Equals(NpgsqlTypes.NpgsqlLogSequenceNumber other) -> bool
NpgsqlTypes.NpgsqlLogSequenceNumber.NpgsqlLogSequenceNumber() -> void
NpgsqlTypes.NpgsqlLogSequenceNumber.NpgsqlLogSequenceNumber(ulong value) -> void
NpgsqlTypes.NpgsqlLSeg
NpgsqlTypes.NpgsqlLSeg.End.get -> NpgsqlTypes.NpgsqlPoint
NpgsqlTypes.NpgsqlLSeg.End.set -> void
NpgsqlTypes.NpgsqlLSeg.Equals(NpgsqlTypes.NpgsqlLSeg other) -> bool
NpgsqlTypes.NpgsqlLSeg.NpgsqlLSeg() -> void
NpgsqlTypes.NpgsqlLSeg.NpgsqlLSeg(double startx, double starty, double endx, double endy) -> void
NpgsqlTypes.NpgsqlLSeg.NpgsqlLSeg(NpgsqlTypes.NpgsqlPoint start, NpgsqlTypes.NpgsqlPoint end) -> void
NpgsqlTypes.NpgsqlLSeg.Start.get -> NpgsqlTypes.NpgsqlPoint
NpgsqlTypes.NpgsqlLSeg.Start.set -> void
NpgsqlTypes.NpgsqlPath
NpgsqlTypes.NpgsqlPath.Add(NpgsqlTypes.NpgsqlPoint item) -> void
NpgsqlTypes.NpgsqlPath.Capacity.get -> int
NpgsqlTypes.NpgsqlPath.Clear() -> void
NpgsqlTypes.NpgsqlPath.Contains(NpgsqlTypes.NpgsqlPoint item) -> bool
NpgsqlTypes.NpgsqlPath.CopyTo(NpgsqlTypes.NpgsqlPoint[]! array, int arrayIndex) -> void
NpgsqlTypes.NpgsqlPath.Count.get -> int
NpgsqlTypes.NpgsqlPath.Equals(NpgsqlTypes.NpgsqlPath other) -> bool
NpgsqlTypes.NpgsqlPath.GetEnumerator() -> System.Collections.Generic.IEnumerator<NpgsqlTypes.NpgsqlPoint>!
NpgsqlTypes.NpgsqlPath.IndexOf(NpgsqlTypes.NpgsqlPoint item) -> int
NpgsqlTypes.NpgsqlPath.Insert(int index, NpgsqlTypes.NpgsqlPoint item) -> void
NpgsqlTypes.NpgsqlPath.IsReadOnly.get -> bool
NpgsqlTypes.NpgsqlPath.NpgsqlPath() -> void
NpgsqlTypes.NpgsqlPath.NpgsqlPath(bool open) -> void
NpgsqlTypes.NpgsqlPath.NpgsqlPath(int capacity) -> void
NpgsqlTypes.NpgsqlPath.NpgsqlPath(int capacity, bool open) -> void
NpgsqlTypes.NpgsqlPath.NpgsqlPath(params NpgsqlTypes.NpgsqlPoint[]! points) -> void
NpgsqlTypes.NpgsqlPath.NpgsqlPath(System.Collections.Generic.IEnumerable<NpgsqlTypes.NpgsqlPoint>! points) -> void
NpgsqlTypes.NpgsqlPath.NpgsqlPath(System.Collections.Generic.IEnumerable<NpgsqlTypes.NpgsqlPoint>! points, bool open) -> void
NpgsqlTypes.NpgsqlPath.Open.get -> bool
NpgsqlTypes.NpgsqlPath.Open.set -> void
NpgsqlTypes.NpgsqlPath.Remove(NpgsqlTypes.NpgsqlPoint item) -> bool
NpgsqlTypes.NpgsqlPath.RemoveAt(int index) -> void
NpgsqlTypes.NpgsqlPath.this[int index].get -> NpgsqlTypes.NpgsqlPoint
NpgsqlTypes.NpgsqlPath.this[int index].set -> void
NpgsqlTypes.NpgsqlPoint
NpgsqlTypes.NpgsqlPoint.Equals(NpgsqlTypes.NpgsqlPoint other) -> bool
NpgsqlTypes.NpgsqlPoint.NpgsqlPoint() -> void
NpgsqlTypes.NpgsqlPoint.NpgsqlPoint(double x, double y) -> void
NpgsqlTypes.NpgsqlPoint.X.get -> double
NpgsqlTypes.NpgsqlPoint.X.set -> void
NpgsqlTypes.NpgsqlPoint.Y.get -> double
NpgsqlTypes.NpgsqlPoint.Y.set -> void
NpgsqlTypes.NpgsqlPolygon
NpgsqlTypes.NpgsqlPolygon.Add(NpgsqlTypes.NpgsqlPoint item) -> void
NpgsqlTypes.NpgsqlPolygon.Capacity.get -> int
NpgsqlTypes.NpgsqlPolygon.Clear() -> void
NpgsqlTypes.NpgsqlPolygon.Contains(NpgsqlTypes.NpgsqlPoint item) -> bool
NpgsqlTypes.NpgsqlPolygon.CopyTo(NpgsqlTypes.NpgsqlPoint[]! array, int arrayIndex) -> void
NpgsqlTypes.NpgsqlPolygon.Count.get -> int
NpgsqlTypes.NpgsqlPolygon.Equals(NpgsqlTypes.NpgsqlPolygon other) -> bool
NpgsqlTypes.NpgsqlPolygon.GetEnumerator() -> System.Collections.Generic.IEnumerator<NpgsqlTypes.NpgsqlPoint>!
NpgsqlTypes.NpgsqlPolygon.IndexOf(NpgsqlTypes.NpgsqlPoint item) -> int
NpgsqlTypes.NpgsqlPolygon.Insert(int index, NpgsqlTypes.NpgsqlPoint item) -> void
NpgsqlTypes.NpgsqlPolygon.IsReadOnly.get -> bool
NpgsqlTypes.NpgsqlPolygon.NpgsqlPolygon() -> void
NpgsqlTypes.NpgsqlPolygon.NpgsqlPolygon(int capacity) -> void
NpgsqlTypes.NpgsqlPolygon.NpgsqlPolygon(params NpgsqlTypes.NpgsqlPoint[]! points) -> void
NpgsqlTypes.NpgsqlPolygon.NpgsqlPolygon(System.Collections.Generic.IEnumerable<NpgsqlTypes.NpgsqlPoint>! points) -> void
NpgsqlTypes.NpgsqlPolygon.Remove(NpgsqlTypes.NpgsqlPoint item) -> bool
NpgsqlTypes.NpgsqlPolygon.RemoveAt(int index) -> void
NpgsqlTypes.NpgsqlPolygon.this[int index].get -> NpgsqlTypes.NpgsqlPoint
NpgsqlTypes.NpgsqlPolygon.this[int index].set -> void
NpgsqlTypes.NpgsqlRange<T>
NpgsqlTypes.NpgsqlRange<T>.Equals(NpgsqlTypes.NpgsqlRange<T> other) -> bool
NpgsqlTypes.NpgsqlRange<T>.IsEmpty.get -> bool
NpgsqlTypes.NpgsqlRange<T>.LowerBound.get -> T
NpgsqlTypes.NpgsqlRange<T>.LowerBoundInfinite.get -> bool
NpgsqlTypes.NpgsqlRange<T>.LowerBoundIsInclusive.get -> bool
NpgsqlTypes.NpgsqlRange<T>.NpgsqlRange() -> void
NpgsqlTypes.NpgsqlRange<T>.NpgsqlRange(T lowerBound, bool lowerBoundIsInclusive, bool lowerBoundInfinite, T upperBound, bool upperBoundIsInclusive, bool upperBoundInfinite) -> void
NpgsqlTypes.NpgsqlRange<T>.NpgsqlRange(T lowerBound, bool lowerBoundIsInclusive, T upperBound, bool upperBoundIsInclusive) -> void
NpgsqlTypes.NpgsqlRange<T>.NpgsqlRange(T lowerBound, T upperBound) -> void
NpgsqlTypes.NpgsqlRange<T>.RangeTypeConverter
NpgsqlTypes.NpgsqlRange<T>.RangeTypeConverter.RangeTypeConverter() -> void
NpgsqlTypes.NpgsqlRange<T>.UpperBound.get -> T
NpgsqlTypes.NpgsqlRange<T>.UpperBoundInfinite.get -> bool
NpgsqlTypes.NpgsqlRange<T>.UpperBoundIsInclusive.get -> bool
NpgsqlTypes.NpgsqlTid
NpgsqlTypes.NpgsqlTid.BlockNumber.get -> uint
NpgsqlTypes.NpgsqlTid.Equals(NpgsqlTypes.NpgsqlTid other) -> bool
NpgsqlTypes.NpgsqlTid.NpgsqlTid() -> void
NpgsqlTypes.NpgsqlTid.NpgsqlTid(uint blockNumber, ushort offsetNumber) -> void
NpgsqlTypes.NpgsqlTid.OffsetNumber.get -> ushort
NpgsqlTypes.NpgsqlTimeSpan
NpgsqlTypes.NpgsqlTimeSpan.Add(in NpgsqlTypes.NpgsqlTimeSpan interval) -> NpgsqlTypes.NpgsqlTimeSpan
NpgsqlTypes.NpgsqlTimeSpan.Canonicalize() -> NpgsqlTypes.NpgsqlTimeSpan
NpgsqlTypes.NpgsqlTimeSpan.CompareTo(NpgsqlTypes.NpgsqlTimeSpan other) -> int
NpgsqlTypes.NpgsqlTimeSpan.CompareTo(object? other) -> int
NpgsqlTypes.NpgsqlTimeSpan.Days.get -> int
NpgsqlTypes.NpgsqlTimeSpan.Duration() -> NpgsqlTypes.NpgsqlTimeSpan
NpgsqlTypes.NpgsqlTimeSpan.Equals(NpgsqlTypes.NpgsqlTimeSpan other) -> bool
NpgsqlTypes.NpgsqlTimeSpan.Hours.get -> int
NpgsqlTypes.NpgsqlTimeSpan.JustifyDays() -> NpgsqlTypes.NpgsqlTimeSpan
NpgsqlTypes.NpgsqlTimeSpan.JustifyInterval() -> NpgsqlTypes.NpgsqlTimeSpan
NpgsqlTypes.NpgsqlTimeSpan.JustifyMonths() -> NpgsqlTypes.NpgsqlTimeSpan
NpgsqlTypes.NpgsqlTimeSpan.Microseconds.get -> int
NpgsqlTypes.NpgsqlTimeSpan.Milliseconds.get -> int
NpgsqlTypes.NpgsqlTimeSpan.Minutes.get -> int
NpgsqlTypes.NpgsqlTimeSpan.Months.get -> int
NpgsqlTypes.NpgsqlTimeSpan.Negate() -> NpgsqlTypes.NpgsqlTimeSpan
NpgsqlTypes.NpgsqlTimeSpan.NpgsqlTimeSpan() -> void
NpgsqlTypes.NpgsqlTimeSpan.NpgsqlTimeSpan(int days, int hours, int minutes, int seconds) -> void
NpgsqlTypes.NpgsqlTimeSpan.NpgsqlTimeSpan(int days, int hours, int minutes, int seconds, int milliseconds) -> void
NpgsqlTypes.NpgsqlTimeSpan.NpgsqlTimeSpan(int months, int days, int hours, int minutes, int seconds, int milliseconds) -> void
NpgsqlTypes.NpgsqlTimeSpan.NpgsqlTimeSpan(int months, int days, long ticks) -> void
NpgsqlTypes.NpgsqlTimeSpan.NpgsqlTimeSpan(int years, int months, int days, int hours, int minutes, int seconds, int milliseconds) -> void
NpgsqlTypes.NpgsqlTimeSpan.NpgsqlTimeSpan(long ticks) -> void
NpgsqlTypes.NpgsqlTimeSpan.NpgsqlTimeSpan(System.TimeSpan timespan) -> void
NpgsqlTypes.NpgsqlTimeSpan.Seconds.get -> int
NpgsqlTypes.NpgsqlTimeSpan.Subtract(in NpgsqlTypes.NpgsqlTimeSpan interval) -> NpgsqlTypes.NpgsqlTimeSpan
NpgsqlTypes.NpgsqlTimeSpan.Ticks.get -> long
NpgsqlTypes.NpgsqlTimeSpan.Time.get -> System.TimeSpan
NpgsqlTypes.NpgsqlTimeSpan.TotalDays.get -> double
NpgsqlTypes.NpgsqlTimeSpan.TotalHours.get -> double
NpgsqlTypes.NpgsqlTimeSpan.TotalMicroseconds.get -> double
NpgsqlTypes.NpgsqlTimeSpan.TotalMilliseconds.get -> double
NpgsqlTypes.NpgsqlTimeSpan.TotalMinutes.get -> double
NpgsqlTypes.NpgsqlTimeSpan.TotalMonths.get -> double
NpgsqlTypes.NpgsqlTimeSpan.TotalSeconds.get -> double
NpgsqlTypes.NpgsqlTimeSpan.TotalTicks.get -> long
NpgsqlTypes.NpgsqlTimeSpan.UnjustifyDays() -> NpgsqlTypes.NpgsqlTimeSpan
NpgsqlTypes.NpgsqlTimeSpan.UnjustifyInterval() -> NpgsqlTypes.NpgsqlTimeSpan
NpgsqlTypes.NpgsqlTimeSpan.UnjustifyMonths() -> NpgsqlTypes.NpgsqlTimeSpan
NpgsqlTypes.NpgsqlTsQuery
NpgsqlTypes.NpgsqlTsQuery.Kind.get -> NpgsqlTypes.NpgsqlTsQuery.NodeKind
NpgsqlTypes.NpgsqlTsQuery.NodeKind
NpgsqlTypes.NpgsqlTsQuery.NodeKind.And = 2 -> NpgsqlTypes.NpgsqlTsQuery.NodeKind
NpgsqlTypes.NpgsqlTsQuery.NodeKind.Empty = -1 -> NpgsqlTypes.NpgsqlTsQuery.NodeKind
NpgsqlTypes.NpgsqlTsQuery.NodeKind.Lexeme = 0 -> NpgsqlTypes.NpgsqlTsQuery.NodeKind
NpgsqlTypes.NpgsqlTsQuery.NodeKind.Not = 1 -> NpgsqlTypes.NpgsqlTsQuery.NodeKind
NpgsqlTypes.NpgsqlTsQuery.NodeKind.Or = 3 -> NpgsqlTypes.NpgsqlTsQuery.NodeKind
NpgsqlTypes.NpgsqlTsQuery.NodeKind.Phrase = 4 -> NpgsqlTypes.NpgsqlTsQuery.NodeKind
NpgsqlTypes.NpgsqlTsQuery.NpgsqlTsQuery(NpgsqlTypes.NpgsqlTsQuery.NodeKind kind) -> void
NpgsqlTypes.NpgsqlTsQueryAnd
NpgsqlTypes.NpgsqlTsQueryAnd.NpgsqlTsQueryAnd(NpgsqlTypes.NpgsqlTsQuery! left, NpgsqlTypes.NpgsqlTsQuery! right) -> void
NpgsqlTypes.NpgsqlTsQueryBinOp
NpgsqlTypes.NpgsqlTsQueryBinOp.Left.get -> NpgsqlTypes.NpgsqlTsQuery!
NpgsqlTypes.NpgsqlTsQueryBinOp.Left.set -> void
NpgsqlTypes.NpgsqlTsQueryBinOp.NpgsqlTsQueryBinOp(NpgsqlTypes.NpgsqlTsQuery.NodeKind kind, NpgsqlTypes.NpgsqlTsQuery! left, NpgsqlTypes.NpgsqlTsQuery! right) -> void
NpgsqlTypes.NpgsqlTsQueryBinOp.Right.get -> NpgsqlTypes.NpgsqlTsQuery!
NpgsqlTypes.NpgsqlTsQueryBinOp.Right.set -> void
NpgsqlTypes.NpgsqlTsQueryEmpty
NpgsqlTypes.NpgsqlTsQueryEmpty.NpgsqlTsQueryEmpty() -> void
NpgsqlTypes.NpgsqlTsQueryFollowedBy
NpgsqlTypes.NpgsqlTsQueryFollowedBy.Distance.get -> int
NpgsqlTypes.NpgsqlTsQueryFollowedBy.Distance.set -> void
NpgsqlTypes.NpgsqlTsQueryFollowedBy.NpgsqlTsQueryFollowedBy(NpgsqlTypes.NpgsqlTsQuery! left, int distance, NpgsqlTypes.NpgsqlTsQuery! right) -> void
NpgsqlTypes.NpgsqlTsQueryLexeme
NpgsqlTypes.NpgsqlTsQueryLexeme.IsPrefixSearch.get -> bool
NpgsqlTypes.NpgsqlTsQueryLexeme.IsPrefixSearch.set -> void
NpgsqlTypes.NpgsqlTsQueryLexeme.NpgsqlTsQueryLexeme(string! text) -> void
NpgsqlTypes.NpgsqlTsQueryLexeme.NpgsqlTsQueryLexeme(string! text, NpgsqlTypes.NpgsqlTsQueryLexeme.Weight weights) -> void
NpgsqlTypes.NpgsqlTsQueryLexeme.NpgsqlTsQueryLexeme(string! text, NpgsqlTypes.NpgsqlTsQueryLexeme.Weight weights, bool isPrefixSearch) -> void
NpgsqlTypes.NpgsqlTsQueryLexeme.Text.get -> string!
NpgsqlTypes.NpgsqlTsQueryLexeme.Text.set -> void
NpgsqlTypes.NpgsqlTsQueryLexeme.Weight
NpgsqlTypes.NpgsqlTsQueryLexeme.Weight.A = 8 -> NpgsqlTypes.NpgsqlTsQueryLexeme.Weight
NpgsqlTypes.NpgsqlTsQueryLexeme.Weight.B = 4 -> NpgsqlTypes.NpgsqlTsQueryLexeme.Weight
NpgsqlTypes.NpgsqlTsQueryLexeme.Weight.C = 2 -> NpgsqlTypes.NpgsqlTsQueryLexeme.Weight
NpgsqlTypes.NpgsqlTsQueryLexeme.Weight.D = 1 -> NpgsqlTypes.NpgsqlTsQueryLexeme.Weight
NpgsqlTypes.NpgsqlTsQueryLexeme.Weight.None = 0 -> NpgsqlTypes.NpgsqlTsQueryLexeme.Weight
NpgsqlTypes.NpgsqlTsQueryLexeme.Weights.get -> NpgsqlTypes.NpgsqlTsQueryLexeme.Weight
NpgsqlTypes.NpgsqlTsQueryLexeme.Weights.set -> void
NpgsqlTypes.NpgsqlTsQueryNot
NpgsqlTypes.NpgsqlTsQueryNot.Child.get -> NpgsqlTypes.NpgsqlTsQuery?
NpgsqlTypes.NpgsqlTsQueryNot.Child.set -> void
NpgsqlTypes.NpgsqlTsQueryNot.NpgsqlTsQueryNot(NpgsqlTypes.NpgsqlTsQuery? child) -> void
NpgsqlTypes.NpgsqlTsQueryOr
NpgsqlTypes.NpgsqlTsQueryOr.NpgsqlTsQueryOr(NpgsqlTypes.NpgsqlTsQuery! left, NpgsqlTypes.NpgsqlTsQuery! right) -> void
NpgsqlTypes.NpgsqlTsVector
NpgsqlTypes.NpgsqlTsVector.Count.get -> int
NpgsqlTypes.NpgsqlTsVector.GetEnumerator() -> System.Collections.Generic.IEnumerator<NpgsqlTypes.NpgsqlTsVector.Lexeme>!
NpgsqlTypes.NpgsqlTsVector.Lexeme
NpgsqlTypes.NpgsqlTsVector.Lexeme.Count.get -> int
NpgsqlTypes.NpgsqlTsVector.Lexeme.Equals(NpgsqlTypes.NpgsqlTsVector.Lexeme o) -> bool
NpgsqlTypes.NpgsqlTsVector.Lexeme.Lexeme() -> void
NpgsqlTypes.NpgsqlTsVector.Lexeme.Lexeme(string! text) -> void
NpgsqlTypes.NpgsqlTsVector.Lexeme.Lexeme(string! text, System.Collections.Generic.List<NpgsqlTypes.NpgsqlTsVector.Lexeme.WordEntryPos>? wordEntryPositions) -> void
NpgsqlTypes.NpgsqlTsVector.Lexeme.Text.get -> string!
NpgsqlTypes.NpgsqlTsVector.Lexeme.Text.set -> void
NpgsqlTypes.NpgsqlTsVector.Lexeme.this[int index].get -> NpgsqlTypes.NpgsqlTsVector.Lexeme.WordEntryPos
NpgsqlTypes.NpgsqlTsVector.Lexeme.Weight
NpgsqlTypes.NpgsqlTsVector.Lexeme.Weight.A = 3 -> NpgsqlTypes.NpgsqlTsVector.Lexeme.Weight
NpgsqlTypes.NpgsqlTsVector.Lexeme.Weight.B = 2 -> NpgsqlTypes.NpgsqlTsVector.Lexeme.Weight
NpgsqlTypes.NpgsqlTsVector.Lexeme.Weight.C = 1 -> NpgsqlTypes.NpgsqlTsVector.Lexeme.Weight
NpgsqlTypes.NpgsqlTsVector.Lexeme.Weight.D = 0 -> NpgsqlTypes.NpgsqlTsVector.Lexeme.Weight
NpgsqlTypes.NpgsqlTsVector.Lexeme.WordEntryPos
NpgsqlTypes.NpgsqlTsVector.Lexeme.WordEntryPos.Equals(NpgsqlTypes.NpgsqlTsVector.Lexeme.WordEntryPos o) -> bool
NpgsqlTypes.NpgsqlTsVector.Lexeme.WordEntryPos.Pos.get -> int
NpgsqlTypes.NpgsqlTsVector.Lexeme.WordEntryPos.Weight.get -> NpgsqlTypes.NpgsqlTsVector.Lexeme.Weight
NpgsqlTypes.NpgsqlTsVector.Lexeme.WordEntryPos.WordEntryPos() -> void
NpgsqlTypes.NpgsqlTsVector.Lexeme.WordEntryPos.WordEntryPos(int pos, NpgsqlTypes.NpgsqlTsVector.Lexeme.Weight weight = NpgsqlTypes.NpgsqlTsVector.Lexeme.Weight.D) -> void
NpgsqlTypes.NpgsqlTsVector.this[int index].get -> NpgsqlTypes.NpgsqlTsVector.Lexeme
NpgsqlTypes.PgNameAttribute
NpgsqlTypes.PgNameAttribute.PgName.get -> string!
NpgsqlTypes.PgNameAttribute.PgNameAttribute(string! pgName) -> void
override Npgsql.BackendMessages.FieldDescription.ToString() -> string!
override Npgsql.NpgsqlCommand.Cancel() -> void
override Npgsql.NpgsqlCommand.CommandText.get -> string!
override Npgsql.NpgsqlCommand.CommandText.set -> void
override Npgsql.NpgsqlCommand.CommandTimeout.get -> int
override Npgsql.NpgsqlCommand.CommandTimeout.set -> void
override Npgsql.NpgsqlCommand.CommandType.get -> System.Data.CommandType
override Npgsql.NpgsqlCommand.CommandType.set -> void
override Npgsql.NpgsqlCommand.DesignTimeVisible.get -> bool
override Npgsql.NpgsqlCommand.DesignTimeVisible.set -> void
override Npgsql.NpgsqlCommand.ExecuteNonQuery() -> int
override Npgsql.NpgsqlCommand.ExecuteNonQueryAsync(System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<int>!
override Npgsql.NpgsqlCommand.ExecuteScalar() -> object?
override Npgsql.NpgsqlCommand.ExecuteScalarAsync(System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<object?>!
override Npgsql.NpgsqlCommand.Prepare() -> void
override Npgsql.NpgsqlCommand.PrepareAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
override Npgsql.NpgsqlCommand.UpdatedRowSource.get -> System.Data.UpdateRowSource
override Npgsql.NpgsqlCommand.UpdatedRowSource.set -> void
override Npgsql.NpgsqlCommandBuilder.QuoteIdentifier(string! unquotedIdentifier) -> string!
override Npgsql.NpgsqlCommandBuilder.QuotePrefix.get -> string!
override Npgsql.NpgsqlCommandBuilder.QuotePrefix.set -> void
override Npgsql.NpgsqlCommandBuilder.QuoteSuffix.get -> string!
override Npgsql.NpgsqlCommandBuilder.QuoteSuffix.set -> void
override Npgsql.NpgsqlCommandBuilder.UnquoteIdentifier(string! quotedIdentifier) -> string!
override Npgsql.NpgsqlConnection.ChangeDatabase(string! dbName) -> void
override Npgsql.NpgsqlConnection.Close() -> void
override Npgsql.NpgsqlConnection.CloseAsync() -> System.Threading.Tasks.Task!
override Npgsql.NpgsqlConnection.ConnectionString.get -> string!
override Npgsql.NpgsqlConnection.ConnectionString.set -> void
override Npgsql.NpgsqlConnection.ConnectionTimeout.get -> int
override Npgsql.NpgsqlConnection.Database.get -> string!
override Npgsql.NpgsqlConnection.DataSource.get -> string!
override Npgsql.NpgsqlConnection.DisposeAsync() -> System.Threading.Tasks.ValueTask
override Npgsql.NpgsqlConnection.EnlistTransaction(System.Transactions.Transaction? transaction) -> void
override Npgsql.NpgsqlConnection.GetSchema() -> System.Data.DataTable!
override Npgsql.NpgsqlConnection.GetSchema(string? collectionName) -> System.Data.DataTable!
override Npgsql.NpgsqlConnection.GetSchema(string? collectionName, string?[]? restrictions) -> System.Data.DataTable!
override Npgsql.NpgsqlConnection.GetSchemaAsync(string! collectionName, string?[]? restrictions, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<System.Data.DataTable!>!
override Npgsql.NpgsqlConnection.GetSchemaAsync(string! collectionName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<System.Data.DataTable!>!
override Npgsql.NpgsqlConnection.GetSchemaAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<System.Data.DataTable!>!
override Npgsql.NpgsqlConnection.Open() -> void
override Npgsql.NpgsqlConnection.OpenAsync(System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task!
override Npgsql.NpgsqlConnection.ServerVersion.get -> string!
override Npgsql.NpgsqlConnection.State.get -> System.Data.ConnectionState
override Npgsql.NpgsqlConnectionStringBuilder.Clear() -> void
override Npgsql.NpgsqlConnectionStringBuilder.ContainsKey(string! keyword) -> bool
override Npgsql.NpgsqlConnectionStringBuilder.Equals(object? obj) -> bool
override Npgsql.NpgsqlConnectionStringBuilder.GetHashCode() -> int
override Npgsql.NpgsqlConnectionStringBuilder.Remove(string! keyword) -> bool
override Npgsql.NpgsqlConnectionStringBuilder.this[string! keyword].get -> object!
override Npgsql.NpgsqlConnectionStringBuilder.this[string! keyword].set -> void
override Npgsql.NpgsqlConnectionStringBuilder.TryGetValue(string! keyword, out object? value) -> bool
override Npgsql.NpgsqlDataReader.Close() -> void
override Npgsql.NpgsqlDataReader.CloseAsync() -> System.Threading.Tasks.Task!
override Npgsql.NpgsqlDataReader.Depth.get -> int
override Npgsql.NpgsqlDataReader.DisposeAsync() -> System.Threading.Tasks.ValueTask
override Npgsql.NpgsqlDataReader.FieldCount.get -> int
override Npgsql.NpgsqlDataReader.GetBoolean(int ordinal) -> bool
override Npgsql.NpgsqlDataReader.GetByte(int ordinal) -> byte
override Npgsql.NpgsqlDataReader.GetBytes(int ordinal, long dataOffset, byte[]? buffer, int bufferOffset, int length) -> long
override Npgsql.NpgsqlDataReader.GetChar(int ordinal) -> char
override Npgsql.NpgsqlDataReader.GetChars(int ordinal, long dataOffset, char[]? buffer, int bufferOffset, int length) -> long
override Npgsql.NpgsqlDataReader.GetDataTypeName(int ordinal) -> string!
override Npgsql.NpgsqlDataReader.GetDateTime(int ordinal) -> System.DateTime
override Npgsql.NpgsqlDataReader.GetDecimal(int ordinal) -> decimal
override Npgsql.NpgsqlDataReader.GetDouble(int ordinal) -> double
override Npgsql.NpgsqlDataReader.GetEnumerator() -> System.Collections.IEnumerator!
override Npgsql.NpgsqlDataReader.GetFieldType(int ordinal) -> System.Type!
override Npgsql.NpgsqlDataReader.GetFieldValue<T>(int ordinal) -> T
override Npgsql.NpgsqlDataReader.GetFieldValueAsync<T>(int ordinal, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<T>!
override Npgsql.NpgsqlDataReader.GetFloat(int ordinal) -> float
override Npgsql.NpgsqlDataReader.GetGuid(int ordinal) -> System.Guid
override Npgsql.NpgsqlDataReader.GetInt16(int ordinal) -> short
override Npgsql.NpgsqlDataReader.GetInt32(int ordinal) -> int
override Npgsql.NpgsqlDataReader.GetInt64(int ordinal) -> long
override Npgsql.NpgsqlDataReader.GetName(int ordinal) -> string!
override Npgsql.NpgsqlDataReader.GetOrdinal(string! name) -> int
override Npgsql.NpgsqlDataReader.GetProviderSpecificFieldType(int ordinal) -> System.Type!
override Npgsql.NpgsqlDataReader.GetProviderSpecificValue(int ordinal) -> object!
override Npgsql.NpgsqlDataReader.GetProviderSpecificValues(object![]! values) -> int
override Npgsql.NpgsqlDataReader.GetSchemaTable() -> System.Data.DataTable?
override Npgsql.NpgsqlDataReader.GetSchemaTableAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<System.Data.DataTable?>!
override Npgsql.NpgsqlDataReader.GetStream(int ordinal) -> System.IO.Stream!
override Npgsql.NpgsqlDataReader.GetString(int ordinal) -> string!
override Npgsql.NpgsqlDataReader.GetTextReader(int ordinal) -> System.IO.TextReader!
override Npgsql.NpgsqlDataReader.GetValue(int ordinal) -> object!
override Npgsql.NpgsqlDataReader.GetValues(object![]! values) -> int
override Npgsql.NpgsqlDataReader.HasRows.get -> bool
override Npgsql.NpgsqlDataReader.IsClosed.get -> bool
override Npgsql.NpgsqlDataReader.IsDBNull(int ordinal) -> bool
override Npgsql.NpgsqlDataReader.IsDBNullAsync(int ordinal, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<bool>!
override Npgsql.NpgsqlDataReader.NextResult() -> bool
override Npgsql.NpgsqlDataReader.NextResultAsync(System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<bool>!
override Npgsql.NpgsqlDataReader.Read() -> bool
override Npgsql.NpgsqlDataReader.ReadAsync(System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<bool>!
override Npgsql.NpgsqlDataReader.RecordsAffected.get -> int
override Npgsql.NpgsqlDataReader.this[int ordinal].get -> object!
override Npgsql.NpgsqlDataReader.this[string! name].get -> object!
override Npgsql.NpgsqlException.IsTransient.get -> bool
override Npgsql.NpgsqlFactory.CanCreateCommandBuilder.get -> bool
override Npgsql.NpgsqlFactory.CanCreateDataAdapter.get -> bool
override Npgsql.NpgsqlFactory.CreateCommand() -> System.Data.Common.DbCommand!
override Npgsql.NpgsqlFactory.CreateCommandBuilder() -> System.Data.Common.DbCommandBuilder!
override Npgsql.NpgsqlFactory.CreateConnection() -> System.Data.Common.DbConnection!
override Npgsql.NpgsqlFactory.CreateConnectionStringBuilder() -> System.Data.Common.DbConnectionStringBuilder!
override Npgsql.NpgsqlFactory.CreateDataAdapter() -> System.Data.Common.DbDataAdapter!
override Npgsql.NpgsqlFactory.CreateParameter() -> System.Data.Common.DbParameter!
override Npgsql.NpgsqlLargeObjectStream.CanRead.get -> bool
override Npgsql.NpgsqlLargeObjectStream.CanSeek.get -> bool
override Npgsql.NpgsqlLargeObjectStream.CanTimeout.get -> bool
override Npgsql.NpgsqlLargeObjectStream.CanWrite.get -> bool
override Npgsql.NpgsqlLargeObjectStream.Close() -> void
override Npgsql.NpgsqlLargeObjectStream.Flush() -> void
override Npgsql.NpgsqlLargeObjectStream.Length.get -> long
override Npgsql.NpgsqlLargeObjectStream.Position.get -> long
override Npgsql.NpgsqlLargeObjectStream.Position.set -> void
override Npgsql.NpgsqlLargeObjectStream.Read(byte[]! buffer, int offset, int count) -> int
override Npgsql.NpgsqlLargeObjectStream.ReadAsync(byte[]! buffer, int offset, int count, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<int>!
override Npgsql.NpgsqlLargeObjectStream.Seek(long offset, System.IO.SeekOrigin origin) -> long
override Npgsql.NpgsqlLargeObjectStream.SetLength(long value) -> void
override Npgsql.NpgsqlLargeObjectStream.Write(byte[]! buffer, int offset, int count) -> void
override Npgsql.NpgsqlLargeObjectStream.WriteAsync(byte[]! buffer, int offset, int count, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task!
override Npgsql.NpgsqlParameter.ResetDbType() -> void
override Npgsql.NpgsqlParameter.Value.get -> object?
override Npgsql.NpgsqlParameter.Value.set -> void
override Npgsql.NpgsqlParameter<T>.Value.get -> object?
override Npgsql.NpgsqlParameter<T>.Value.set -> void
override Npgsql.NpgsqlParameterCollection.Add(object! value) -> int
override Npgsql.NpgsqlParameterCollection.AddRange(System.Array! values) -> void
override Npgsql.NpgsqlParameterCollection.Clear() -> void
override Npgsql.NpgsqlParameterCollection.Contains(object! value) -> bool
override Npgsql.NpgsqlParameterCollection.Contains(string! parameterName) -> bool
override Npgsql.NpgsqlParameterCollection.CopyTo(System.Array! array, int index) -> void
override Npgsql.NpgsqlParameterCollection.Count.get -> int
override Npgsql.NpgsqlParameterCollection.GetEnumerator() -> System.Collections.IEnumerator!
override Npgsql.NpgsqlParameterCollection.IndexOf(object! value) -> int
override Npgsql.NpgsqlParameterCollection.IndexOf(string! parameterName) -> int
override Npgsql.NpgsqlParameterCollection.Insert(int index, object! value) -> void
override Npgsql.NpgsqlParameterCollection.IsFixedSize.get -> bool
override Npgsql.NpgsqlParameterCollection.IsReadOnly.get -> bool
override Npgsql.NpgsqlParameterCollection.IsSynchronized.get -> bool
override Npgsql.NpgsqlParameterCollection.Remove(object! value) -> void
override Npgsql.NpgsqlParameterCollection.RemoveAt(int index) -> void
override Npgsql.NpgsqlParameterCollection.RemoveAt(string! parameterName) -> void
override Npgsql.NpgsqlParameterCollection.SyncRoot.get -> object!
override Npgsql.NpgsqlRawCopyStream.CanRead.get -> bool
override Npgsql.NpgsqlRawCopyStream.CanSeek.get -> bool
override Npgsql.NpgsqlRawCopyStream.CanTimeout.get -> bool
override Npgsql.NpgsqlRawCopyStream.CanWrite.get -> bool
override Npgsql.NpgsqlRawCopyStream.Flush() -> void
override Npgsql.NpgsqlRawCopyStream.FlushAsync(System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task!
override Npgsql.NpgsqlRawCopyStream.Length.get -> long
override Npgsql.NpgsqlRawCopyStream.Position.get -> long
override Npgsql.NpgsqlRawCopyStream.Position.set -> void
override Npgsql.NpgsqlRawCopyStream.Read(byte[]! buffer, int offset, int count) -> int
override Npgsql.NpgsqlRawCopyStream.Read(System.Span<byte> span) -> int
override Npgsql.NpgsqlRawCopyStream.ReadAsync(byte[]! buffer, int offset, int count, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<int>!
override Npgsql.NpgsqlRawCopyStream.ReadAsync(System.Memory<byte> buffer, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.ValueTask<int>
override Npgsql.NpgsqlRawCopyStream.ReadTimeout.get -> int
override Npgsql.NpgsqlRawCopyStream.ReadTimeout.set -> void
override Npgsql.NpgsqlRawCopyStream.Seek(long offset, System.IO.SeekOrigin origin) -> long
override Npgsql.NpgsqlRawCopyStream.SetLength(long value) -> void
override Npgsql.NpgsqlRawCopyStream.Write(byte[]! buffer, int offset, int count) -> void
override Npgsql.NpgsqlRawCopyStream.Write(System.ReadOnlySpan<byte> buffer) -> void
override Npgsql.NpgsqlRawCopyStream.WriteAsync(byte[]! buffer, int offset, int count, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task!
override Npgsql.NpgsqlRawCopyStream.WriteAsync(System.ReadOnlyMemory<byte> buffer, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.ValueTask
override Npgsql.NpgsqlRawCopyStream.WriteTimeout.get -> int
override Npgsql.NpgsqlRawCopyStream.WriteTimeout.set -> void
override Npgsql.NpgsqlStatement.ToString() -> string!
override Npgsql.NpgsqlTransaction.Commit() -> void
override Npgsql.NpgsqlTransaction.CommitAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
override Npgsql.NpgsqlTransaction.DisposeAsync() -> System.Threading.Tasks.ValueTask
override Npgsql.NpgsqlTransaction.IsolationLevel.get -> System.Data.IsolationLevel
override Npgsql.NpgsqlTransaction.Release(string! name) -> void
override Npgsql.NpgsqlTransaction.ReleaseAsync(string! name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
override Npgsql.NpgsqlTransaction.Rollback() -> void
override Npgsql.NpgsqlTransaction.Rollback(string! name) -> void
override Npgsql.NpgsqlTransaction.RollbackAsync(string! name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
override Npgsql.NpgsqlTransaction.RollbackAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
override Npgsql.NpgsqlTransaction.Save(string! name) -> void
override Npgsql.NpgsqlTransaction.SaveAsync(string! name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
override Npgsql.PostgresException.GetObjectData(System.Runtime.Serialization.SerializationInfo! info, System.Runtime.Serialization.StreamingContext context) -> void
override Npgsql.PostgresException.IsTransient.get -> bool
override Npgsql.PostgresException.SqlState.get -> string!
override Npgsql.PostgresException.ToString() -> string!
override Npgsql.PostgresTypes.PostgresCompositeType.Field.ToString() -> string!
override Npgsql.PostgresTypes.PostgresType.ToString() -> string!
override Npgsql.Replication.PgOutput.Messages.BeginMessage.Clone() -> Npgsql.Replication.PgOutput.Messages.BeginMessage!
override Npgsql.Replication.PgOutput.Messages.CommitMessage.Clone() -> Npgsql.Replication.PgOutput.Messages.CommitMessage!
override Npgsql.Replication.PgOutput.Messages.FullDeleteMessage.Clone() -> Npgsql.Replication.PgOutput.Messages.FullDeleteMessage!
override Npgsql.Replication.PgOutput.Messages.FullUpdateMessage.Clone() -> Npgsql.Replication.PgOutput.Messages.FullUpdateMessage!
override Npgsql.Replication.PgOutput.Messages.IndexUpdateMessage.Clone() -> Npgsql.Replication.PgOutput.Messages.IndexUpdateMessage!
override Npgsql.Replication.PgOutput.Messages.InsertMessage.Clone() -> Npgsql.Replication.PgOutput.Messages.InsertMessage!
override Npgsql.Replication.PgOutput.Messages.KeyDeleteMessage.Clone() -> Npgsql.Replication.PgOutput.Messages.KeyDeleteMessage!
override Npgsql.Replication.PgOutput.Messages.OriginMessage.Clone() -> Npgsql.Replication.PgOutput.Messages.OriginMessage!
override Npgsql.Replication.PgOutput.Messages.PgOutputReplicationMessage.ToString() -> string!
override Npgsql.Replication.PgOutput.Messages.RelationMessage.Clone() -> Npgsql.Replication.PgOutput.Messages.RelationMessage!
override Npgsql.Replication.PgOutput.Messages.TruncateMessage.Clone() -> Npgsql.Replication.PgOutput.Messages.TruncateMessage!
override Npgsql.Replication.PgOutput.Messages.TupleData.ToString() -> string!
override Npgsql.Replication.PgOutput.Messages.TypeMessage.Clone() -> Npgsql.Replication.PgOutput.Messages.TypeMessage!
override Npgsql.Replication.PgOutput.Messages.UpdateMessage.Clone() -> Npgsql.Replication.PgOutput.Messages.UpdateMessage!
override Npgsql.Replication.PgOutput.PgOutputReplicationOptions.Equals(object? obj) -> bool
override Npgsql.Replication.PgOutput.PgOutputReplicationOptions.GetHashCode() -> int
override Npgsql.Replication.TestDecoding.TestDecodingData.ToString() -> string!
override Npgsql.Replication.TestDecoding.TestDecodingOptions.Equals(object? obj) -> bool
override Npgsql.Replication.TestDecoding.TestDecodingOptions.GetHashCode() -> int
override Npgsql.Schema.NpgsqlDbColumn.this[string! propertyName].get -> object?
override Npgsql.TypeHandlers.ArrayHandler.CreateArrayHandler(Npgsql.PostgresTypes.PostgresArrayType! arrayBackendType) -> Npgsql.TypeHandlers.ArrayHandler!
override Npgsql.TypeHandlers.ArrayHandler.CreateRangeHandler(Npgsql.PostgresTypes.PostgresType! rangeBackendType) -> Npgsql.TypeHandlers.IRangeHandler!
override Npgsql.TypeHandlers.ArrayHandler.Read<TRequestedArray>(Npgsql.NpgsqlReadBuffer! buf, int len, bool async, Npgsql.BackendMessages.FieldDescription? fieldDescription = null) -> System.Threading.Tasks.ValueTask<TRequestedArray>
override Npgsql.TypeHandlers.ArrayHandler.Read<TRequestedArray>(Npgsql.NpgsqlReadBuffer! buf, int len, Npgsql.BackendMessages.FieldDescription? fieldDescription = null) -> TRequestedArray
override Npgsql.TypeHandlers.ArrayHandler<TElement>.ValidateAndGetLength<TAny>(TAny value, ref Npgsql.NpgsqlLengthCache? lengthCache, Npgsql.NpgsqlParameter? parameter) -> int
override Npgsql.TypeHandlers.ArrayHandler<TElement>.ValidateObjectAndGetLength(object! value, ref Npgsql.NpgsqlLengthCache? lengthCache, Npgsql.NpgsqlParameter? parameter) -> int
override Npgsql.TypeHandlers.ArrayHandler<TElement>.WriteObjectWithLength(object! value, Npgsql.NpgsqlWriteBuffer! buf, Npgsql.NpgsqlLengthCache? lengthCache, Npgsql.NpgsqlParameter? parameter, bool async, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
override Npgsql.TypeHandlers.BitStringArrayHandler.Read<TRequestedArray>(Npgsql.NpgsqlReadBuffer! buf, int len, bool async, Npgsql.BackendMessages.FieldDescription? fieldDescription = null) -> System.Threading.Tasks.ValueTask<TRequestedArray>
override Npgsql.TypeHandlers.BitStringHandler.CreateArrayHandler(Npgsql.PostgresTypes.PostgresArrayType! backendType) -> Npgsql.TypeHandlers.ArrayHandler!
override Npgsql.TypeHandlers.BitStringHandler.Read(Npgsql.NpgsqlReadBuffer! buf, int len, bool async, Npgsql.BackendMessages.FieldDescription? fieldDescription = null) -> System.Threading.Tasks.ValueTask<System.Collections.BitArray!>
override Npgsql.TypeHandlers.BitStringHandler.ValidateAndGetLength(System.Collections.BitArray! value, ref Npgsql.NpgsqlLengthCache? lengthCache, Npgsql.NpgsqlParameter? parameter) -> int
override Npgsql.TypeHandlers.BitStringHandler.Write(System.Collections.BitArray! value, Npgsql.NpgsqlWriteBuffer! buf, Npgsql.NpgsqlLengthCache? lengthCache, Npgsql.NpgsqlParameter? parameter, bool async, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
override Npgsql.TypeHandlers.BoolHandler.Read(Npgsql.NpgsqlReadBuffer! buf, int len, Npgsql.BackendMessages.FieldDescription? fieldDescription = null) -> bool
override Npgsql.TypeHandlers.BoolHandler.ValidateAndGetLength(bool value, Npgsql.NpgsqlParameter? parameter) -> int
override Npgsql.TypeHandlers.BoolHandler.Write(bool value, Npgsql.NpgsqlWriteBuffer! buf, Npgsql.NpgsqlParameter? parameter) -> void
override Npgsql.TypeHandlers.ByteaHandler.Read(Npgsql.NpgsqlReadBuffer! buf, int len, bool async, Npgsql.BackendMessages.FieldDescription? fieldDescription = null) -> System.Threading.Tasks.ValueTask<byte[]!>
override Npgsql.TypeHandlers.ByteaHandler.ValidateAndGetLength(byte[]! value, ref Npgsql.NpgsqlLengthCache? lengthCache, Npgsql.NpgsqlParameter? parameter) -> int
override Npgsql.TypeHandlers.ByteaHandler.Write(byte[]! value, Npgsql.NpgsqlWriteBuffer! buf, Npgsql.NpgsqlLengthCache? lengthCache, Npgsql.NpgsqlParameter? parameter, bool async, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
override Npgsql.TypeHandlers.DateTimeHandlers.DateHandler.Read(Npgsql.NpgsqlReadBuffer! buf, int len, Npgsql.BackendMessages.FieldDescription? fieldDescription = null) -> System.DateTime
override Npgsql.TypeHandlers.DateTimeHandlers.DateHandler.ReadPsv(Npgsql.NpgsqlReadBuffer! buf, int len, Npgsql.BackendMessages.FieldDescription? fieldDescription = null) -> NpgsqlTypes.NpgsqlDate
override Npgsql.TypeHandlers.DateTimeHandlers.DateHandler.ValidateAndGetLength(NpgsqlTypes.NpgsqlDate value, Npgsql.NpgsqlParameter? parameter) -> int
override Npgsql.TypeHandlers.DateTimeHandlers.DateHandler.ValidateAndGetLength(System.DateTime value, Npgsql.NpgsqlParameter? parameter) -> int
override Npgsql.TypeHandlers.DateTimeHandlers.DateHandler.Write(NpgsqlTypes.NpgsqlDate value, Npgsql.NpgsqlWriteBuffer! buf, Npgsql.NpgsqlParameter? parameter) -> void
override Npgsql.TypeHandlers.DateTimeHandlers.DateHandler.Write(System.DateTime value, Npgsql.NpgsqlWriteBuffer! buf, Npgsql.NpgsqlParameter? parameter) -> void
override Npgsql.TypeHandlers.DateTimeHandlers.DateHandlerFactory.Create(Npgsql.PostgresTypes.PostgresType! postgresType, Npgsql.NpgsqlConnection! conn) -> Npgsql.TypeHandling.NpgsqlTypeHandler<System.DateTime>!
override Npgsql.TypeHandlers.DateTimeHandlers.IntervalHandler.Read(Npgsql.NpgsqlReadBuffer! buf, int len, Npgsql.BackendMessages.FieldDescription? fieldDescription = null) -> System.TimeSpan
override Npgsql.TypeHandlers.DateTimeHandlers.IntervalHandler.ReadPsv(Npgsql.NpgsqlReadBuffer! buf, int len, Npgsql.BackendMessages.FieldDescription? fieldDescription = null) -> NpgsqlTypes.NpgsqlTimeSpan
override Npgsql.TypeHandlers.DateTimeHandlers.IntervalHandler.ValidateAndGetLength(NpgsqlTypes.NpgsqlTimeSpan value, Npgsql.NpgsqlParameter? parameter) -> int
override Npgsql.TypeHandlers.DateTimeHandlers.IntervalHandler.ValidateAndGetLength(System.TimeSpan value, Npgsql.NpgsqlParameter? parameter) -> int
override Npgsql.TypeHandlers.DateTimeHandlers.IntervalHandler.Write(NpgsqlTypes.NpgsqlTimeSpan value, Npgsql.NpgsqlWriteBuffer! buf, Npgsql.NpgsqlParameter? parameter) -> void
override Npgsql.TypeHandlers.DateTimeHandlers.IntervalHandler.Write(System.TimeSpan value, Npgsql.NpgsqlWriteBuffer! buf, Npgsql.NpgsqlParameter? parameter) -> void
override Npgsql.TypeHandlers.DateTimeHandlers.IntervalHandlerFactory.Create(Npgsql.PostgresTypes.PostgresType! postgresType, Npgsql.NpgsqlConnection! conn) -> Npgsql.TypeHandling.NpgsqlTypeHandler<System.TimeSpan>!
override Npgsql.TypeHandlers.DateTimeHandlers.TimeHandler.Read(Npgsql.NpgsqlReadBuffer! buf, int len, Npgsql.BackendMessages.FieldDescription? fieldDescription = null) -> System.TimeSpan
override Npgsql.TypeHandlers.DateTimeHandlers.TimeHandler.ValidateAndGetLength(System.TimeSpan value, Npgsql.NpgsqlParameter? parameter) -> int
override Npgsql.TypeHandlers.DateTimeHandlers.TimeHandler.Write(System.TimeSpan value, Npgsql.NpgsqlWriteBuffer! buf, Npgsql.NpgsqlParameter? parameter) -> void
override Npgsql.TypeHandlers.DateTimeHandlers.TimeHandlerFactory.Create(Npgsql.PostgresTypes.PostgresType! postgresType, Npgsql.NpgsqlConnection! conn) -> Npgsql.TypeHandling.NpgsqlTypeHandler<System.TimeSpan>!
override Npgsql.TypeHandlers.DateTimeHandlers.TimestampHandler.Read(Npgsql.NpgsqlReadBuffer! buf, int len, Npgsql.BackendMessages.FieldDescription? fieldDescription = null) -> System.DateTime
override Npgsql.TypeHandlers.DateTimeHandlers.TimestampHandler.ReadPsv(Npgsql.NpgsqlReadBuffer! buf, int len, Npgsql.BackendMessages.FieldDescription? fieldDescription = null) -> NpgsqlTypes.NpgsqlDateTime
override Npgsql.TypeHandlers.DateTimeHandlers.TimestampHandler.ValidateAndGetLength(NpgsqlTypes.NpgsqlDateTime value, Npgsql.NpgsqlParameter? parameter) -> int
override Npgsql.TypeHandlers.DateTimeHandlers.TimestampHandler.ValidateAndGetLength(System.DateTime value, Npgsql.NpgsqlParameter? parameter) -> int
override Npgsql.TypeHandlers.DateTimeHandlers.TimestampHandler.Write(NpgsqlTypes.NpgsqlDateTime value, Npgsql.NpgsqlWriteBuffer! buf, Npgsql.NpgsqlParameter? parameter) -> void
override Npgsql.TypeHandlers.DateTimeHandlers.TimestampHandler.Write(System.DateTime value, Npgsql.NpgsqlWriteBuffer! buf, Npgsql.NpgsqlParameter? parameter) -> void
override Npgsql.TypeHandlers.DateTimeHandlers.TimestampHandlerFactory.Create(Npgsql.PostgresTypes.PostgresType! postgresType, Npgsql.NpgsqlConnection! conn) -> Npgsql.TypeHandling.NpgsqlTypeHandler<System.DateTime>!
override Npgsql.TypeHandlers.DateTimeHandlers.TimestampTzHandler.CreateRangeHandler(Npgsql.PostgresTypes.PostgresType! rangeBackendType) -> Npgsql.TypeHandlers.IRangeHandler!
override Npgsql.TypeHandlers.DateTimeHandlers.TimestampTzHandler.Read(Npgsql.NpgsqlReadBuffer! buf, int len, Npgsql.BackendMessages.FieldDescription? fieldDescription = null) -> System.DateTime
override Npgsql.TypeHandlers.DateTimeHandlers.TimestampTzHandler.ReadPsv(Npgsql.NpgsqlReadBuffer! buf, int len, Npgsql.BackendMessages.FieldDescription? fieldDescription = null) -> NpgsqlTypes.NpgsqlDateTime
override Npgsql.TypeHandlers.DateTimeHandlers.TimestampTzHandler.Write(NpgsqlTypes.NpgsqlDateTime value, Npgsql.NpgsqlWriteBuffer! buf, Npgsql.NpgsqlParameter? parameter) -> void
override Npgsql.TypeHandlers.DateTimeHandlers.TimestampTzHandler.Write(System.DateTime value, Npgsql.NpgsqlWriteBuffer! buf, Npgsql.NpgsqlParameter? parameter) -> void
override Npgsql.TypeHandlers.DateTimeHandlers.TimestampTzHandlerFactory.Create(Npgsql.PostgresTypes.PostgresType! postgresType, Npgsql.NpgsqlConnection! conn) -> Npgsql.TypeHandling.NpgsqlTypeHandler<System.DateTime>!
override Npgsql.TypeHandlers.DateTimeHandlers.TimeTzHandler.Read(Npgsql.NpgsqlReadBuffer! buf, int len, Npgsql.BackendMessages.FieldDescription? fieldDescription = null) -> System.DateTimeOffset
override Npgsql.TypeHandlers.DateTimeHandlers.TimeTzHandler.ValidateAndGetLength(System.DateTimeOffset value, Npgsql.NpgsqlParameter? parameter) -> int
override Npgsql.TypeHandlers.DateTimeHandlers.TimeTzHandler.Write(System.DateTimeOffset value, Npgsql.NpgsqlWriteBuffer! buf, Npgsql.NpgsqlParameter? parameter) -> void
override Npgsql.TypeHandlers.DateTimeHandlers.TimeTzHandlerFactory.Create(Npgsql.PostgresTypes.PostgresType! postgresType, Npgsql.NpgsqlConnection! conn) -> Npgsql.TypeHandling.NpgsqlTypeHandler<System.DateTimeOffset>!
override Npgsql.TypeHandlers.FullTextSearchHandlers.TsVectorHandler.Read(Npgsql.NpgsqlReadBuffer! buf, int len, bool async, Npgsql.BackendMessages.FieldDescription? fieldDescription = null) -> System.Threading.Tasks.ValueTask<NpgsqlTypes.NpgsqlTsVector!>
override Npgsql.TypeHandlers.FullTextSearchHandlers.TsVectorHandler.ValidateAndGetLength(NpgsqlTypes.NpgsqlTsVector! value, ref Npgsql.NpgsqlLengthCache? lengthCache, Npgsql.NpgsqlParameter? parameter) -> int
override Npgsql.TypeHandlers.FullTextSearchHandlers.TsVectorHandler.Write(NpgsqlTypes.NpgsqlTsVector! vector, Npgsql.NpgsqlWriteBuffer! buf, Npgsql.NpgsqlLengthCache? lengthCache, Npgsql.NpgsqlParameter? parameter, bool async, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
override Npgsql.TypeHandlers.GeometricHandlers.BoxHandler.Read(Npgsql.NpgsqlReadBuffer! buf, int len, Npgsql.BackendMessages.FieldDescription? fieldDescription = null) -> NpgsqlTypes.NpgsqlBox
override Npgsql.TypeHandlers.GeometricHandlers.BoxHandler.ValidateAndGetLength(NpgsqlTypes.NpgsqlBox value, Npgsql.NpgsqlParameter? parameter) -> int
override Npgsql.TypeHandlers.GeometricHandlers.BoxHandler.Write(NpgsqlTypes.NpgsqlBox value, Npgsql.NpgsqlWriteBuffer! buf, Npgsql.NpgsqlParameter? parameter) -> void
override Npgsql.TypeHandlers.GeometricHandlers.CircleHandler.Read(Npgsql.NpgsqlReadBuffer! buf, int len, Npgsql.BackendMessages.FieldDescription? fieldDescription = null) -> NpgsqlTypes.NpgsqlCircle
override Npgsql.TypeHandlers.GeometricHandlers.CircleHandler.ValidateAndGetLength(NpgsqlTypes.NpgsqlCircle value, Npgsql.NpgsqlParameter? parameter) -> int
override Npgsql.TypeHandlers.GeometricHandlers.CircleHandler.Write(NpgsqlTypes.NpgsqlCircle value, Npgsql.NpgsqlWriteBuffer! buf, Npgsql.NpgsqlParameter? parameter) -> void
override Npgsql.TypeHandlers.GeometricHandlers.LineHandler.Read(Npgsql.NpgsqlReadBuffer! buf, int len, Npgsql.BackendMessages.FieldDescription? fieldDescription = null) -> NpgsqlTypes.NpgsqlLine
override Npgsql.TypeHandlers.GeometricHandlers.LineHandler.ValidateAndGetLength(NpgsqlTypes.NpgsqlLine value, Npgsql.NpgsqlParameter? parameter) -> int
override Npgsql.TypeHandlers.GeometricHandlers.LineHandler.Write(NpgsqlTypes.NpgsqlLine value, Npgsql.NpgsqlWriteBuffer! buf, Npgsql.NpgsqlParameter? parameter) -> void
override Npgsql.TypeHandlers.GeometricHandlers.LineSegmentHandler.Read(Npgsql.NpgsqlReadBuffer! buf, int len, Npgsql.BackendMessages.FieldDescription? fieldDescription = null) -> NpgsqlTypes.NpgsqlLSeg
override Npgsql.TypeHandlers.GeometricHandlers.LineSegmentHandler.ValidateAndGetLength(NpgsqlTypes.NpgsqlLSeg value, Npgsql.NpgsqlParameter? parameter) -> int
override Npgsql.TypeHandlers.GeometricHandlers.LineSegmentHandler.Write(NpgsqlTypes.NpgsqlLSeg value, Npgsql.NpgsqlWriteBuffer! buf, Npgsql.NpgsqlParameter? parameter) -> void
override Npgsql.TypeHandlers.GeometricHandlers.PathHandler.Read(Npgsql.NpgsqlReadBuffer! buf, int len, bool async, Npgsql.BackendMessages.FieldDescription? fieldDescription = null) -> System.Threading.Tasks.ValueTask<NpgsqlTypes.NpgsqlPath>
override Npgsql.TypeHandlers.GeometricHandlers.PathHandler.ValidateAndGetLength(NpgsqlTypes.NpgsqlPath value, ref Npgsql.NpgsqlLengthCache? lengthCache, Npgsql.NpgsqlParameter? parameter) -> int
override Npgsql.TypeHandlers.GeometricHandlers.PathHandler.Write(NpgsqlTypes.NpgsqlPath value, Npgsql.NpgsqlWriteBuffer! buf, Npgsql.NpgsqlLengthCache? lengthCache, Npgsql.NpgsqlParameter? parameter, bool async, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
override Npgsql.TypeHandlers.GeometricHandlers.PointHandler.Read(Npgsql.NpgsqlReadBuffer! buf, int len, Npgsql.BackendMessages.FieldDescription? fieldDescription = null) -> NpgsqlTypes.NpgsqlPoint
override Npgsql.TypeHandlers.GeometricHandlers.PointHandler.ValidateAndGetLength(NpgsqlTypes.NpgsqlPoint value, Npgsql.NpgsqlParameter? parameter) -> int
override Npgsql.TypeHandlers.GeometricHandlers.PointHandler.Write(NpgsqlTypes.NpgsqlPoint value, Npgsql.NpgsqlWriteBuffer! buf, Npgsql.NpgsqlParameter? parameter) -> void
override Npgsql.TypeHandlers.GeometricHandlers.PolygonHandler.Read(Npgsql.NpgsqlReadBuffer! buf, int len, bool async, Npgsql.BackendMessages.FieldDescription? fieldDescription = null) -> System.Threading.Tasks.ValueTask<NpgsqlTypes.NpgsqlPolygon>
override Npgsql.TypeHandlers.GeometricHandlers.PolygonHandler.ValidateAndGetLength(NpgsqlTypes.NpgsqlPolygon value, ref Npgsql.NpgsqlLengthCache? lengthCache, Npgsql.NpgsqlParameter? parameter) -> int
override Npgsql.TypeHandlers.GeometricHandlers.PolygonHandler.Write(NpgsqlTypes.NpgsqlPolygon value, Npgsql.NpgsqlWriteBuffer! buf, Npgsql.NpgsqlLengthCache? lengthCache, Npgsql.NpgsqlParameter? parameter, bool async, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
override Npgsql.TypeHandlers.HstoreHandler.Read(Npgsql.NpgsqlReadBuffer! buf, int len, bool async, Npgsql.BackendMessages.FieldDescription? fieldDescription = null) -> System.Threading.Tasks.ValueTask<System.Collections.Generic.Dictionary<string!, string?>!>
override Npgsql.TypeHandlers.HstoreHandler.ValidateAndGetLength(System.Collections.Generic.Dictionary<string!, string?>! value, ref Npgsql.NpgsqlLengthCache? lengthCache, Npgsql.NpgsqlParameter? parameter) -> int
override Npgsql.TypeHandlers.HstoreHandler.Write(System.Collections.Generic.Dictionary<string!, string?>! value, Npgsql.NpgsqlWriteBuffer! buf, Npgsql.NpgsqlLengthCache? lengthCache, Npgsql.NpgsqlParameter? parameter, bool async, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
override Npgsql.TypeHandlers.HstoreHandlerFactory.Create(Npgsql.PostgresTypes.PostgresType! postgresType, Npgsql.NpgsqlConnection! conn) -> Npgsql.TypeHandling.NpgsqlTypeHandler<System.Collections.Generic.Dictionary<string!, string?>!>!
override Npgsql.TypeHandlers.InternalCharHandler.Read(Npgsql.NpgsqlReadBuffer! buf, int len, Npgsql.BackendMessages.FieldDescription? fieldDescription = null) -> char
override Npgsql.TypeHandlers.InternalCharHandler.ValidateAndGetLength(char value, Npgsql.NpgsqlParameter? parameter) -> int
override Npgsql.TypeHandlers.InternalCharHandler.Write(char value, Npgsql.NpgsqlWriteBuffer! buf, Npgsql.NpgsqlParameter? parameter) -> void
override Npgsql.TypeHandlers.JsonbHandlerFactory.Create(Npgsql.PostgresTypes.PostgresType! postgresType, Npgsql.NpgsqlConnection! conn) -> Npgsql.TypeHandling.NpgsqlTypeHandler<string!>!
override Npgsql.TypeHandlers.JsonHandler.Read(Npgsql.NpgsqlReadBuffer! buf, int len, bool async, Npgsql.BackendMessages.FieldDescription? fieldDescription = null) -> System.Threading.Tasks.ValueTask<string!>
override Npgsql.TypeHandlers.JsonHandler.Read<T>(Npgsql.NpgsqlReadBuffer! buf, int byteLen, bool async, Npgsql.BackendMessages.FieldDescription? fieldDescription = null) -> System.Threading.Tasks.ValueTask<T>
override Npgsql.TypeHandlers.JsonHandler.ValidateAndGetLength(string! value, ref Npgsql.NpgsqlLengthCache? lengthCache, Npgsql.NpgsqlParameter? parameter) -> int
override Npgsql.TypeHandlers.JsonHandler.ValidateAndGetLength<TAny>(TAny value, ref Npgsql.NpgsqlLengthCache? lengthCache, Npgsql.NpgsqlParameter? parameter) -> int
override Npgsql.TypeHandlers.JsonHandler.ValidateObjectAndGetLength(object! value, ref Npgsql.NpgsqlLengthCache? lengthCache, Npgsql.NpgsqlParameter? parameter) -> int
override Npgsql.TypeHandlers.JsonHandler.Write(string! value, Npgsql.NpgsqlWriteBuffer! buf, Npgsql.NpgsqlLengthCache? lengthCache, Npgsql.NpgsqlParameter? parameter, bool async, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
override Npgsql.TypeHandlers.JsonHandler.WriteObjectWithLength(object! value, Npgsql.NpgsqlWriteBuffer! buf, Npgsql.NpgsqlLengthCache? lengthCache, Npgsql.NpgsqlParameter? parameter, bool async, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
override Npgsql.TypeHandlers.JsonHandler.WriteWithLength<TAny>(TAny value, Npgsql.NpgsqlWriteBuffer! buf, Npgsql.NpgsqlLengthCache? lengthCache, Npgsql.NpgsqlParameter? parameter, bool async, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
override Npgsql.TypeHandlers.JsonHandlerFactory.Create(Npgsql.PostgresTypes.PostgresType! postgresType, Npgsql.NpgsqlConnection! conn) -> Npgsql.TypeHandling.NpgsqlTypeHandler<string!>!
override Npgsql.TypeHandlers.JsonPathHandler.Read(Npgsql.NpgsqlReadBuffer! buf, int len, bool async, Npgsql.BackendMessages.FieldDescription? fieldDescription = null) -> System.Threading.Tasks.ValueTask<string!>
override Npgsql.TypeHandlers.JsonPathHandler.ValidateAndGetLength(string! value, ref Npgsql.NpgsqlLengthCache? lengthCache, Npgsql.NpgsqlParameter? parameter) -> int
override Npgsql.TypeHandlers.JsonPathHandler.Write(string! value, Npgsql.NpgsqlWriteBuffer! buf, Npgsql.NpgsqlLengthCache? lengthCache, Npgsql.NpgsqlParameter? parameter, bool async, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
override Npgsql.TypeHandlers.JsonPathHandlerFactory.Create(Npgsql.PostgresTypes.PostgresType! postgresType, Npgsql.NpgsqlConnection! conn) -> Npgsql.TypeHandling.NpgsqlTypeHandler<string!>!
override Npgsql.TypeHandlers.LQueryHandler.GetTextReader(System.IO.Stream! stream) -> System.IO.TextReader!
override Npgsql.TypeHandlers.LQueryHandler.Read(Npgsql.NpgsqlReadBuffer! buf, int len, bool async, Npgsql.BackendMessages.FieldDescription? fieldDescription = null) -> System.Threading.Tasks.ValueTask<string!>
override Npgsql.TypeHandlers.LQueryHandler.ValidateAndGetLength(char[]! value, ref Npgsql.NpgsqlLengthCache? lengthCache, Npgsql.NpgsqlParameter? parameter) -> int
override Npgsql.TypeHandlers.LQueryHandler.ValidateAndGetLength(string! value, ref Npgsql.NpgsqlLengthCache? lengthCache, Npgsql.NpgsqlParameter? parameter) -> int
override Npgsql.TypeHandlers.LQueryHandler.ValidateAndGetLength(System.ArraySegment<char> value, ref Npgsql.NpgsqlLengthCache? lengthCache, Npgsql.NpgsqlParameter? parameter) -> int
override Npgsql.TypeHandlers.LQueryHandler.Write(char[]! value, Npgsql.NpgsqlWriteBuffer! buf, Npgsql.NpgsqlLengthCache? lengthCache, Npgsql.NpgsqlParameter? parameter, bool async, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
override Npgsql.TypeHandlers.LQueryHandler.Write(string! value, Npgsql.NpgsqlWriteBuffer! buf, Npgsql.NpgsqlLengthCache? lengthCache, Npgsql.NpgsqlParameter? parameter, bool async, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
override Npgsql.TypeHandlers.LQueryHandler.Write(System.ArraySegment<char> value, Npgsql.NpgsqlWriteBuffer! buf, Npgsql.NpgsqlLengthCache? lengthCache, Npgsql.NpgsqlParameter? parameter, bool async, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
override Npgsql.TypeHandlers.LTreeHandler.GetTextReader(System.IO.Stream! stream) -> System.IO.TextReader!
override Npgsql.TypeHandlers.LTreeHandler.Read(Npgsql.NpgsqlReadBuffer! buf, int len, bool async, Npgsql.BackendMessages.FieldDescription? fieldDescription = null) -> System.Threading.Tasks.ValueTask<string!>
override Npgsql.TypeHandlers.LTreeHandler.ValidateAndGetLength(char[]! value, ref Npgsql.NpgsqlLengthCache? lengthCache, Npgsql.NpgsqlParameter? parameter) -> int
override Npgsql.TypeHandlers.LTreeHandler.ValidateAndGetLength(string! value, ref Npgsql.NpgsqlLengthCache? lengthCache, Npgsql.NpgsqlParameter? parameter) -> int
override Npgsql.TypeHandlers.LTreeHandler.ValidateAndGetLength(System.ArraySegment<char> value, ref Npgsql.NpgsqlLengthCache? lengthCache, Npgsql.NpgsqlParameter? parameter) -> int
override Npgsql.TypeHandlers.LTreeHandler.Write(char[]! value, Npgsql.NpgsqlWriteBuffer! buf, Npgsql.NpgsqlLengthCache? lengthCache, Npgsql.NpgsqlParameter? parameter, bool async, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
override Npgsql.TypeHandlers.LTreeHandler.Write(string! value, Npgsql.NpgsqlWriteBuffer! buf, Npgsql.NpgsqlLengthCache? lengthCache, Npgsql.NpgsqlParameter? parameter, bool async, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
override Npgsql.TypeHandlers.LTreeHandler.Write(System.ArraySegment<char> value, Npgsql.NpgsqlWriteBuffer! buf, Npgsql.NpgsqlLengthCache? lengthCache, Npgsql.NpgsqlParameter? parameter, bool async, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
override Npgsql.TypeHandlers.LTxtQueryHandler.GetTextReader(System.IO.Stream! stream) -> System.IO.TextReader!
override Npgsql.TypeHandlers.LTxtQueryHandler.Read(Npgsql.NpgsqlReadBuffer! buf, int len, bool async, Npgsql.BackendMessages.FieldDescription? fieldDescription = null) -> System.Threading.Tasks.ValueTask<string!>
override Npgsql.TypeHandlers.LTxtQueryHandler.ValidateAndGetLength(char[]! value, ref Npgsql.NpgsqlLengthCache? lengthCache, Npgsql.NpgsqlParameter? parameter) -> int
override Npgsql.TypeHandlers.LTxtQueryHandler.ValidateAndGetLength(string! value, ref Npgsql.NpgsqlLengthCache? lengthCache, Npgsql.NpgsqlParameter? parameter) -> int
override Npgsql.TypeHandlers.LTxtQueryHandler.ValidateAndGetLength(System.ArraySegment<char> value, ref Npgsql.NpgsqlLengthCache? lengthCache, Npgsql.NpgsqlParameter? parameter) -> int
override Npgsql.TypeHandlers.LTxtQueryHandler.Write(char[]! value, Npgsql.NpgsqlWriteBuffer! buf, Npgsql.NpgsqlLengthCache? lengthCache, Npgsql.NpgsqlParameter? parameter, bool async, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
override Npgsql.TypeHandlers.LTxtQueryHandler.Write(string! value, Npgsql.NpgsqlWriteBuffer! buf, Npgsql.NpgsqlLengthCache? lengthCache, Npgsql.NpgsqlParameter? parameter, bool async, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
override Npgsql.TypeHandlers.LTxtQueryHandler.Write(System.ArraySegment<char> value, Npgsql.NpgsqlWriteBuffer! buf, Npgsql.NpgsqlLengthCache? lengthCache, Npgsql.NpgsqlParameter? parameter, bool async, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
override Npgsql.TypeHandlers.NetworkHandlers.CidrHandler.Read(Npgsql.NpgsqlReadBuffer! buf, int len, Npgsql.BackendMessages.FieldDescription? fieldDescription = null) -> (System.Net.IPAddress! Address, int Subnet)
override Npgsql.TypeHandlers.NetworkHandlers.CidrHandler.ValidateAndGetLength((System.Net.IPAddress! Address, int Subnet) value, Npgsql.NpgsqlParameter? parameter) -> int
override Npgsql.TypeHandlers.NetworkHandlers.CidrHandler.Write((System.Net.IPAddress! Address, int Subnet) value, Npgsql.NpgsqlWriteBuffer! buf, Npgsql.NpgsqlParameter? parameter) -> void
override Npgsql.TypeHandlers.NetworkHandlers.InetHandler.Read(Npgsql.NpgsqlReadBuffer! buf, int len, Npgsql.BackendMessages.FieldDescription? fieldDescription = null) -> System.Net.IPAddress!
override Npgsql.TypeHandlers.NetworkHandlers.InetHandler.ReadPsv(Npgsql.NpgsqlReadBuffer! buf, int len, Npgsql.BackendMessages.FieldDescription? fieldDescription = null) -> (System.Net.IPAddress! Address, int Subnet)
override Npgsql.TypeHandlers.NetworkHandlers.InetHandler.ValidateAndGetLength((System.Net.IPAddress! Address, int Subnet) value, Npgsql.NpgsqlParameter? parameter) -> int
override Npgsql.TypeHandlers.NetworkHandlers.InetHandler.ValidateAndGetLength(System.Net.IPAddress! value, Npgsql.NpgsqlParameter? parameter) -> int
override Npgsql.TypeHandlers.NetworkHandlers.InetHandler.ValidateObjectAndGetLength(object! value, ref Npgsql.NpgsqlLengthCache? lengthCache, Npgsql.NpgsqlParameter? parameter) -> int
override Npgsql.TypeHandlers.NetworkHandlers.InetHandler.Write((System.Net.IPAddress! Address, int Subnet) value, Npgsql.NpgsqlWriteBuffer! buf, Npgsql.NpgsqlParameter? parameter) -> void
override Npgsql.TypeHandlers.NetworkHandlers.InetHandler.Write(System.Net.IPAddress! value, Npgsql.NpgsqlWriteBuffer! buf, Npgsql.NpgsqlParameter? parameter) -> void
override Npgsql.TypeHandlers.NetworkHandlers.InetHandler.WriteObjectWithLength(object! value, Npgsql.NpgsqlWriteBuffer! buf, Npgsql.NpgsqlLengthCache? lengthCache, Npgsql.NpgsqlParameter? parameter, bool async, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
override Npgsql.TypeHandlers.NetworkHandlers.MacaddrHandler.Read(Npgsql.NpgsqlReadBuffer! buf, int len, Npgsql.BackendMessages.FieldDescription? fieldDescription = null) -> System.Net.NetworkInformation.PhysicalAddress!
override Npgsql.TypeHandlers.NetworkHandlers.MacaddrHandler.ValidateAndGetLength(System.Net.NetworkInformation.PhysicalAddress! value, Npgsql.NpgsqlParameter? parameter) -> int
override Npgsql.TypeHandlers.NetworkHandlers.MacaddrHandler.Write(System.Net.NetworkInformation.PhysicalAddress! value, Npgsql.NpgsqlWriteBuffer! buf, Npgsql.NpgsqlParameter? parameter) -> void
override Npgsql.TypeHandlers.NumericHandlers.DoubleHandler.Read(Npgsql.NpgsqlReadBuffer! buf, int len, Npgsql.BackendMessages.FieldDescription? fieldDescription = null) -> double
override Npgsql.TypeHandlers.NumericHandlers.DoubleHandler.ValidateAndGetLength(double value, Npgsql.NpgsqlParameter? parameter) -> int
override Npgsql.TypeHandlers.NumericHandlers.DoubleHandler.Write(double value, Npgsql.NpgsqlWriteBuffer! buf, Npgsql.NpgsqlParameter? parameter) -> void
override Npgsql.TypeHandlers.NumericHandlers.Int16Handler.Read(Npgsql.NpgsqlReadBuffer! buf, int len, Npgsql.BackendMessages.FieldDescription? fieldDescription = null) -> short
override Npgsql.TypeHandlers.NumericHandlers.Int16Handler.ValidateAndGetLength(short value, Npgsql.NpgsqlParameter? parameter) -> int
override Npgsql.TypeHandlers.NumericHandlers.Int16Handler.Write(short value, Npgsql.NpgsqlWriteBuffer! buf, Npgsql.NpgsqlParameter? parameter) -> void
override Npgsql.TypeHandlers.NumericHandlers.Int32Handler.Read(Npgsql.NpgsqlReadBuffer! buf, int len, Npgsql.BackendMessages.FieldDescription? fieldDescription = null) -> int
override Npgsql.TypeHandlers.NumericHandlers.Int32Handler.ValidateAndGetLength(int value, Npgsql.NpgsqlParameter? parameter) -> int
override Npgsql.TypeHandlers.NumericHandlers.Int32Handler.Write(int value, Npgsql.NpgsqlWriteBuffer! buf, Npgsql.NpgsqlParameter? parameter) -> void
override Npgsql.TypeHandlers.NumericHandlers.Int64Handler.Read(Npgsql.NpgsqlReadBuffer! buf, int len, Npgsql.BackendMessages.FieldDescription? fieldDescription = null) -> long
override Npgsql.TypeHandlers.NumericHandlers.Int64Handler.ValidateAndGetLength(long value, Npgsql.NpgsqlParameter? parameter) -> int
override Npgsql.TypeHandlers.NumericHandlers.Int64Handler.Write(long value, Npgsql.NpgsqlWriteBuffer! buf, Npgsql.NpgsqlParameter? parameter) -> void
override Npgsql.TypeHandlers.NumericHandlers.MoneyHandler.Read(Npgsql.NpgsqlReadBuffer! buf, int len, Npgsql.BackendMessages.FieldDescription? fieldDescription = null) -> decimal
override Npgsql.TypeHandlers.NumericHandlers.MoneyHandler.ValidateAndGetLength(decimal value, Npgsql.NpgsqlParameter? parameter) -> int
override Npgsql.TypeHandlers.NumericHandlers.MoneyHandler.Write(decimal value, Npgsql.NpgsqlWriteBuffer! buf, Npgsql.NpgsqlParameter? parameter) -> void
override Npgsql.TypeHandlers.NumericHandlers.NumericHandler.Read(Npgsql.NpgsqlReadBuffer! buf, int len, Npgsql.BackendMessages.FieldDescription? fieldDescription = null) -> decimal
override Npgsql.TypeHandlers.NumericHandlers.NumericHandler.ValidateAndGetLength(decimal value, Npgsql.NpgsqlParameter? parameter) -> int
override Npgsql.TypeHandlers.NumericHandlers.NumericHandler.Write(decimal value, Npgsql.NpgsqlWriteBuffer! buf, Npgsql.NpgsqlParameter? parameter) -> void
override Npgsql.TypeHandlers.NumericHandlers.SingleHandler.Read(Npgsql.NpgsqlReadBuffer! buf, int len, Npgsql.BackendMessages.FieldDescription? fieldDescription = null) -> float
override Npgsql.TypeHandlers.NumericHandlers.SingleHandler.ValidateAndGetLength(float value, Npgsql.NpgsqlParameter? parameter) -> int
override Npgsql.TypeHandlers.NumericHandlers.SingleHandler.Write(float value, Npgsql.NpgsqlWriteBuffer! buf, Npgsql.NpgsqlParameter? parameter) -> void
override Npgsql.TypeHandlers.NumericHandlers.UInt32Handler.Read(Npgsql.NpgsqlReadBuffer! buf, int len, Npgsql.BackendMessages.FieldDescription? fieldDescription = null) -> uint
override Npgsql.TypeHandlers.NumericHandlers.UInt32Handler.ValidateAndGetLength(uint value, Npgsql.NpgsqlParameter? parameter) -> int
override Npgsql.TypeHandlers.NumericHandlers.UInt32Handler.Write(uint value, Npgsql.NpgsqlWriteBuffer! buf, Npgsql.NpgsqlParameter? parameter) -> void
override Npgsql.TypeHandlers.RangeHandler<TElement>.CreateArrayHandler(Npgsql.PostgresTypes.PostgresArrayType! arrayBackendType) -> Npgsql.TypeHandlers.ArrayHandler!
override Npgsql.TypeHandlers.RangeHandler<TElement>.CreateRangeHandler(Npgsql.PostgresTypes.PostgresType! rangeBackendType) -> Npgsql.TypeHandlers.IRangeHandler!
override Npgsql.TypeHandlers.RangeHandler<TElement>.Read(Npgsql.NpgsqlReadBuffer! buf, int len, bool async, Npgsql.BackendMessages.FieldDescription? fieldDescription = null) -> System.Threading.Tasks.ValueTask<NpgsqlTypes.NpgsqlRange<TElement>>
override Npgsql.TypeHandlers.RangeHandler<TElement>.Read<TAny>(Npgsql.NpgsqlReadBuffer! buf, int len, Npgsql.BackendMessages.FieldDescription? fieldDescription = null) -> TAny
override Npgsql.TypeHandlers.RangeHandler<TElement>.ValidateAndGetLength(NpgsqlTypes.NpgsqlRange<TElement> value, ref Npgsql.NpgsqlLengthCache? lengthCache, Npgsql.NpgsqlParameter? parameter) -> int
override Npgsql.TypeHandlers.RangeHandler<TElement>.Write(NpgsqlTypes.NpgsqlRange<TElement> value, Npgsql.NpgsqlWriteBuffer! buf, Npgsql.NpgsqlLengthCache? lengthCache, Npgsql.NpgsqlParameter? parameter, bool async, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
override Npgsql.TypeHandlers.TextHandler.Read(Npgsql.NpgsqlReadBuffer! buf, int byteLen, bool async, Npgsql.BackendMessages.FieldDescription? fieldDescription = null) -> System.Threading.Tasks.ValueTask<string!>
override Npgsql.TypeHandlers.TextHandler.ValidateAndGetLength(string! value, ref Npgsql.NpgsqlLengthCache? lengthCache, Npgsql.NpgsqlParameter? parameter) -> int
override Npgsql.TypeHandlers.TextHandler.Write(string! value, Npgsql.NpgsqlWriteBuffer! buf, Npgsql.NpgsqlLengthCache? lengthCache, Npgsql.NpgsqlParameter? parameter, bool async, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
override Npgsql.TypeHandlers.TextHandlerFactory.Create(Npgsql.PostgresTypes.PostgresType! pgType, Npgsql.NpgsqlConnection! conn) -> Npgsql.TypeHandling.NpgsqlTypeHandler<string!>!
override Npgsql.TypeHandlers.UuidHandler.Read(Npgsql.NpgsqlReadBuffer! buf, int len, Npgsql.BackendMessages.FieldDescription? fieldDescription = null) -> System.Guid
override Npgsql.TypeHandlers.UuidHandler.ValidateAndGetLength(System.Guid value, Npgsql.NpgsqlParameter? parameter) -> int
override Npgsql.TypeHandlers.UuidHandler.Write(System.Guid value, Npgsql.NpgsqlWriteBuffer! buf, Npgsql.NpgsqlParameter? parameter) -> void
override Npgsql.TypeHandling.NpgsqlSimpleTypeHandler<TDefault>.Read<TAny>(Npgsql.NpgsqlReadBuffer! buf, int len, Npgsql.BackendMessages.FieldDescription? fieldDescription = null) -> TAny
override Npgsql.TypeHandling.NpgsqlSimpleTypeHandler<TDefault>.ValidateAndGetLength<TAny>(TAny value, ref Npgsql.NpgsqlLengthCache? lengthCache, Npgsql.NpgsqlParameter? parameter) -> int
override Npgsql.TypeHandling.NpgsqlSimpleTypeHandler<TDefault>.ValidateObjectAndGetLength(object! value, ref Npgsql.NpgsqlLengthCache? lengthCache, Npgsql.NpgsqlParameter? parameter) -> int
override Npgsql.TypeHandling.NpgsqlSimpleTypeHandler<TDefault>.WriteObjectWithLength(object! value, Npgsql.NpgsqlWriteBuffer! buf, Npgsql.NpgsqlLengthCache? lengthCache, Npgsql.NpgsqlParameter? parameter, bool async, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
override Npgsql.TypeHandling.NpgsqlSimpleTypeHandlerWithPsv<TDefault, TPsv>.CreateArrayHandler(Npgsql.PostgresTypes.PostgresArrayType! arrayBackendType) -> Npgsql.TypeHandlers.ArrayHandler!
override Npgsql.TypeHandling.NpgsqlTypeHandler<TDefault>.CreateArrayHandler(Npgsql.PostgresTypes.PostgresArrayType! arrayBackendType) -> Npgsql.TypeHandlers.ArrayHandler!
override Npgsql.TypeHandling.NpgsqlTypeHandler<TDefault>.CreateRangeHandler(Npgsql.PostgresTypes.PostgresType! rangeBackendType) -> Npgsql.TypeHandlers.IRangeHandler!
override Npgsql.TypeHandling.NpgsqlTypeHandler<TDefault>.Read<TAny>(Npgsql.NpgsqlReadBuffer! buf, int len, bool async, Npgsql.BackendMessages.FieldDescription? fieldDescription = null) -> System.Threading.Tasks.ValueTask<TAny>
override Npgsql.TypeHandling.NpgsqlTypeHandler<TDefault>.Read<TAny>(Npgsql.NpgsqlReadBuffer! buf, int len, Npgsql.BackendMessages.FieldDescription? fieldDescription = null) -> TAny
override Npgsql.TypeHandling.NpgsqlTypeHandler<TDefault>.ValidateAndGetLength<TAny>(TAny value, ref Npgsql.NpgsqlLengthCache? lengthCache, Npgsql.NpgsqlParameter? parameter) -> int
override Npgsql.TypeHandling.NpgsqlTypeHandler<TDefault>.ValidateObjectAndGetLength(object! value, ref Npgsql.NpgsqlLengthCache? lengthCache, Npgsql.NpgsqlParameter? parameter) -> int
override Npgsql.TypeHandling.NpgsqlTypeHandler<TDefault>.WriteObjectWithLength(object! value, Npgsql.NpgsqlWriteBuffer! buf, Npgsql.NpgsqlLengthCache? lengthCache, Npgsql.NpgsqlParameter? parameter, bool async, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
override Npgsql.TypeHandling.NpgsqlTypeHandlerFactory<TDefault>.CreateNonGeneric(Npgsql.PostgresTypes.PostgresType! pgType, Npgsql.NpgsqlConnection! conn) -> Npgsql.TypeHandling.NpgsqlTypeHandler!
override Npgsql.TypeHandling.NpgsqlTypeHandlerFactory<TDefault>.DefaultValueType.get -> System.Type!
override Npgsql.TypeMapping.NpgsqlTypeMapping.ToString() -> string!
override NpgsqlTypes.NpgsqlBox.Equals(object? obj) -> bool
override NpgsqlTypes.NpgsqlBox.GetHashCode() -> int
override NpgsqlTypes.NpgsqlBox.ToString() -> string!
override NpgsqlTypes.NpgsqlCircle.Equals(object? obj) -> bool
override NpgsqlTypes.NpgsqlCircle.GetHashCode() -> int
override NpgsqlTypes.NpgsqlCircle.ToString() -> string!
override NpgsqlTypes.NpgsqlDate.Equals(object? obj) -> bool
override NpgsqlTypes.NpgsqlDate.GetHashCode() -> int
override NpgsqlTypes.NpgsqlDate.ToString() -> string!
override NpgsqlTypes.NpgsqlDateTime.Equals(object? obj) -> bool
override NpgsqlTypes.NpgsqlDateTime.GetHashCode() -> int
override NpgsqlTypes.NpgsqlDateTime.ToString() -> string!
override NpgsqlTypes.NpgsqlInet.Equals(object? obj) -> bool
override NpgsqlTypes.NpgsqlInet.GetHashCode() -> int
override NpgsqlTypes.NpgsqlInet.ToString() -> string!
override NpgsqlTypes.NpgsqlLine.Equals(object? obj) -> bool
override NpgsqlTypes.NpgsqlLine.GetHashCode() -> int
override NpgsqlTypes.NpgsqlLine.ToString() -> string!
override NpgsqlTypes.NpgsqlLogSequenceNumber.Equals(object? obj) -> bool
override NpgsqlTypes.NpgsqlLogSequenceNumber.GetHashCode() -> int
override NpgsqlTypes.NpgsqlLogSequenceNumber.ToString() -> string!
override NpgsqlTypes.NpgsqlLSeg.Equals(object? obj) -> bool
override NpgsqlTypes.NpgsqlLSeg.GetHashCode() -> int
override NpgsqlTypes.NpgsqlLSeg.ToString() -> string!
override NpgsqlTypes.NpgsqlPath.Equals(object? obj) -> bool
override NpgsqlTypes.NpgsqlPath.GetHashCode() -> int
override NpgsqlTypes.NpgsqlPath.ToString() -> string!
override NpgsqlTypes.NpgsqlPoint.Equals(object? obj) -> bool
override NpgsqlTypes.NpgsqlPoint.GetHashCode() -> int
override NpgsqlTypes.NpgsqlPoint.ToString() -> string!
override NpgsqlTypes.NpgsqlPolygon.Equals(object? obj) -> bool
override NpgsqlTypes.NpgsqlPolygon.GetHashCode() -> int
override NpgsqlTypes.NpgsqlPolygon.ToString() -> string!
override NpgsqlTypes.NpgsqlRange<T>.Equals(object? o) -> bool
override NpgsqlTypes.NpgsqlRange<T>.GetHashCode() -> int
override NpgsqlTypes.NpgsqlRange<T>.ToString() -> string!
override NpgsqlTypes.NpgsqlTid.Equals(object? o) -> bool
override NpgsqlTypes.NpgsqlTid.GetHashCode() -> int
override NpgsqlTypes.NpgsqlTid.ToString() -> string!
override NpgsqlTypes.NpgsqlTimeSpan.Equals(object? obj) -> bool
override NpgsqlTypes.NpgsqlTimeSpan.GetHashCode() -> int
override NpgsqlTypes.NpgsqlTimeSpan.ToString() -> string!
override NpgsqlTypes.NpgsqlTsQuery.ToString() -> string!
override NpgsqlTypes.NpgsqlTsVector.Lexeme.Equals(object? o) -> bool
override NpgsqlTypes.NpgsqlTsVector.Lexeme.GetHashCode() -> int
override NpgsqlTypes.NpgsqlTsVector.Lexeme.ToString() -> string!
override NpgsqlTypes.NpgsqlTsVector.Lexeme.WordEntryPos.Equals(object? o) -> bool
override NpgsqlTypes.NpgsqlTsVector.Lexeme.WordEntryPos.GetHashCode() -> int
override NpgsqlTypes.NpgsqlTsVector.Lexeme.WordEntryPos.ToString() -> string!
override NpgsqlTypes.NpgsqlTsVector.ToString() -> string!
override sealed Npgsql.NpgsqlParameter.DbType.get -> System.Data.DbType
override sealed Npgsql.NpgsqlParameter.DbType.set -> void
override sealed Npgsql.NpgsqlParameter.Direction.get -> System.Data.ParameterDirection
override sealed Npgsql.NpgsqlParameter.Direction.set -> void
override sealed Npgsql.NpgsqlParameter.IsNullable.get -> bool
override sealed Npgsql.NpgsqlParameter.IsNullable.set -> void
override sealed Npgsql.NpgsqlParameter.ParameterName.get -> string!
override sealed Npgsql.NpgsqlParameter.ParameterName.set -> void
override sealed Npgsql.NpgsqlParameter.Size.get -> int
override sealed Npgsql.NpgsqlParameter.Size.set -> void
override sealed Npgsql.NpgsqlParameter.SourceColumn.get -> string!
override sealed Npgsql.NpgsqlParameter.SourceColumn.set -> void
override sealed Npgsql.NpgsqlParameter.SourceColumnNullMapping.get -> bool
override sealed Npgsql.NpgsqlParameter.SourceColumnNullMapping.set -> void
override sealed Npgsql.NpgsqlParameter.SourceVersion.get -> System.Data.DataRowVersion
override sealed Npgsql.NpgsqlParameter.SourceVersion.set -> void
override sealed Npgsql.TypeHandling.NpgsqlSimpleTypeHandler<TDefault>.Read(Npgsql.NpgsqlReadBuffer! buf, int len, bool async, Npgsql.BackendMessages.FieldDescription? fieldDescription = null) -> System.Threading.Tasks.ValueTask<TDefault>
override sealed Npgsql.TypeHandling.NpgsqlSimpleTypeHandler<TDefault>.Read<TAny>(Npgsql.NpgsqlReadBuffer! buf, int len, bool async, Npgsql.BackendMessages.FieldDescription? fieldDescription = null) -> System.Threading.Tasks.ValueTask<TAny>
override sealed Npgsql.TypeHandling.NpgsqlSimpleTypeHandler<TDefault>.ValidateAndGetLength(TDefault value, ref Npgsql.NpgsqlLengthCache? lengthCache, Npgsql.NpgsqlParameter? parameter) -> int
override sealed Npgsql.TypeHandling.NpgsqlSimpleTypeHandler<TDefault>.Write(TDefault value, Npgsql.NpgsqlWriteBuffer! buf, Npgsql.NpgsqlLengthCache? lengthCache, Npgsql.NpgsqlParameter? parameter, bool async, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
readonly Npgsql.TypeHandlers.DateTimeHandlers.TimestampHandler.ConvertInfinityDateTime -> bool
static Npgsql.Logging.NpgsqlLogManager.IsParameterLoggingEnabled.get -> bool
static Npgsql.Logging.NpgsqlLogManager.IsParameterLoggingEnabled.set -> void
static Npgsql.Logging.NpgsqlLogManager.Provider.get -> Npgsql.Logging.INpgsqlLoggingProvider!
static Npgsql.Logging.NpgsqlLogManager.Provider.set -> void
static Npgsql.NameTranslation.NpgsqlSnakeCaseNameTranslator.ConvertToSnakeCase(string! name) -> string!
static Npgsql.NpgsqlCommandBuilder.DeriveParameters(Npgsql.NpgsqlCommand! command) -> void
static Npgsql.NpgsqlConnection.ClearAllPools() -> void
static Npgsql.NpgsqlConnection.ClearPool(Npgsql.NpgsqlConnection! connection) -> void
static Npgsql.NpgsqlConnection.GlobalTypeMapper.get -> Npgsql.TypeMapping.INpgsqlTypeMapper!
static Npgsql.NpgsqlConnection.MapCompositeGlobally<T>(string? pgName = null, Npgsql.INpgsqlNameTranslator? nameTranslator = null) -> void
static Npgsql.NpgsqlConnection.MapEnumGlobally<TEnum>(string? pgName = null, Npgsql.INpgsqlNameTranslator? nameTranslator = null) -> void
static Npgsql.NpgsqlConnection.UnmapCompositeGlobally<T>(string! pgName, Npgsql.INpgsqlNameTranslator? nameTranslator = null) -> void
static Npgsql.NpgsqlConnection.UnmapEnumGlobally<TEnum>(string? pgName = null, Npgsql.INpgsqlNameTranslator? nameTranslator = null) -> void
static Npgsql.NpgsqlDatabaseInfo.ParseServerVersion(string! value) -> System.Version!
static Npgsql.NpgsqlDatabaseInfo.RegisterFactory(Npgsql.INpgsqlDatabaseInfoFactory! factory) -> void
static Npgsql.Replication.Internal.LogicalReplicationConnectionExtensions.CreateLogicalReplicationSlot(this Npgsql.Replication.LogicalReplicationConnection! connection, string! slotName, string! outputPlugin, bool isTemporary = false, Npgsql.Replication.LogicalSlotSnapshotInitMode? slotSnapshotInitMode = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<Npgsql.Replication.ReplicationSlotOptions>!
static Npgsql.Replication.Internal.LogicalReplicationConnectionExtensions.StartLogicalReplication(this Npgsql.Replication.LogicalReplicationConnection! connection, Npgsql.Replication.Internal.LogicalReplicationSlot! slot, System.Threading.CancellationToken cancellationToken, NpgsqlTypes.NpgsqlLogSequenceNumber? walLocation = null, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string!, string?>>? options = null, bool bypassingStream = false) -> System.Collections.Generic.IAsyncEnumerable<Npgsql.Replication.XLogDataMessage!>!
static Npgsql.Replication.PgOutputConnectionExtensions.CreatePgOutputReplicationSlot(this Npgsql.Replication.LogicalReplicationConnection! connection, string! slotName, bool temporarySlot = false, Npgsql.Replication.LogicalSlotSnapshotInitMode? slotSnapshotInitMode = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<Npgsql.Replication.PgOutput.PgOutputReplicationSlot!>!
static Npgsql.Replication.PgOutputConnectionExtensions.StartReplication(this Npgsql.Replication.LogicalReplicationConnection! connection, Npgsql.Replication.PgOutput.PgOutputReplicationSlot! slot, Npgsql.Replication.PgOutput.PgOutputReplicationOptions! options, System.Threading.CancellationToken cancellationToken, NpgsqlTypes.NpgsqlLogSequenceNumber? walLocation = null) -> System.Collections.Generic.IAsyncEnumerable<Npgsql.Replication.PgOutput.Messages.PgOutputReplicationMessage!>!
static Npgsql.Replication.TestDecodingConnectionExtensions.CreateTestDecodingReplicationSlot(this Npgsql.Replication.LogicalReplicationConnection! connection, string! slotName, bool temporarySlot = false, Npgsql.Replication.LogicalSlotSnapshotInitMode? slotSnapshotInitMode = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<Npgsql.Replication.TestDecoding.TestDecodingReplicationSlot!>!
static Npgsql.Replication.TestDecodingConnectionExtensions.StartReplication(this Npgsql.Replication.LogicalReplicationConnection! connection, Npgsql.Replication.TestDecoding.TestDecodingReplicationSlot! slot, System.Threading.CancellationToken cancellationToken, Npgsql.Replication.TestDecoding.TestDecodingOptions? options = null, NpgsqlTypes.NpgsqlLogSequenceNumber? walLocation = null) -> System.Collections.Generic.IAsyncEnumerable<Npgsql.Replication.TestDecoding.TestDecodingData!>!
static NpgsqlTypes.NpgsqlBox.operator !=(NpgsqlTypes.NpgsqlBox x, NpgsqlTypes.NpgsqlBox y) -> bool
static NpgsqlTypes.NpgsqlBox.operator ==(NpgsqlTypes.NpgsqlBox x, NpgsqlTypes.NpgsqlBox y) -> bool
static NpgsqlTypes.NpgsqlBox.Parse(string! s) -> NpgsqlTypes.NpgsqlBox
static NpgsqlTypes.NpgsqlCircle.operator !=(NpgsqlTypes.NpgsqlCircle x, NpgsqlTypes.NpgsqlCircle y) -> bool
static NpgsqlTypes.NpgsqlCircle.operator ==(NpgsqlTypes.NpgsqlCircle x, NpgsqlTypes.NpgsqlCircle y) -> bool
static NpgsqlTypes.NpgsqlCircle.Parse(string! s) -> NpgsqlTypes.NpgsqlCircle
static NpgsqlTypes.NpgsqlDate.explicit operator NpgsqlTypes.NpgsqlDate(System.DateTime date) -> NpgsqlTypes.NpgsqlDate
static NpgsqlTypes.NpgsqlDate.explicit operator System.DateTime(NpgsqlTypes.NpgsqlDate date) -> System.DateTime
static NpgsqlTypes.NpgsqlDate.Now.get -> NpgsqlTypes.NpgsqlDate
static NpgsqlTypes.NpgsqlDate.operator !=(NpgsqlTypes.NpgsqlDate x, NpgsqlTypes.NpgsqlDate y) -> bool
static NpgsqlTypes.NpgsqlDate.operator +(NpgsqlTypes.NpgsqlDate date, NpgsqlTypes.NpgsqlTimeSpan interval) -> NpgsqlTypes.NpgsqlDate
static NpgsqlTypes.NpgsqlDate.operator +(NpgsqlTypes.NpgsqlTimeSpan interval, NpgsqlTypes.NpgsqlDate date) -> NpgsqlTypes.NpgsqlDate
static NpgsqlTypes.NpgsqlDate.operator -(NpgsqlTypes.NpgsqlDate date, NpgsqlTypes.NpgsqlTimeSpan interval) -> NpgsqlTypes.NpgsqlDate
static NpgsqlTypes.NpgsqlDate.operator -(NpgsqlTypes.NpgsqlDate dateX, NpgsqlTypes.NpgsqlDate dateY) -> NpgsqlTypes.NpgsqlTimeSpan
static NpgsqlTypes.NpgsqlDate.operator <(NpgsqlTypes.NpgsqlDate x, NpgsqlTypes.NpgsqlDate y) -> bool
static NpgsqlTypes.NpgsqlDate.operator <=(NpgsqlTypes.NpgsqlDate x, NpgsqlTypes.NpgsqlDate y) -> bool
static NpgsqlTypes.NpgsqlDate.operator ==(NpgsqlTypes.NpgsqlDate x, NpgsqlTypes.NpgsqlDate y) -> bool
static NpgsqlTypes.NpgsqlDate.operator >(NpgsqlTypes.NpgsqlDate x, NpgsqlTypes.NpgsqlDate y) -> bool
static NpgsqlTypes.NpgsqlDate.operator >=(NpgsqlTypes.NpgsqlDate x, NpgsqlTypes.NpgsqlDate y) -> bool
static NpgsqlTypes.NpgsqlDate.Parse(string! str) -> NpgsqlTypes.NpgsqlDate
static NpgsqlTypes.NpgsqlDate.ToDateTime(NpgsqlTypes.NpgsqlDate date) -> System.DateTime
static NpgsqlTypes.NpgsqlDate.Today.get -> NpgsqlTypes.NpgsqlDate
static NpgsqlTypes.NpgsqlDate.Tomorrow.get -> NpgsqlTypes.NpgsqlDate
static NpgsqlTypes.NpgsqlDate.ToNpgsqlDate(System.DateTime date) -> NpgsqlTypes.NpgsqlDate
static NpgsqlTypes.NpgsqlDate.TryParse(string! str, out NpgsqlTypes.NpgsqlDate date) -> bool
static NpgsqlTypes.NpgsqlDate.Yesterday.get -> NpgsqlTypes.NpgsqlDate
static NpgsqlTypes.NpgsqlDateTime.explicit operator System.DateTime(NpgsqlTypes.NpgsqlDateTime npgsqlDateTime) -> System.DateTime
static NpgsqlTypes.NpgsqlDateTime.implicit operator NpgsqlTypes.NpgsqlDateTime(System.DateTime dateTime) -> NpgsqlTypes.NpgsqlDateTime
static NpgsqlTypes.NpgsqlDateTime.Now.get -> NpgsqlTypes.NpgsqlDateTime
static NpgsqlTypes.NpgsqlDateTime.operator !=(NpgsqlTypes.NpgsqlDateTime x, NpgsqlTypes.NpgsqlDateTime y) -> bool
static NpgsqlTypes.NpgsqlDateTime.operator +(NpgsqlTypes.NpgsqlDateTime timestamp, NpgsqlTypes.NpgsqlTimeSpan interval) -> NpgsqlTypes.NpgsqlDateTime
static NpgsqlTypes.NpgsqlDateTime.operator +(NpgsqlTypes.NpgsqlTimeSpan interval, NpgsqlTypes.NpgsqlDateTime timestamp) -> NpgsqlTypes.NpgsqlDateTime
static NpgsqlTypes.NpgsqlDateTime.operator -(NpgsqlTypes.NpgsqlDateTime timestamp, NpgsqlTypes.NpgsqlTimeSpan interval) -> NpgsqlTypes.NpgsqlDateTime
static NpgsqlTypes.NpgsqlDateTime.operator -(NpgsqlTypes.NpgsqlDateTime x, NpgsqlTypes.NpgsqlDateTime y) -> NpgsqlTypes.NpgsqlTimeSpan
static NpgsqlTypes.NpgsqlDateTime.operator <(NpgsqlTypes.NpgsqlDateTime x, NpgsqlTypes.NpgsqlDateTime y) -> bool
static NpgsqlTypes.NpgsqlDateTime.operator <=(NpgsqlTypes.NpgsqlDateTime x, NpgsqlTypes.NpgsqlDateTime y) -> bool
static NpgsqlTypes.NpgsqlDateTime.operator ==(NpgsqlTypes.NpgsqlDateTime x, NpgsqlTypes.NpgsqlDateTime y) -> bool
static NpgsqlTypes.NpgsqlDateTime.operator >(NpgsqlTypes.NpgsqlDateTime x, NpgsqlTypes.NpgsqlDateTime y) -> bool
static NpgsqlTypes.NpgsqlDateTime.operator >=(NpgsqlTypes.NpgsqlDateTime x, NpgsqlTypes.NpgsqlDateTime y) -> bool
static NpgsqlTypes.NpgsqlDateTime.Parse(string! str) -> NpgsqlTypes.NpgsqlDateTime
static NpgsqlTypes.NpgsqlDateTime.ToNpgsqlDateTime(System.DateTime dateTime) -> NpgsqlTypes.NpgsqlDateTime
static NpgsqlTypes.NpgsqlInet.explicit operator System.Net.IPAddress!(NpgsqlTypes.NpgsqlInet inet) -> System.Net.IPAddress!
static NpgsqlTypes.NpgsqlInet.implicit operator NpgsqlTypes.NpgsqlInet(System.Net.IPAddress! ip) -> NpgsqlTypes.NpgsqlInet
static NpgsqlTypes.NpgsqlInet.operator !=(NpgsqlTypes.NpgsqlInet x, NpgsqlTypes.NpgsqlInet y) -> bool
static NpgsqlTypes.NpgsqlInet.operator ==(NpgsqlTypes.NpgsqlInet x, NpgsqlTypes.NpgsqlInet y) -> bool
static NpgsqlTypes.NpgsqlInet.ToIPAddress(NpgsqlTypes.NpgsqlInet inet) -> System.Net.IPAddress!
static NpgsqlTypes.NpgsqlInet.ToNpgsqlInet(System.Net.IPAddress? ip) -> NpgsqlTypes.NpgsqlInet
static NpgsqlTypes.NpgsqlLine.operator !=(NpgsqlTypes.NpgsqlLine x, NpgsqlTypes.NpgsqlLine y) -> bool
static NpgsqlTypes.NpgsqlLine.operator ==(NpgsqlTypes.NpgsqlLine x, NpgsqlTypes.NpgsqlLine y) -> bool
static NpgsqlTypes.NpgsqlLine.Parse(string! s) -> NpgsqlTypes.NpgsqlLine
static NpgsqlTypes.NpgsqlLogSequenceNumber.explicit operator NpgsqlTypes.NpgsqlLogSequenceNumber(ulong value) -> NpgsqlTypes.NpgsqlLogSequenceNumber
static NpgsqlTypes.NpgsqlLogSequenceNumber.explicit operator ulong(NpgsqlTypes.NpgsqlLogSequenceNumber value) -> ulong
static NpgsqlTypes.NpgsqlLogSequenceNumber.Larger(NpgsqlTypes.NpgsqlLogSequenceNumber value1, NpgsqlTypes.NpgsqlLogSequenceNumber value2) -> NpgsqlTypes.NpgsqlLogSequenceNumber
static NpgsqlTypes.NpgsqlLogSequenceNumber.operator !=(NpgsqlTypes.NpgsqlLogSequenceNumber value1, NpgsqlTypes.NpgsqlLogSequenceNumber value2) -> bool
static NpgsqlTypes.NpgsqlLogSequenceNumber.operator +(NpgsqlTypes.NpgsqlLogSequenceNumber lsn, double nbytes) -> NpgsqlTypes.NpgsqlLogSequenceNumber
static NpgsqlTypes.NpgsqlLogSequenceNumber.operator -(NpgsqlTypes.NpgsqlLogSequenceNumber first, NpgsqlTypes.NpgsqlLogSequenceNumber second) -> ulong
static NpgsqlTypes.NpgsqlLogSequenceNumber.operator -(NpgsqlTypes.NpgsqlLogSequenceNumber lsn, double nbytes) -> NpgsqlTypes.NpgsqlLogSequenceNumber
static NpgsqlTypes.NpgsqlLogSequenceNumber.operator <(NpgsqlTypes.NpgsqlLogSequenceNumber value1, NpgsqlTypes.NpgsqlLogSequenceNumber value2) -> bool
static NpgsqlTypes.NpgsqlLogSequenceNumber.operator <=(NpgsqlTypes.NpgsqlLogSequenceNumber value1, NpgsqlTypes.NpgsqlLogSequenceNumber value2) -> bool
static NpgsqlTypes.NpgsqlLogSequenceNumber.operator ==(NpgsqlTypes.NpgsqlLogSequenceNumber value1, NpgsqlTypes.NpgsqlLogSequenceNumber value2) -> bool
static NpgsqlTypes.NpgsqlLogSequenceNumber.operator >(NpgsqlTypes.NpgsqlLogSequenceNumber value1, NpgsqlTypes.NpgsqlLogSequenceNumber value2) -> bool
static NpgsqlTypes.NpgsqlLogSequenceNumber.operator >=(NpgsqlTypes.NpgsqlLogSequenceNumber value1, NpgsqlTypes.NpgsqlLogSequenceNumber value2) -> bool
static NpgsqlTypes.NpgsqlLogSequenceNumber.Parse(string! s) -> NpgsqlTypes.NpgsqlLogSequenceNumber
static NpgsqlTypes.NpgsqlLogSequenceNumber.Parse(System.ReadOnlySpan<char> s) -> NpgsqlTypes.NpgsqlLogSequenceNumber
static NpgsqlTypes.NpgsqlLogSequenceNumber.Smaller(NpgsqlTypes.NpgsqlLogSequenceNumber value1, NpgsqlTypes.NpgsqlLogSequenceNumber value2) -> NpgsqlTypes.NpgsqlLogSequenceNumber
static NpgsqlTypes.NpgsqlLogSequenceNumber.TryParse(string! s, out NpgsqlTypes.NpgsqlLogSequenceNumber result) -> bool
static NpgsqlTypes.NpgsqlLogSequenceNumber.TryParse(System.ReadOnlySpan<char> s, out NpgsqlTypes.NpgsqlLogSequenceNumber result) -> bool
static NpgsqlTypes.NpgsqlLSeg.operator !=(NpgsqlTypes.NpgsqlLSeg x, NpgsqlTypes.NpgsqlLSeg y) -> bool
static NpgsqlTypes.NpgsqlLSeg.operator ==(NpgsqlTypes.NpgsqlLSeg x, NpgsqlTypes.NpgsqlLSeg y) -> bool
static NpgsqlTypes.NpgsqlLSeg.Parse(string! s) -> NpgsqlTypes.NpgsqlLSeg
static NpgsqlTypes.NpgsqlPath.operator !=(NpgsqlTypes.NpgsqlPath x, NpgsqlTypes.NpgsqlPath y) -> bool
static NpgsqlTypes.NpgsqlPath.operator ==(NpgsqlTypes.NpgsqlPath x, NpgsqlTypes.NpgsqlPath y) -> bool
static NpgsqlTypes.NpgsqlPath.Parse(string! s) -> NpgsqlTypes.NpgsqlPath
static NpgsqlTypes.NpgsqlPoint.operator !=(NpgsqlTypes.NpgsqlPoint x, NpgsqlTypes.NpgsqlPoint y) -> bool
static NpgsqlTypes.NpgsqlPoint.operator ==(NpgsqlTypes.NpgsqlPoint x, NpgsqlTypes.NpgsqlPoint y) -> bool
static NpgsqlTypes.NpgsqlPoint.Parse(string! s) -> NpgsqlTypes.NpgsqlPoint
static NpgsqlTypes.NpgsqlPolygon.operator !=(NpgsqlTypes.NpgsqlPolygon x, NpgsqlTypes.NpgsqlPolygon y) -> bool
static NpgsqlTypes.NpgsqlPolygon.operator ==(NpgsqlTypes.NpgsqlPolygon x, NpgsqlTypes.NpgsqlPolygon y) -> bool
static NpgsqlTypes.NpgsqlPolygon.Parse(string! s) -> NpgsqlTypes.NpgsqlPolygon
static NpgsqlTypes.NpgsqlRange<T>.operator !=(NpgsqlTypes.NpgsqlRange<T> x, NpgsqlTypes.NpgsqlRange<T> y) -> bool
static NpgsqlTypes.NpgsqlRange<T>.operator ==(NpgsqlTypes.NpgsqlRange<T> x, NpgsqlTypes.NpgsqlRange<T> y) -> bool
static NpgsqlTypes.NpgsqlRange<T>.Parse(string! value) -> NpgsqlTypes.NpgsqlRange<T>
static NpgsqlTypes.NpgsqlRange<T>.RangeTypeConverter.Register() -> void
static NpgsqlTypes.NpgsqlTid.operator !=(NpgsqlTypes.NpgsqlTid left, NpgsqlTypes.NpgsqlTid right) -> bool
static NpgsqlTypes.NpgsqlTid.operator ==(NpgsqlTypes.NpgsqlTid left, NpgsqlTypes.NpgsqlTid right) -> bool
static NpgsqlTypes.NpgsqlTimeSpan.Compare(NpgsqlTypes.NpgsqlTimeSpan x, NpgsqlTypes.NpgsqlTimeSpan y) -> int
static NpgsqlTypes.NpgsqlTimeSpan.explicit operator System.TimeSpan(NpgsqlTypes.NpgsqlTimeSpan interval) -> System.TimeSpan
static NpgsqlTypes.NpgsqlTimeSpan.FromDays(double days) -> NpgsqlTypes.NpgsqlTimeSpan
static NpgsqlTypes.NpgsqlTimeSpan.FromHours(double hours) -> NpgsqlTypes.NpgsqlTimeSpan
static NpgsqlTypes.NpgsqlTimeSpan.FromMicroseconds(double micro) -> NpgsqlTypes.NpgsqlTimeSpan
static NpgsqlTypes.NpgsqlTimeSpan.FromMilliseconds(double milli) -> NpgsqlTypes.NpgsqlTimeSpan
static NpgsqlTypes.NpgsqlTimeSpan.FromMinutes(double minutes) -> NpgsqlTypes.NpgsqlTimeSpan
static NpgsqlTypes.NpgsqlTimeSpan.FromMonths(double months) -> NpgsqlTypes.NpgsqlTimeSpan
static NpgsqlTypes.NpgsqlTimeSpan.FromSeconds(double seconds) -> NpgsqlTypes.NpgsqlTimeSpan
static NpgsqlTypes.NpgsqlTimeSpan.FromTicks(long ticks) -> NpgsqlTypes.NpgsqlTimeSpan
static NpgsqlTypes.NpgsqlTimeSpan.implicit operator NpgsqlTypes.NpgsqlTimeSpan(System.TimeSpan timespan) -> NpgsqlTypes.NpgsqlTimeSpan
static NpgsqlTypes.NpgsqlTimeSpan.operator !=(NpgsqlTypes.NpgsqlTimeSpan x, NpgsqlTypes.NpgsqlTimeSpan y) -> bool
static NpgsqlTypes.NpgsqlTimeSpan.operator +(NpgsqlTypes.NpgsqlTimeSpan x) -> NpgsqlTypes.NpgsqlTimeSpan
static NpgsqlTypes.NpgsqlTimeSpan.operator +(NpgsqlTypes.NpgsqlTimeSpan x, NpgsqlTypes.NpgsqlTimeSpan y) -> NpgsqlTypes.NpgsqlTimeSpan
static NpgsqlTypes.NpgsqlTimeSpan.operator -(NpgsqlTypes.NpgsqlTimeSpan x) -> NpgsqlTypes.NpgsqlTimeSpan
static NpgsqlTypes.NpgsqlTimeSpan.operator -(NpgsqlTypes.NpgsqlTimeSpan x, NpgsqlTypes.NpgsqlTimeSpan y) -> NpgsqlTypes.NpgsqlTimeSpan
static NpgsqlTypes.NpgsqlTimeSpan.operator <(NpgsqlTypes.NpgsqlTimeSpan x, NpgsqlTypes.NpgsqlTimeSpan y) -> bool
static NpgsqlTypes.NpgsqlTimeSpan.operator <=(NpgsqlTypes.NpgsqlTimeSpan x, NpgsqlTypes.NpgsqlTimeSpan y) -> bool
static NpgsqlTypes.NpgsqlTimeSpan.operator ==(NpgsqlTypes.NpgsqlTimeSpan x, NpgsqlTypes.NpgsqlTimeSpan y) -> bool
static NpgsqlTypes.NpgsqlTimeSpan.operator >(NpgsqlTypes.NpgsqlTimeSpan x, NpgsqlTypes.NpgsqlTimeSpan y) -> bool
static NpgsqlTypes.NpgsqlTimeSpan.operator >=(NpgsqlTypes.NpgsqlTimeSpan x, NpgsqlTypes.NpgsqlTimeSpan y) -> bool
static NpgsqlTypes.NpgsqlTimeSpan.Parse(string! str) -> NpgsqlTypes.NpgsqlTimeSpan
static NpgsqlTypes.NpgsqlTimeSpan.Plus(in NpgsqlTypes.NpgsqlTimeSpan x) -> NpgsqlTypes.NpgsqlTimeSpan
static NpgsqlTypes.NpgsqlTimeSpan.ToNpgsqlTimeSpan(System.TimeSpan timespan) -> NpgsqlTypes.NpgsqlTimeSpan
static NpgsqlTypes.NpgsqlTimeSpan.ToTimeSpan(in NpgsqlTypes.NpgsqlTimeSpan interval) -> System.TimeSpan
static NpgsqlTypes.NpgsqlTimeSpan.TryParse(string! str, out NpgsqlTypes.NpgsqlTimeSpan result) -> bool
static NpgsqlTypes.NpgsqlTsQuery.Parse(string! value) -> NpgsqlTypes.NpgsqlTsQuery!
static NpgsqlTypes.NpgsqlTsVector.Lexeme.operator !=(NpgsqlTypes.NpgsqlTsVector.Lexeme left, NpgsqlTypes.NpgsqlTsVector.Lexeme right) -> bool
static NpgsqlTypes.NpgsqlTsVector.Lexeme.operator ==(NpgsqlTypes.NpgsqlTsVector.Lexeme left, NpgsqlTypes.NpgsqlTsVector.Lexeme right) -> bool
static NpgsqlTypes.NpgsqlTsVector.Lexeme.WordEntryPos.operator !=(NpgsqlTypes.NpgsqlTsVector.Lexeme.WordEntryPos left, NpgsqlTypes.NpgsqlTsVector.Lexeme.WordEntryPos right) -> bool
static NpgsqlTypes.NpgsqlTsVector.Lexeme.WordEntryPos.operator ==(NpgsqlTypes.NpgsqlTsVector.Lexeme.WordEntryPos left, NpgsqlTypes.NpgsqlTsVector.Lexeme.WordEntryPos right) -> bool
static NpgsqlTypes.NpgsqlTsVector.Parse(string! value) -> NpgsqlTypes.NpgsqlTsVector!
static readonly Npgsql.NpgsqlFactory.Instance -> Npgsql.NpgsqlFactory!
static readonly NpgsqlTypes.NpgsqlDate.Epoch -> NpgsqlTypes.NpgsqlDate
static readonly NpgsqlTypes.NpgsqlDate.Era -> NpgsqlTypes.NpgsqlDate
static readonly NpgsqlTypes.NpgsqlDate.Infinity -> NpgsqlTypes.NpgsqlDate
static readonly NpgsqlTypes.NpgsqlDate.MaxCalculableValue -> NpgsqlTypes.NpgsqlDate
static readonly NpgsqlTypes.NpgsqlDate.MinCalculableValue -> NpgsqlTypes.NpgsqlDate
static readonly NpgsqlTypes.NpgsqlDate.NegativeInfinity -> NpgsqlTypes.NpgsqlDate
static readonly NpgsqlTypes.NpgsqlDateTime.Epoch -> NpgsqlTypes.NpgsqlDateTime
static readonly NpgsqlTypes.NpgsqlDateTime.Era -> NpgsqlTypes.NpgsqlDateTime
static readonly NpgsqlTypes.NpgsqlDateTime.Infinity -> NpgsqlTypes.NpgsqlDateTime
static readonly NpgsqlTypes.NpgsqlDateTime.NegativeInfinity -> NpgsqlTypes.NpgsqlDateTime
static readonly NpgsqlTypes.NpgsqlLogSequenceNumber.Invalid -> NpgsqlTypes.NpgsqlLogSequenceNumber
static readonly NpgsqlTypes.NpgsqlRange<T>.Empty -> NpgsqlTypes.NpgsqlRange<T>
static readonly NpgsqlTypes.NpgsqlTimeSpan.MaxValue -> NpgsqlTypes.NpgsqlTimeSpan
static readonly NpgsqlTypes.NpgsqlTimeSpan.MinValue -> NpgsqlTypes.NpgsqlTimeSpan
static readonly NpgsqlTypes.NpgsqlTimeSpan.Zero -> NpgsqlTypes.NpgsqlTimeSpan
virtual Npgsql.NpgsqlDatabaseInfo.HasIntegerDateTimes.get -> bool
virtual Npgsql.NpgsqlDatabaseInfo.HasIntegerDateTimes.set -> void
virtual Npgsql.NpgsqlDatabaseInfo.SupportsAdvisoryLocks.get -> bool
virtual Npgsql.NpgsqlDatabaseInfo.SupportsCloseAll.get -> bool
virtual Npgsql.NpgsqlDatabaseInfo.SupportsDiscard.get -> bool
virtual Npgsql.NpgsqlDatabaseInfo.SupportsDiscardSequences.get -> bool
virtual Npgsql.NpgsqlDatabaseInfo.SupportsDiscardTemp.get -> bool
virtual Npgsql.NpgsqlDatabaseInfo.SupportsEnumTypes.get -> bool
virtual Npgsql.NpgsqlDatabaseInfo.SupportsRangeTypes.get -> bool
virtual Npgsql.NpgsqlDatabaseInfo.SupportsTransactions.get -> bool
virtual Npgsql.NpgsqlDatabaseInfo.SupportsTransactions.set -> void
virtual Npgsql.NpgsqlDatabaseInfo.SupportsUnlisten.get -> bool
virtual Npgsql.TypeHandlers.TextHandler.GetTextReader(System.IO.Stream! stream) -> System.IO.TextReader!
virtual Npgsql.TypeHandlers.TextHandler.ValidateAndGetLength(char[]! value, ref Npgsql.NpgsqlLengthCache? lengthCache, Npgsql.NpgsqlParameter? parameter) -> int
virtual Npgsql.TypeHandlers.TextHandler.ValidateAndGetLength(System.ArraySegment<char> value, ref Npgsql.NpgsqlLengthCache? lengthCache, Npgsql.NpgsqlParameter? parameter) -> int
virtual Npgsql.TypeHandlers.TextHandler.Write(char[]! value, Npgsql.NpgsqlWriteBuffer! buf, Npgsql.NpgsqlLengthCache? lengthCache, Npgsql.NpgsqlParameter? parameter, bool async, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
virtual Npgsql.TypeHandlers.TextHandler.Write(System.ArraySegment<char> value, Npgsql.NpgsqlWriteBuffer! buf, Npgsql.NpgsqlLengthCache? lengthCache, Npgsql.NpgsqlParameter? parameter, bool async, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
virtual Npgsql.TypeHandling.NpgsqlTypeHandler<TDefault>.WriteWithLength<TAny>(TAny value, Npgsql.NpgsqlWriteBuffer! buf, Npgsql.NpgsqlLengthCache? lengthCache, Npgsql.NpgsqlParameter? parameter, bool async, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
~Npgsql.TypeHandlers.FullTextSearchHandlers.TsQueryHandler.TsQueryHandler(Npgsql.PostgresTypes.PostgresType postgresType) -> void
~Npgsql.TypeHandlers.FullTextSearchHandlers.TsQueryHandler.ValidateAndGetLength(NpgsqlTypes.NpgsqlTsQueryAnd value, ref Npgsql.NpgsqlLengthCache? lengthCache, Npgsql.NpgsqlParameter? parameter) -> int
~Npgsql.TypeHandlers.FullTextSearchHandlers.TsQueryHandler.ValidateAndGetLength(NpgsqlTypes.NpgsqlTsQueryEmpty value, ref Npgsql.NpgsqlLengthCache? lengthCache, Npgsql.NpgsqlParameter? parameter) -> int
~Npgsql.TypeHandlers.FullTextSearchHandlers.TsQueryHandler.ValidateAndGetLength(NpgsqlTypes.NpgsqlTsQueryFollowedBy value, ref Npgsql.NpgsqlLengthCache? lengthCache, Npgsql.NpgsqlParameter? parameter) -> int
~Npgsql.TypeHandlers.FullTextSearchHandlers.TsQueryHandler.ValidateAndGetLength(NpgsqlTypes.NpgsqlTsQueryLexeme value, ref Npgsql.NpgsqlLengthCache? lengthCache, Npgsql.NpgsqlParameter? parameter) -> int
~Npgsql.TypeHandlers.FullTextSearchHandlers.TsQueryHandler.ValidateAndGetLength(NpgsqlTypes.NpgsqlTsQueryNot value, ref Npgsql.NpgsqlLengthCache? lengthCache, Npgsql.NpgsqlParameter? parameter) -> int
~Npgsql.TypeHandlers.FullTextSearchHandlers.TsQueryHandler.ValidateAndGetLength(NpgsqlTypes.NpgsqlTsQueryOr value, ref Npgsql.NpgsqlLengthCache? lengthCache, Npgsql.NpgsqlParameter? parameter) -> int
~Npgsql.TypeHandlers.FullTextSearchHandlers.TsQueryHandler.Write(NpgsqlTypes.NpgsqlTsQueryAnd value, Npgsql.NpgsqlWriteBuffer buf, Npgsql.NpgsqlLengthCache? lengthCache, Npgsql.NpgsqlParameter? parameter, bool async, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task
~Npgsql.TypeHandlers.FullTextSearchHandlers.TsQueryHandler.Write(NpgsqlTypes.NpgsqlTsQueryEmpty value, Npgsql.NpgsqlWriteBuffer buf, Npgsql.NpgsqlLengthCache? lengthCache, Npgsql.NpgsqlParameter? parameter, bool async, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task
~Npgsql.TypeHandlers.FullTextSearchHandlers.TsQueryHandler.Write(NpgsqlTypes.NpgsqlTsQueryFollowedBy value, Npgsql.NpgsqlWriteBuffer buf, Npgsql.NpgsqlLengthCache? lengthCache, Npgsql.NpgsqlParameter? parameter, bool async, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task
~Npgsql.TypeHandlers.FullTextSearchHandlers.TsQueryHandler.Write(NpgsqlTypes.NpgsqlTsQueryLexeme value, Npgsql.NpgsqlWriteBuffer buf, Npgsql.NpgsqlLengthCache? lengthCache, Npgsql.NpgsqlParameter? parameter, bool async, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task
~Npgsql.TypeHandlers.FullTextSearchHandlers.TsQueryHandler.Write(NpgsqlTypes.NpgsqlTsQueryNot value, Npgsql.NpgsqlWriteBuffer buf, Npgsql.NpgsqlLengthCache? lengthCache, Npgsql.NpgsqlParameter? parameter, bool async, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task
~Npgsql.TypeHandlers.FullTextSearchHandlers.TsQueryHandler.Write(NpgsqlTypes.NpgsqlTsQueryOr value, Npgsql.NpgsqlWriteBuffer buf, Npgsql.NpgsqlLengthCache? lengthCache, Npgsql.NpgsqlParameter? parameter, bool async, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task
~override Npgsql.TypeHandlers.FullTextSearchHandlers.TsQueryHandler.Read(Npgsql.NpgsqlReadBuffer buf, int len, bool async, Npgsql.BackendMessages.FieldDescription? fieldDescription = null) -> System.Threading.Tasks.ValueTask<NpgsqlTypes.NpgsqlTsQuery>
~override Npgsql.TypeHandlers.FullTextSearchHandlers.TsQueryHandler.ValidateAndGetLength(NpgsqlTypes.NpgsqlTsQuery value, ref Npgsql.NpgsqlLengthCache? lengthCache, Npgsql.NpgsqlParameter? parameter) -> int
~override Npgsql.TypeHandlers.FullTextSearchHandlers.TsQueryHandler.Write(NpgsqlTypes.NpgsqlTsQuery query, Npgsql.NpgsqlWriteBuffer buf, Npgsql.NpgsqlLengthCache? lengthCache, Npgsql.NpgsqlParameter? parameter, bool async, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task
~override NpgsqlTypes.NpgsqlRange<T>.RangeTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type sourceType) -> bool
~override NpgsqlTypes.NpgsqlRange<T>.RangeTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType) -> bool
~override NpgsqlTypes.NpgsqlRange<T>.RangeTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value) -> object
~override NpgsqlTypes.NpgsqlRange<T>.RangeTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) -> object