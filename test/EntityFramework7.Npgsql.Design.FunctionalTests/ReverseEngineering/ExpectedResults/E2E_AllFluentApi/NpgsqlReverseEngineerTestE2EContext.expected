using Microsoft.Data.Entity;
using Microsoft.Data.Entity.Metadata;

namespace E2ETest.Namespace
{
    public partial class NpgsqlReverseEngineerTestE2EContext : DbContext
    {
        protected override void OnConfiguring(DbContextOptionsBuilder options)
        {
            options.UseNpgsql(@"Host=localhost;Username=npgsql_tests;Password=npgsql_tests;Persist Security Info=True;Database=NpgsqlReverseEngineerTestE2E");
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<AllDataTypes>(entity =>
            {
                entity.Property(e => e.charColumn)
                    .HasMaxLength(1)
                    .HasColumnType("bpchar");

                entity.Property(e => e.dateColumn).HasColumnType("date");

                entity.Property(e => e.moneyColumn).HasColumnType("money");

                entity.Property(e => e.timeColumn).HasColumnType("time");

                entity.Property(e => e.timestampTzColumn).HasColumnType("timestamptz");

                entity.Property(e => e.varcharColumn).HasColumnType("varchar");
            });

            modelBuilder.Entity<OneToManyDependent>(entity =>
            {
                entity.HasKey(e => new { e.OneToManyDependentID1, e.OneToManyDependentID2 })
                    .HasName("PK_OneToManyDependent");

                entity.Property(e => e.SomeDependentEndColumn).IsRequired();

                entity.HasOne(d => d.OneToManyDependentFK)
                    .WithMany(p => p.OneToManyDependent)
                    .HasForeignKey(d => new { d.OneToManyDependentFK1, d.OneToManyDependentFK2 })
                    .HasConstraintName("FK_OneToManyDependent");
            });

            modelBuilder.Entity<OneToManyPrincipal>(entity =>
            {
                entity.HasKey(e => new { e.OneToManyPrincipalID1, e.OneToManyPrincipalID2 })
                    .HasName("PK_OneToManyPrincipal");

                entity.Property(e => e.Other).IsRequired();
            });

            modelBuilder.Entity<OneToOneDependent>(entity =>
            {
                entity.HasKey(e => new { e.OneToOneDependentID1, e.OneToOneDependentID2 })
                    .HasName("PK_OneToOneDependent");

                entity.Property(e => e.SomeDependentEndColumn).IsRequired();

                entity.HasOne(d => d.OneToOneDependentNavigation)
                    .WithOne(p => p.OneToOneDependent)
                    .HasForeignKey<OneToOneDependent>(d => new { d.OneToOneDependentID1, d.OneToOneDependentID2 })
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_OneToOneDependent");
            });

            modelBuilder.Entity<OneToOneFKToUniqueKeyDependent>(entity =>
            {
                entity.HasKey(e => new { e.OneToOneFKToUniqueKeyDependentID1, e.OneToOneFKToUniqueKeyDependentID2 })
                    .HasName("PK_OneToOneFKToUniqueKeyDependent");

                entity.HasIndex(e => new { e.OneToOneFKToUniqueKeyDependentFK1, e.OneToOneFKToUniqueKeyDependentFK2 })
                    .HasName("UK_OneToOneFKToUniqueKeyDependent")
                    .IsUnique();

                entity.Property(e => e.OneToOneFKToUniqueKeyDependentFK1).IsRequired();

                entity.Property(e => e.OneToOneFKToUniqueKeyDependentFK2).IsRequired();

                entity.Property(e => e.SomeColumn).IsRequired();

                entity.HasOne(d => d.OneToOneFKToUniqueKeyDependentFK)
                    .WithOne(p => p.OneToOneFKToUniqueKeyDependent)
                    .HasPrincipalKey<OneToOneFKToUniqueKeyPrincipal>(p => new { p.OneToOneFKToUniqueKeyPrincipalUniqueKey1, p.OneToOneFKToUniqueKeyPrincipalUniqueKey2 })
                    .HasForeignKey<OneToOneFKToUniqueKeyDependent>(d => new { d.OneToOneFKToUniqueKeyDependentFK1, d.OneToOneFKToUniqueKeyDependentFK2 })
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_OneToOneFKToUniqueKeyDependent");
            });

            modelBuilder.Entity<OneToOneFKToUniqueKeyPrincipal>(entity =>
            {
                entity.HasKey(e => new { e.OneToOneFKToUniqueKeyPrincipalID1, e.OneToOneFKToUniqueKeyPrincipalID2 })
                    .HasName("PK_OneToOneFKToUniqueKeyPrincipal");

                entity.HasIndex(e => new { e.OneToOneFKToUniqueKeyPrincipalUniqueKey1, e.OneToOneFKToUniqueKeyPrincipalUniqueKey2 })
                    .HasName("UK_OneToOneFKToUniqueKeyPrincipal")
                    .IsUnique();

                entity.Property(e => e.SomePrincipalColumn).IsRequired();
            });

            modelBuilder.Entity<OneToOnePrincipal>(entity =>
            {
                entity.HasKey(e => new { e.OneToOnePrincipalID1, e.OneToOnePrincipalID2 })
                    .HasName("PK_OneToOnePrincipal");

                entity.Property(e => e.SomeOneToOnePrincipalColumn).IsRequired();
            });

            modelBuilder.Entity<OneToOneSeparateFKDependent>(entity =>
            {
                entity.HasKey(e => new { e.OneToOneSeparateFKDependentID1, e.OneToOneSeparateFKDependentID2 })
                    .HasName("PK_OneToOneSeparateFKDependent");

                entity.HasIndex(e => new { e.OneToOneSeparateFKDependentFK1, e.OneToOneSeparateFKDependentFK2 })
                    .HasName("UK_OneToOneSeparateFKDependent")
                    .IsUnique();

                entity.Property(e => e.OneToOneSeparateFKDependentFK1).IsRequired();

                entity.Property(e => e.OneToOneSeparateFKDependentFK2).IsRequired();

                entity.Property(e => e.SomeDependentEndColumn).IsRequired();

                entity.HasOne(d => d.OneToOneSeparateFKDependentFK)
                    .WithOne(p => p.OneToOneSeparateFKDependent)
                    .HasForeignKey<OneToOneSeparateFKDependent>(d => new { d.OneToOneSeparateFKDependentFK1, d.OneToOneSeparateFKDependentFK2 })
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_OneToOneSeparateFKDependent");
            });

            modelBuilder.Entity<OneToOneSeparateFKPrincipal>(entity =>
            {
                entity.HasKey(e => new { e.OneToOneSeparateFKPrincipalID1, e.OneToOneSeparateFKPrincipalID2 })
                    .HasName("PK_OneToOneSeparateFKPrincipal");

                entity.Property(e => e.SomeOneToOneSeparateFKPrincipalColumn).IsRequired();
            });

            modelBuilder.Entity<PropertyConfiguration>(entity =>
            {
                entity.HasIndex(e => new { e.A, e.B })
                    .HasName("Test_PropertyConfiguration_Index");

                entity.Property(e => e.WithDateDefaultExpression).HasDefaultValueSql("now()");

                entity.Property(e => e.WithDateFixedDefault).HasDefaultValueSql("'2015-10-20 11:00:00'::timestamp without time zone");

                entity.Property(e => e.WithDefaultValue).HasDefaultValueSql("(-1)");

                entity.Property(e => e.WithMoneyDefaultValue)
                    .HasColumnType("money")
                    .HasDefaultValueSql("0.00");

                entity.Property(e => e.WithVarcharNullDefaultValue).HasColumnType("varchar");
            });

            modelBuilder.Entity<SelfReferencing>(entity =>
            {
                entity.Property(e => e.SelfReferencingID).ValueGeneratedNever();

                entity.Property(e => e.Description).IsRequired();

                entity.Property(e => e.Name).IsRequired();

                entity.HasOne(d => d.SelfReferenceFKNavigation)
                    .WithMany(p => p.InverseSelfReferenceFKNavigation)
                    .HasForeignKey(d => d.SelfReferenceFK)
                    .HasConstraintName("FK_SelfReferencing");
            });

            modelBuilder.Entity<SpecialTypes>(entity =>
            {
                entity.Property(e => e.SpecialTypesID).ValueGeneratedNever();
            });

            modelBuilder.Entity<Test_Spaces_Keywords_Table>(entity =>
            {
                entity.ToTable("Test Spaces Keywords Table");

                entity.Property(e => e.Test_Spaces_Keywords_TableID)
                    .HasColumnName("Test Spaces Keywords TableID")
                    .ValueGeneratedNever();

                entity.Property(e => e.@Multiple_At_Symbols_In_Column).HasColumnName("@Multiple@At@Symbols@In@Column");

                entity.Property(e => e._abstract).HasColumnName("abstract");

                entity.Property(e => e._Backslashes_In_Column).HasColumnName("\\Backslashes\\In\\Column");

                entity.Property(e => e._class).HasColumnName("class");

                entity.Property(e => e._Dollar_Sign_Column).HasColumnName("$Dollar$Sign$Column");

                entity.Property(e => e._Double_Quotes_Column).HasColumnName("\"Double\"Quotes\"Column");

                entity.Property(e => e._Exclamation_Mark_Column).HasColumnName("!Exclamation!Mark!Column");

                entity.Property(e => e._volatile).HasColumnName("volatile");

                entity.Property(e => e.Commas_In_Column).HasColumnName("Commas,In,Column");

                entity.Property(e => e.Spaces_In_Column).HasColumnName("Spaces In Column");

                entity.Property(e => e.Tabs_In_Column).HasColumnName("Tabs\tIn\tColumn");
            });
        }

        public virtual DbSet<AllDataTypes> AllDataTypes { get; set; }
        public virtual DbSet<OneToManyDependent> OneToManyDependent { get; set; }
        public virtual DbSet<OneToManyPrincipal> OneToManyPrincipal { get; set; }
        public virtual DbSet<OneToOneDependent> OneToOneDependent { get; set; }
        public virtual DbSet<OneToOneFKToUniqueKeyDependent> OneToOneFKToUniqueKeyDependent { get; set; }
        public virtual DbSet<OneToOneFKToUniqueKeyPrincipal> OneToOneFKToUniqueKeyPrincipal { get; set; }
        public virtual DbSet<OneToOnePrincipal> OneToOnePrincipal { get; set; }
        public virtual DbSet<OneToOneSeparateFKDependent> OneToOneSeparateFKDependent { get; set; }
        public virtual DbSet<OneToOneSeparateFKPrincipal> OneToOneSeparateFKPrincipal { get; set; }
        public virtual DbSet<PropertyConfiguration> PropertyConfiguration { get; set; }
        public virtual DbSet<SelfReferencing> SelfReferencing { get; set; }
        public virtual DbSet<SpecialTypes> SpecialTypes { get; set; }
        public virtual DbSet<Test_Spaces_Keywords_Table> Test_Spaces_Keywords_Table { get; set; }
    }
}