#if NET40
//------------------------------------------------------------------------------
// <auto-generated>
//    このコードはテンプレートから生成されました。
//
//    このファイルを手動で変更すると、アプリケーションで予期しない動作が発生する可能性があります。
//    このファイルに対する手動の変更は、コードが再生成されると上書きされます。
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.ComponentModel;
using System.Data.Entity.Core.EntityClient;
using System.Data.Entity.Core.Objects;
using System.Data.Entity.Core.Objects.DataClasses;
using System.Linq;
using System.Runtime.Serialization;
using System.Xml.Serialization;

[assembly: EdmSchemaAttribute()]
#region EDM リレーションシップのメタデータ

[assembly: EdmRelationshipAttribute("Store", "TableOrViewColumn", "Parent", System.Data.Entity.Core.Metadata.Edm.RelationshipMultiplicity.One, typeof(Store.TableOrView), "Column", System.Data.Entity.Core.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Store.Column))]
[assembly: EdmRelationshipAttribute("Store", "TableOrViewConstraint", "Parent", System.Data.Entity.Core.Metadata.Edm.RelationshipMultiplicity.One, typeof(Store.TableOrView), "Constraint", System.Data.Entity.Core.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Store.Constraint))]
[assembly: EdmRelationshipAttribute("Store", "TableOrViewConstraintColumn", "Constraint", System.Data.Entity.Core.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Store.TableOrViewColumnConstraint), "Column", System.Data.Entity.Core.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Store.Column))]
[assembly: EdmRelationshipAttribute("Store", "ConstraintForeignKey", "Constraint", System.Data.Entity.Core.Metadata.Edm.RelationshipMultiplicity.One, typeof(Store.ForeignKeyConstraint), "ForeignKey", System.Data.Entity.Core.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Store.ForeignKey))]
[assembly: EdmRelationshipAttribute("Store", "FromForeignKeyColumn", "ForeignKey", System.Data.Entity.Core.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Store.ForeignKey), "Column", System.Data.Entity.Core.Metadata.Edm.RelationshipMultiplicity.One, typeof(Store.Column))]
[assembly: EdmRelationshipAttribute("Store", "ToForeignKeyColumn", "ForeignKey", System.Data.Entity.Core.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Store.ForeignKey), "Column", System.Data.Entity.Core.Metadata.Edm.RelationshipMultiplicity.One, typeof(Store.Column))]
[assembly: EdmRelationshipAttribute("Store", "RoutineParameter", "Routine", System.Data.Entity.Core.Metadata.Edm.RelationshipMultiplicity.One, typeof(Store.Routine), "Parameter", System.Data.Entity.Core.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Store.Parameter))]

#endregion

namespace Store
{
    #region コンテキスト
    
    /// <summary>
    /// 使用できるメタデータ ドキュメントはありません。
    /// </summary>
    public partial class SchemaInformation : ObjectContext
    {
        #region コンストラクター
    
        /// <summary>
        /// アプリケーション構成ファイルの 'SchemaInformation' セクションにある接続文字列を使用して新しい SchemaInformation オブジェクトを初期化します。
        /// </summary>
        public SchemaInformation() : base("name=SchemaInformation", "SchemaInformation")
        {
            OnContextCreated();
        }
    
        /// <summary>
        /// 新しい SchemaInformation オブジェクトを初期化します。
        /// </summary>
        public SchemaInformation(string connectionString) : base(connectionString, "SchemaInformation")
        {
            OnContextCreated();
        }
    
        /// <summary>
        /// 新しい SchemaInformation オブジェクトを初期化します。
        /// </summary>
        public SchemaInformation(EntityConnection connection) : base(connection, "SchemaInformation")
        {
            OnContextCreated();
        }
    
        #endregion
    
        #region 部分メソッド
    
        partial void OnContextCreated();
    
        #endregion
    
        #region ObjectSet プロパティ
    
        /// <summary>
        /// 使用できるメタデータ ドキュメントはありません。
        /// </summary>
        public ObjectSet<Table> Tables
        {
            get
            {
                if ((_Tables == null))
                {
                    _Tables = base.CreateObjectSet<Table>("Tables");
                }
                return _Tables;
            }
        }
        private ObjectSet<Table> _Tables;
    
        /// <summary>
        /// 使用できるメタデータ ドキュメントはありません。
        /// </summary>
        public ObjectSet<Column> TableColumns
        {
            get
            {
                if ((_TableColumns == null))
                {
                    _TableColumns = base.CreateObjectSet<Column>("TableColumns");
                }
                return _TableColumns;
            }
        }
        private ObjectSet<Column> _TableColumns;
    
        /// <summary>
        /// 使用できるメタデータ ドキュメントはありません。
        /// </summary>
        public ObjectSet<Constraint> TableConstraints
        {
            get
            {
                if ((_TableConstraints == null))
                {
                    _TableConstraints = base.CreateObjectSet<Constraint>("TableConstraints");
                }
                return _TableConstraints;
            }
        }
        private ObjectSet<Constraint> _TableConstraints;
    
        /// <summary>
        /// 使用できるメタデータ ドキュメントはありません。
        /// </summary>
        public ObjectSet<ForeignKey> TableForeignKeys
        {
            get
            {
                if ((_TableForeignKeys == null))
                {
                    _TableForeignKeys = base.CreateObjectSet<ForeignKey>("TableForeignKeys");
                }
                return _TableForeignKeys;
            }
        }
        private ObjectSet<ForeignKey> _TableForeignKeys;
    
        /// <summary>
        /// 使用できるメタデータ ドキュメントはありません。
        /// </summary>
        public ObjectSet<View> Views
        {
            get
            {
                if ((_Views == null))
                {
                    _Views = base.CreateObjectSet<View>("Views");
                }
                return _Views;
            }
        }
        private ObjectSet<View> _Views;
    
        /// <summary>
        /// 使用できるメタデータ ドキュメントはありません。
        /// </summary>
        public ObjectSet<Column> ViewColumns
        {
            get
            {
                if ((_ViewColumns == null))
                {
                    _ViewColumns = base.CreateObjectSet<Column>("ViewColumns");
                }
                return _ViewColumns;
            }
        }
        private ObjectSet<Column> _ViewColumns;
    
        /// <summary>
        /// 使用できるメタデータ ドキュメントはありません。
        /// </summary>
        public ObjectSet<Constraint> ViewConstraints
        {
            get
            {
                if ((_ViewConstraints == null))
                {
                    _ViewConstraints = base.CreateObjectSet<Constraint>("ViewConstraints");
                }
                return _ViewConstraints;
            }
        }
        private ObjectSet<Constraint> _ViewConstraints;
    
        /// <summary>
        /// 使用できるメタデータ ドキュメントはありません。
        /// </summary>
        public ObjectSet<ForeignKey> ViewForeignKeys
        {
            get
            {
                if ((_ViewForeignKeys == null))
                {
                    _ViewForeignKeys = base.CreateObjectSet<ForeignKey>("ViewForeignKeys");
                }
                return _ViewForeignKeys;
            }
        }
        private ObjectSet<ForeignKey> _ViewForeignKeys;
    
        /// <summary>
        /// 使用できるメタデータ ドキュメントはありません。
        /// </summary>
        public ObjectSet<Function> Functions
        {
            get
            {
                if ((_Functions == null))
                {
                    _Functions = base.CreateObjectSet<Function>("Functions");
                }
                return _Functions;
            }
        }
        private ObjectSet<Function> _Functions;
    
        /// <summary>
        /// 使用できるメタデータ ドキュメントはありません。
        /// </summary>
        public ObjectSet<Parameter> FunctionParameters
        {
            get
            {
                if ((_FunctionParameters == null))
                {
                    _FunctionParameters = base.CreateObjectSet<Parameter>("FunctionParameters");
                }
                return _FunctionParameters;
            }
        }
        private ObjectSet<Parameter> _FunctionParameters;
    
        /// <summary>
        /// 使用できるメタデータ ドキュメントはありません。
        /// </summary>
        public ObjectSet<Procedure> Procedures
        {
            get
            {
                if ((_Procedures == null))
                {
                    _Procedures = base.CreateObjectSet<Procedure>("Procedures");
                }
                return _Procedures;
            }
        }
        private ObjectSet<Procedure> _Procedures;
    
        /// <summary>
        /// 使用できるメタデータ ドキュメントはありません。
        /// </summary>
        public ObjectSet<Parameter> ProcedureParameters
        {
            get
            {
                if ((_ProcedureParameters == null))
                {
                    _ProcedureParameters = base.CreateObjectSet<Parameter>("ProcedureParameters");
                }
                return _ProcedureParameters;
            }
        }
        private ObjectSet<Parameter> _ProcedureParameters;

        #endregion

        #region AddTo メソッド
    
        /// <summary>
        /// Tables EntitySet に新しいオブジェクトを追加するための非推奨のメソッドです。代わりに、関連付けられている ObjectSet&lt;T&gt; プロパティの .Add メソッドを使用してください。
        /// </summary>
        public void AddToTables(Table table)
        {
            base.AddObject("Tables", table);
        }
    
        /// <summary>
        /// TableColumns EntitySet に新しいオブジェクトを追加するための非推奨のメソッドです。代わりに、関連付けられている ObjectSet&lt;T&gt; プロパティの .Add メソッドを使用してください。
        /// </summary>
        public void AddToTableColumns(Column column)
        {
            base.AddObject("TableColumns", column);
        }
    
        /// <summary>
        /// TableConstraints EntitySet に新しいオブジェクトを追加するための非推奨のメソッドです。代わりに、関連付けられている ObjectSet&lt;T&gt; プロパティの .Add メソッドを使用してください。
        /// </summary>
        public void AddToTableConstraints(Constraint constraint)
        {
            base.AddObject("TableConstraints", constraint);
        }
    
        /// <summary>
        /// TableForeignKeys EntitySet に新しいオブジェクトを追加するための非推奨のメソッドです。代わりに、関連付けられている ObjectSet&lt;T&gt; プロパティの .Add メソッドを使用してください。
        /// </summary>
        public void AddToTableForeignKeys(ForeignKey foreignKey)
        {
            base.AddObject("TableForeignKeys", foreignKey);
        }
    
        /// <summary>
        /// Views EntitySet に新しいオブジェクトを追加するための非推奨のメソッドです。代わりに、関連付けられている ObjectSet&lt;T&gt; プロパティの .Add メソッドを使用してください。
        /// </summary>
        public void AddToViews(View view)
        {
            base.AddObject("Views", view);
        }
    
        /// <summary>
        /// ViewColumns EntitySet に新しいオブジェクトを追加するための非推奨のメソッドです。代わりに、関連付けられている ObjectSet&lt;T&gt; プロパティの .Add メソッドを使用してください。
        /// </summary>
        public void AddToViewColumns(Column column)
        {
            base.AddObject("ViewColumns", column);
        }
    
        /// <summary>
        /// ViewConstraints EntitySet に新しいオブジェクトを追加するための非推奨のメソッドです。代わりに、関連付けられている ObjectSet&lt;T&gt; プロパティの .Add メソッドを使用してください。
        /// </summary>
        public void AddToViewConstraints(Constraint constraint)
        {
            base.AddObject("ViewConstraints", constraint);
        }
    
        /// <summary>
        /// ViewForeignKeys EntitySet に新しいオブジェクトを追加するための非推奨のメソッドです。代わりに、関連付けられている ObjectSet&lt;T&gt; プロパティの .Add メソッドを使用してください。
        /// </summary>
        public void AddToViewForeignKeys(ForeignKey foreignKey)
        {
            base.AddObject("ViewForeignKeys", foreignKey);
        }
    
        /// <summary>
        /// Functions EntitySet に新しいオブジェクトを追加するための非推奨のメソッドです。代わりに、関連付けられている ObjectSet&lt;T&gt; プロパティの .Add メソッドを使用してください。
        /// </summary>
        public void AddToFunctions(Function function)
        {
            base.AddObject("Functions", function);
        }
    
        /// <summary>
        /// FunctionParameters EntitySet に新しいオブジェクトを追加するための非推奨のメソッドです。代わりに、関連付けられている ObjectSet&lt;T&gt; プロパティの .Add メソッドを使用してください。
        /// </summary>
        public void AddToFunctionParameters(Parameter parameter)
        {
            base.AddObject("FunctionParameters", parameter);
        }
    
        /// <summary>
        /// Procedures EntitySet に新しいオブジェクトを追加するための非推奨のメソッドです。代わりに、関連付けられている ObjectSet&lt;T&gt; プロパティの .Add メソッドを使用してください。
        /// </summary>
        public void AddToProcedures(Procedure procedure)
        {
            base.AddObject("Procedures", procedure);
        }
    
        /// <summary>
        /// ProcedureParameters EntitySet に新しいオブジェクトを追加するための非推奨のメソッドです。代わりに、関連付けられている ObjectSet&lt;T&gt; プロパティの .Add メソッドを使用してください。
        /// </summary>
        public void AddToProcedureParameters(Parameter parameter)
        {
            base.AddObject("ProcedureParameters", parameter);
        }

        #endregion

    }

    #endregion

    #region エンティティ
    
    /// <summary>
    /// 使用できるメタデータ ドキュメントはありません。
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="Store", Name="CheckConstraint")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class CheckConstraint : Constraint
    {
        #region ファクトリ メソッド
    
        /// <summary>
        /// 新しい CheckConstraint オブジェクトを作成します。
        /// </summary>
        /// <param name="id">Id プロパティの初期値。</param>
        /// <param name="name">Name プロパティの初期値。</param>
        /// <param name="isDeferrable">IsDeferrable プロパティの初期値。</param>
        /// <param name="isInitiallyDeferred">IsInitiallyDeferred プロパティの初期値。</param>
        public static CheckConstraint CreateCheckConstraint(global::System.String id, global::System.String name, global::System.Boolean isDeferrable, global::System.Boolean isInitiallyDeferred)
        {
            CheckConstraint checkConstraint = new CheckConstraint();
            checkConstraint.Id = id;
            checkConstraint.Name = name;
            checkConstraint.IsDeferrable = isDeferrable;
            checkConstraint.IsInitiallyDeferred = isInitiallyDeferred;
            return checkConstraint;
        }

        #endregion

        #region プリミティブ プロパティ
    
        /// <summary>
        /// 使用できるメタデータ ドキュメントはありません。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Expression
        {
            get
            {
                return _Expression;
            }
            set
            {
                OnExpressionChanging(value);
                ReportPropertyChanging("Expression");
                _Expression = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Expression");
                OnExpressionChanged();
            }
        }
        private global::System.String _Expression;
        partial void OnExpressionChanging(global::System.String value);
        partial void OnExpressionChanged();

        #endregion

    
    }
    
    /// <summary>
    /// 使用できるメタデータ ドキュメントはありません。
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="Store", Name="Column")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Column : EntityObject
    {
        #region ファクトリ メソッド
    
        /// <summary>
        /// 新しい Column オブジェクトを作成します。
        /// </summary>
        /// <param name="id">Id プロパティの初期値。</param>
        /// <param name="name">Name プロパティの初期値。</param>
        /// <param name="ordinal">Ordinal プロパティの初期値。</param>
        /// <param name="isNullable">IsNullable プロパティの初期値。</param>
        /// <param name="columnType">ColumnType プロパティの初期値。</param>
        /// <param name="isIdentity">IsIdentity プロパティの初期値。</param>
        /// <param name="isStoreGenerated">IsStoreGenerated プロパティの初期値。</param>
        public static Column CreateColumn(global::System.String id, global::System.String name, global::System.Int32 ordinal, global::System.Boolean isNullable, TypeSpecification columnType, global::System.Boolean isIdentity, global::System.Boolean isStoreGenerated)
        {
            Column column = new Column();
            column.Id = id;
            column.Name = name;
            column.Ordinal = ordinal;
            column.IsNullable = isNullable;
            column.ColumnType = StructuralObject.VerifyComplexObjectIsNotNull(columnType, "ColumnType");
            column.IsIdentity = isIdentity;
            column.IsStoreGenerated = isStoreGenerated;
            return column;
        }

        #endregion

        #region プリミティブ プロパティ
    
        /// <summary>
        /// 使用できるメタデータ ドキュメントはありません。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value, false);
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.String _Id;
        partial void OnIdChanging(global::System.String value);
        partial void OnIdChanged();
    
        /// <summary>
        /// 使用できるメタデータ ドキュメントはありません。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Name
        {
            get
            {
                return _Name;
            }
            set
            {
                OnNameChanging(value);
                ReportPropertyChanging("Name");
                _Name = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Name");
                OnNameChanged();
            }
        }
        private global::System.String _Name;
        partial void OnNameChanging(global::System.String value);
        partial void OnNameChanged();
    
        /// <summary>
        /// 使用できるメタデータ ドキュメントはありません。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Ordinal
        {
            get
            {
                return _Ordinal;
            }
            set
            {
                OnOrdinalChanging(value);
                ReportPropertyChanging("Ordinal");
                _Ordinal = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Ordinal");
                OnOrdinalChanged();
            }
        }
        private global::System.Int32 _Ordinal;
        partial void OnOrdinalChanging(global::System.Int32 value);
        partial void OnOrdinalChanged();
    
        /// <summary>
        /// 使用できるメタデータ ドキュメントはありません。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Boolean IsNullable
        {
            get
            {
                return _IsNullable;
            }
            set
            {
                OnIsNullableChanging(value);
                ReportPropertyChanging("IsNullable");
                _IsNullable = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("IsNullable");
                OnIsNullableChanged();
            }
        }
        private global::System.Boolean _IsNullable;
        partial void OnIsNullableChanging(global::System.Boolean value);
        partial void OnIsNullableChanged();
    
        /// <summary>
        /// 使用できるメタデータ ドキュメントはありません。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Boolean IsIdentity
        {
            get
            {
                return _IsIdentity;
            }
            set
            {
                OnIsIdentityChanging(value);
                ReportPropertyChanging("IsIdentity");
                _IsIdentity = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("IsIdentity");
                OnIsIdentityChanged();
            }
        }
        private global::System.Boolean _IsIdentity;
        partial void OnIsIdentityChanging(global::System.Boolean value);
        partial void OnIsIdentityChanged();
    
        /// <summary>
        /// 使用できるメタデータ ドキュメントはありません。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Boolean IsStoreGenerated
        {
            get
            {
                return _IsStoreGenerated;
            }
            set
            {
                OnIsStoreGeneratedChanging(value);
                ReportPropertyChanging("IsStoreGenerated");
                _IsStoreGenerated = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("IsStoreGenerated");
                OnIsStoreGeneratedChanged();
            }
        }
        private global::System.Boolean _IsStoreGenerated;
        partial void OnIsStoreGeneratedChanging(global::System.Boolean value);
        partial void OnIsStoreGeneratedChanged();
    
        /// <summary>
        /// 使用できるメタデータ ドキュメントはありません。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Default
        {
            get
            {
                return _Default;
            }
            set
            {
                OnDefaultChanging(value);
                ReportPropertyChanging("Default");
                _Default = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Default");
                OnDefaultChanged();
            }
        }
        private global::System.String _Default;
        partial void OnDefaultChanging(global::System.String value);
        partial void OnDefaultChanged();

        #endregion

        #region 複合プロパティ
    
        /// <summary>
        /// 使用できるメタデータ ドキュメントはありません。
        /// </summary>
        [EdmComplexPropertyAttribute()]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
        [XmlElement(IsNullable=true)]
        [SoapElement(IsNullable=true)]
        [DataMemberAttribute()]
        public TypeSpecification ColumnType
        {
            get
            {
                _ColumnType = GetValidValue(_ColumnType, "ColumnType", false, _ColumnTypeInitialized);
                _ColumnTypeInitialized = true;
                return _ColumnType;
            }
            set
            {
                OnColumnTypeChanging(value);
                ReportPropertyChanging("ColumnType");
                _ColumnType = SetValidValue(_ColumnType, value, "ColumnType");
                _ColumnTypeInitialized = true;
                ReportPropertyChanged("ColumnType");
                OnColumnTypeChanged();
            }
        }
        private TypeSpecification _ColumnType;
        private bool _ColumnTypeInitialized;
        partial void OnColumnTypeChanging(TypeSpecification value);
        partial void OnColumnTypeChanged();

        #endregion

    
        #region ナビゲーション プロパティ
    
        /// <summary>
        /// 使用できるメタデータ ドキュメントはありません。
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("Store", "TableOrViewColumn", "Parent")]
        public TableOrView Parent
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<TableOrView>("Store.TableOrViewColumn", "Parent").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<TableOrView>("Store.TableOrViewColumn", "Parent").Value = value;
            }
        }
        /// <summary>
        /// 使用できるメタデータ ドキュメントはありません。
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<TableOrView> ParentReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<TableOrView>("Store.TableOrViewColumn", "Parent");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<TableOrView>("Store.TableOrViewColumn", "Parent", value);
                }
            }
        }
    
        /// <summary>
        /// 使用できるメタデータ ドキュメントはありません。
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("Store", "TableOrViewConstraintColumn", "Constraint")]
        public EntityCollection<TableOrViewColumnConstraint> Constraints
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<TableOrViewColumnConstraint>("Store.TableOrViewConstraintColumn", "Constraint");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<TableOrViewColumnConstraint>("Store.TableOrViewConstraintColumn", "Constraint", value);
                }
            }
        }
    
        /// <summary>
        /// 使用できるメタデータ ドキュメントはありません。
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("Store", "ToForeignKeyColumn", "ForeignKey")]
        public EntityCollection<ForeignKey> ToForeignKeys
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<ForeignKey>("Store.ToForeignKeyColumn", "ForeignKey");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<ForeignKey>("Store.ToForeignKeyColumn", "ForeignKey", value);
                }
            }
        }
    
        /// <summary>
        /// 使用できるメタデータ ドキュメントはありません。
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("Store", "FromForeignKeyColumn", "ForeignKey")]
        public EntityCollection<ForeignKey> FromForeignKeys
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<ForeignKey>("Store.FromForeignKeyColumn", "ForeignKey");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<ForeignKey>("Store.FromForeignKeyColumn", "ForeignKey", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// 使用できるメタデータ ドキュメントはありません。
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="Store", Name="Constraint")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    [KnownTypeAttribute(typeof(TableOrViewColumnConstraint))]
    [KnownTypeAttribute(typeof(ForeignKeyConstraint))]
    [KnownTypeAttribute(typeof(CheckConstraint))]
    public abstract partial class Constraint : EntityObject
    {
        #region プリミティブ プロパティ
    
        /// <summary>
        /// 使用できるメタデータ ドキュメントはありません。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value, false);
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.String _Id;
        partial void OnIdChanging(global::System.String value);
        partial void OnIdChanged();
    
        /// <summary>
        /// 使用できるメタデータ ドキュメントはありません。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Name
        {
            get
            {
                return _Name;
            }
            set
            {
                OnNameChanging(value);
                ReportPropertyChanging("Name");
                _Name = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Name");
                OnNameChanged();
            }
        }
        private global::System.String _Name;
        partial void OnNameChanging(global::System.String value);
        partial void OnNameChanged();
    
        /// <summary>
        /// 使用できるメタデータ ドキュメントはありません。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Boolean IsDeferrable
        {
            get
            {
                return _IsDeferrable;
            }
            set
            {
                OnIsDeferrableChanging(value);
                ReportPropertyChanging("IsDeferrable");
                _IsDeferrable = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("IsDeferrable");
                OnIsDeferrableChanged();
            }
        }
        private global::System.Boolean _IsDeferrable;
        partial void OnIsDeferrableChanging(global::System.Boolean value);
        partial void OnIsDeferrableChanged();
    
        /// <summary>
        /// 使用できるメタデータ ドキュメントはありません。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Boolean IsInitiallyDeferred
        {
            get
            {
                return _IsInitiallyDeferred;
            }
            set
            {
                OnIsInitiallyDeferredChanging(value);
                ReportPropertyChanging("IsInitiallyDeferred");
                _IsInitiallyDeferred = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("IsInitiallyDeferred");
                OnIsInitiallyDeferredChanged();
            }
        }
        private global::System.Boolean _IsInitiallyDeferred;
        partial void OnIsInitiallyDeferredChanging(global::System.Boolean value);
        partial void OnIsInitiallyDeferredChanged();

        #endregion

    
        #region ナビゲーション プロパティ
    
        /// <summary>
        /// 使用できるメタデータ ドキュメントはありません。
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("Store", "TableOrViewConstraint", "Parent")]
        public TableOrView Parent
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<TableOrView>("Store.TableOrViewConstraint", "Parent").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<TableOrView>("Store.TableOrViewConstraint", "Parent").Value = value;
            }
        }
        /// <summary>
        /// 使用できるメタデータ ドキュメントはありません。
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<TableOrView> ParentReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<TableOrView>("Store.TableOrViewConstraint", "Parent");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<TableOrView>("Store.TableOrViewConstraint", "Parent", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// 使用できるメタデータ ドキュメントはありません。
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="Store", Name="ForeignKey")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class ForeignKey : EntityObject
    {
        #region ファクトリ メソッド
    
        /// <summary>
        /// 新しい ForeignKey オブジェクトを作成します。
        /// </summary>
        /// <param name="id">Id プロパティの初期値。</param>
        /// <param name="ordinal">Ordinal プロパティの初期値。</param>
        public static ForeignKey CreateForeignKey(global::System.String id, global::System.Int32 ordinal)
        {
            ForeignKey foreignKey = new ForeignKey();
            foreignKey.Id = id;
            foreignKey.Ordinal = ordinal;
            return foreignKey;
        }

        #endregion

        #region プリミティブ プロパティ
    
        /// <summary>
        /// 使用できるメタデータ ドキュメントはありません。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value, false);
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.String _Id;
        partial void OnIdChanging(global::System.String value);
        partial void OnIdChanged();
    
        /// <summary>
        /// 使用できるメタデータ ドキュメントはありません。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Ordinal
        {
            get
            {
                return _Ordinal;
            }
            set
            {
                OnOrdinalChanging(value);
                ReportPropertyChanging("Ordinal");
                _Ordinal = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Ordinal");
                OnOrdinalChanged();
            }
        }
        private global::System.Int32 _Ordinal;
        partial void OnOrdinalChanging(global::System.Int32 value);
        partial void OnOrdinalChanged();

        #endregion

    
        #region ナビゲーション プロパティ
    
        /// <summary>
        /// 使用できるメタデータ ドキュメントはありません。
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("Store", "ConstraintForeignKey", "Constraint")]
        public ForeignKeyConstraint Constraint
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<ForeignKeyConstraint>("Store.ConstraintForeignKey", "Constraint").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<ForeignKeyConstraint>("Store.ConstraintForeignKey", "Constraint").Value = value;
            }
        }
        /// <summary>
        /// 使用できるメタデータ ドキュメントはありません。
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<ForeignKeyConstraint> ConstraintReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<ForeignKeyConstraint>("Store.ConstraintForeignKey", "Constraint");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<ForeignKeyConstraint>("Store.ConstraintForeignKey", "Constraint", value);
                }
            }
        }
    
        /// <summary>
        /// 使用できるメタデータ ドキュメントはありません。
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("Store", "FromForeignKeyColumn", "Column")]
        public Column FromColumn
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Column>("Store.FromForeignKeyColumn", "Column").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Column>("Store.FromForeignKeyColumn", "Column").Value = value;
            }
        }
        /// <summary>
        /// 使用できるメタデータ ドキュメントはありません。
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Column> FromColumnReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Column>("Store.FromForeignKeyColumn", "Column");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Column>("Store.FromForeignKeyColumn", "Column", value);
                }
            }
        }
    
        /// <summary>
        /// 使用できるメタデータ ドキュメントはありません。
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("Store", "ToForeignKeyColumn", "Column")]
        public Column ToColumn
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Column>("Store.ToForeignKeyColumn", "Column").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Column>("Store.ToForeignKeyColumn", "Column").Value = value;
            }
        }
        /// <summary>
        /// 使用できるメタデータ ドキュメントはありません。
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Column> ToColumnReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Column>("Store.ToForeignKeyColumn", "Column");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Column>("Store.ToForeignKeyColumn", "Column", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// 使用できるメタデータ ドキュメントはありません。
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="Store", Name="ForeignKeyConstraint")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class ForeignKeyConstraint : Constraint
    {
        #region ファクトリ メソッド
    
        /// <summary>
        /// 新しい ForeignKeyConstraint オブジェクトを作成します。
        /// </summary>
        /// <param name="id">Id プロパティの初期値。</param>
        /// <param name="name">Name プロパティの初期値。</param>
        /// <param name="isDeferrable">IsDeferrable プロパティの初期値。</param>
        /// <param name="isInitiallyDeferred">IsInitiallyDeferred プロパティの初期値。</param>
        /// <param name="updateRule">UpdateRule プロパティの初期値。</param>
        /// <param name="deleteRule">DeleteRule プロパティの初期値。</param>
        public static ForeignKeyConstraint CreateForeignKeyConstraint(global::System.String id, global::System.String name, global::System.Boolean isDeferrable, global::System.Boolean isInitiallyDeferred, global::System.String updateRule, global::System.String deleteRule)
        {
            ForeignKeyConstraint foreignKeyConstraint = new ForeignKeyConstraint();
            foreignKeyConstraint.Id = id;
            foreignKeyConstraint.Name = name;
            foreignKeyConstraint.IsDeferrable = isDeferrable;
            foreignKeyConstraint.IsInitiallyDeferred = isInitiallyDeferred;
            foreignKeyConstraint.UpdateRule = updateRule;
            foreignKeyConstraint.DeleteRule = deleteRule;
            return foreignKeyConstraint;
        }

        #endregion

        #region プリミティブ プロパティ
    
        /// <summary>
        /// 使用できるメタデータ ドキュメントはありません。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String UpdateRule
        {
            get
            {
                return _UpdateRule;
            }
            set
            {
                OnUpdateRuleChanging(value);
                ReportPropertyChanging("UpdateRule");
                _UpdateRule = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("UpdateRule");
                OnUpdateRuleChanged();
            }
        }
        private global::System.String _UpdateRule;
        partial void OnUpdateRuleChanging(global::System.String value);
        partial void OnUpdateRuleChanged();
    
        /// <summary>
        /// 使用できるメタデータ ドキュメントはありません。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String DeleteRule
        {
            get
            {
                return _DeleteRule;
            }
            set
            {
                OnDeleteRuleChanging(value);
                ReportPropertyChanging("DeleteRule");
                _DeleteRule = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("DeleteRule");
                OnDeleteRuleChanged();
            }
        }
        private global::System.String _DeleteRule;
        partial void OnDeleteRuleChanging(global::System.String value);
        partial void OnDeleteRuleChanged();

        #endregion

    
        #region ナビゲーション プロパティ
    
        /// <summary>
        /// 使用できるメタデータ ドキュメントはありません。
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("Store", "ConstraintForeignKey", "ForeignKey")]
        public EntityCollection<ForeignKey> ForeignKeys
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<ForeignKey>("Store.ConstraintForeignKey", "ForeignKey");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<ForeignKey>("Store.ConstraintForeignKey", "ForeignKey", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// 使用できるメタデータ ドキュメントはありません。
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="Store", Name="Function")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    [KnownTypeAttribute(typeof(ScalarFunction))]
    public abstract partial class Function : Routine
    {
        #region プリミティブ プロパティ
    
        /// <summary>
        /// 使用できるメタデータ ドキュメントはありません。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Boolean> IsBuiltIn
        {
            get
            {
                return _IsBuiltIn;
            }
            set
            {
                OnIsBuiltInChanging(value);
                ReportPropertyChanging("IsBuiltIn");
                _IsBuiltIn = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("IsBuiltIn");
                OnIsBuiltInChanged();
            }
        }
        private Nullable<global::System.Boolean> _IsBuiltIn;
        partial void OnIsBuiltInChanging(Nullable<global::System.Boolean> value);
        partial void OnIsBuiltInChanged();
    
        /// <summary>
        /// 使用できるメタデータ ドキュメントはありません。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Boolean> IsNiladic
        {
            get
            {
                return _IsNiladic;
            }
            set
            {
                OnIsNiladicChanging(value);
                ReportPropertyChanging("IsNiladic");
                _IsNiladic = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("IsNiladic");
                OnIsNiladicChanged();
            }
        }
        private Nullable<global::System.Boolean> _IsNiladic;
        partial void OnIsNiladicChanging(Nullable<global::System.Boolean> value);
        partial void OnIsNiladicChanged();

        #endregion

    
    }
    
    /// <summary>
    /// 使用できるメタデータ ドキュメントはありません。
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="Store", Name="Parameter")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Parameter : EntityObject
    {
        #region ファクトリ メソッド
    
        /// <summary>
        /// 新しい Parameter オブジェクトを作成します。
        /// </summary>
        /// <param name="id">Id プロパティの初期値。</param>
        /// <param name="name">Name プロパティの初期値。</param>
        /// <param name="ordinal">Ordinal プロパティの初期値。</param>
        /// <param name="parameterType">ParameterType プロパティの初期値。</param>
        public static Parameter CreateParameter(global::System.String id, global::System.String name, global::System.Int32 ordinal, TypeSpecification parameterType)
        {
            Parameter parameter = new Parameter();
            parameter.Id = id;
            parameter.Name = name;
            parameter.Ordinal = ordinal;
            parameter.ParameterType = StructuralObject.VerifyComplexObjectIsNotNull(parameterType, "ParameterType");
            return parameter;
        }

        #endregion

        #region プリミティブ プロパティ
    
        /// <summary>
        /// 使用できるメタデータ ドキュメントはありません。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value, false);
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.String _Id;
        partial void OnIdChanging(global::System.String value);
        partial void OnIdChanged();
    
        /// <summary>
        /// 使用できるメタデータ ドキュメントはありません。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Name
        {
            get
            {
                return _Name;
            }
            set
            {
                OnNameChanging(value);
                ReportPropertyChanging("Name");
                _Name = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Name");
                OnNameChanged();
            }
        }
        private global::System.String _Name;
        partial void OnNameChanging(global::System.String value);
        partial void OnNameChanged();
    
        /// <summary>
        /// 使用できるメタデータ ドキュメントはありません。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Ordinal
        {
            get
            {
                return _Ordinal;
            }
            set
            {
                OnOrdinalChanging(value);
                ReportPropertyChanging("Ordinal");
                _Ordinal = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Ordinal");
                OnOrdinalChanged();
            }
        }
        private global::System.Int32 _Ordinal;
        partial void OnOrdinalChanging(global::System.Int32 value);
        partial void OnOrdinalChanged();
    
        /// <summary>
        /// 使用できるメタデータ ドキュメントはありません。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Mode
        {
            get
            {
                return _Mode;
            }
            set
            {
                OnModeChanging(value);
                ReportPropertyChanging("Mode");
                _Mode = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Mode");
                OnModeChanged();
            }
        }
        private global::System.String _Mode;
        partial void OnModeChanging(global::System.String value);
        partial void OnModeChanged();
    
        /// <summary>
        /// 使用できるメタデータ ドキュメントはありません。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Default
        {
            get
            {
                return _Default;
            }
            set
            {
                OnDefaultChanging(value);
                ReportPropertyChanging("Default");
                _Default = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Default");
                OnDefaultChanged();
            }
        }
        private global::System.String _Default;
        partial void OnDefaultChanging(global::System.String value);
        partial void OnDefaultChanged();

        #endregion

        #region 複合プロパティ
    
        /// <summary>
        /// 使用できるメタデータ ドキュメントはありません。
        /// </summary>
        [EdmComplexPropertyAttribute()]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
        [XmlElement(IsNullable=true)]
        [SoapElement(IsNullable=true)]
        [DataMemberAttribute()]
        public TypeSpecification ParameterType
        {
            get
            {
                _ParameterType = GetValidValue(_ParameterType, "ParameterType", false, _ParameterTypeInitialized);
                _ParameterTypeInitialized = true;
                return _ParameterType;
            }
            set
            {
                OnParameterTypeChanging(value);
                ReportPropertyChanging("ParameterType");
                _ParameterType = SetValidValue(_ParameterType, value, "ParameterType");
                _ParameterTypeInitialized = true;
                ReportPropertyChanged("ParameterType");
                OnParameterTypeChanged();
            }
        }
        private TypeSpecification _ParameterType;
        private bool _ParameterTypeInitialized;
        partial void OnParameterTypeChanging(TypeSpecification value);
        partial void OnParameterTypeChanged();

        #endregion

    
        #region ナビゲーション プロパティ
    
        /// <summary>
        /// 使用できるメタデータ ドキュメントはありません。
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("Store", "RoutineParameter", "Routine")]
        public Routine Routine
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Routine>("Store.RoutineParameter", "Routine").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Routine>("Store.RoutineParameter", "Routine").Value = value;
            }
        }
        /// <summary>
        /// 使用できるメタデータ ドキュメントはありません。
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Routine> RoutineReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Routine>("Store.RoutineParameter", "Routine");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Routine>("Store.RoutineParameter", "Routine", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// 使用できるメタデータ ドキュメントはありません。
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="Store", Name="PrimaryKeyConstraint")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class PrimaryKeyConstraint : TableOrViewColumnConstraint
    {
        #region ファクトリ メソッド
    
        /// <summary>
        /// 新しい PrimaryKeyConstraint オブジェクトを作成します。
        /// </summary>
        /// <param name="id">Id プロパティの初期値。</param>
        /// <param name="name">Name プロパティの初期値。</param>
        /// <param name="isDeferrable">IsDeferrable プロパティの初期値。</param>
        /// <param name="isInitiallyDeferred">IsInitiallyDeferred プロパティの初期値。</param>
        public static PrimaryKeyConstraint CreatePrimaryKeyConstraint(global::System.String id, global::System.String name, global::System.Boolean isDeferrable, global::System.Boolean isInitiallyDeferred)
        {
            PrimaryKeyConstraint primaryKeyConstraint = new PrimaryKeyConstraint();
            primaryKeyConstraint.Id = id;
            primaryKeyConstraint.Name = name;
            primaryKeyConstraint.IsDeferrable = isDeferrable;
            primaryKeyConstraint.IsInitiallyDeferred = isInitiallyDeferred;
            return primaryKeyConstraint;
        }

        #endregion

    
    }
    
    /// <summary>
    /// 使用できるメタデータ ドキュメントはありません。
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="Store", Name="Procedure")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Procedure : Routine
    {
        #region ファクトリ メソッド
    
        /// <summary>
        /// 新しい Procedure オブジェクトを作成します。
        /// </summary>
        /// <param name="id">Id プロパティの初期値。</param>
        /// <param name="name">Name プロパティの初期値。</param>
        public static Procedure CreateProcedure(global::System.String id, global::System.String name)
        {
            Procedure procedure = new Procedure();
            procedure.Id = id;
            procedure.Name = name;
            return procedure;
        }

        #endregion

    
    }
    
    /// <summary>
    /// 使用できるメタデータ ドキュメントはありません。
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="Store", Name="Routine")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    [KnownTypeAttribute(typeof(Function))]
    [KnownTypeAttribute(typeof(Procedure))]
    public abstract partial class Routine : EntityObject
    {
        #region プリミティブ プロパティ
    
        /// <summary>
        /// 使用できるメタデータ ドキュメントはありません。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value, false);
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.String _Id;
        partial void OnIdChanging(global::System.String value);
        partial void OnIdChanged();
    
        /// <summary>
        /// 使用できるメタデータ ドキュメントはありません。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String CatalogName
        {
            get
            {
                return _CatalogName;
            }
            set
            {
                OnCatalogNameChanging(value);
                ReportPropertyChanging("CatalogName");
                _CatalogName = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("CatalogName");
                OnCatalogNameChanged();
            }
        }
        private global::System.String _CatalogName;
        partial void OnCatalogNameChanging(global::System.String value);
        partial void OnCatalogNameChanged();
    
        /// <summary>
        /// 使用できるメタデータ ドキュメントはありません。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String SchemaName
        {
            get
            {
                return _SchemaName;
            }
            set
            {
                OnSchemaNameChanging(value);
                ReportPropertyChanging("SchemaName");
                _SchemaName = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("SchemaName");
                OnSchemaNameChanged();
            }
        }
        private global::System.String _SchemaName;
        partial void OnSchemaNameChanging(global::System.String value);
        partial void OnSchemaNameChanged();
    
        /// <summary>
        /// 使用できるメタデータ ドキュメントはありません。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Name
        {
            get
            {
                return _Name;
            }
            set
            {
                OnNameChanging(value);
                ReportPropertyChanging("Name");
                _Name = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Name");
                OnNameChanged();
            }
        }
        private global::System.String _Name;
        partial void OnNameChanging(global::System.String value);
        partial void OnNameChanged();

        #endregion

    
        #region ナビゲーション プロパティ
    
        /// <summary>
        /// 使用できるメタデータ ドキュメントはありません。
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("Store", "RoutineParameter", "Parameter")]
        public EntityCollection<Parameter> Parameters
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Parameter>("Store.RoutineParameter", "Parameter");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Parameter>("Store.RoutineParameter", "Parameter", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// 使用できるメタデータ ドキュメントはありません。
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="Store", Name="ScalarFunction")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class ScalarFunction : Function
    {
        #region ファクトリ メソッド
    
        /// <summary>
        /// 新しい ScalarFunction オブジェクトを作成します。
        /// </summary>
        /// <param name="id">Id プロパティの初期値。</param>
        /// <param name="name">Name プロパティの初期値。</param>
        /// <param name="returnType">ReturnType プロパティの初期値。</param>
        public static ScalarFunction CreateScalarFunction(global::System.String id, global::System.String name, TypeSpecification returnType)
        {
            ScalarFunction scalarFunction = new ScalarFunction();
            scalarFunction.Id = id;
            scalarFunction.Name = name;
            scalarFunction.ReturnType = StructuralObject.VerifyComplexObjectIsNotNull(returnType, "ReturnType");
            return scalarFunction;
        }

        #endregion

        #region プリミティブ プロパティ
    
        /// <summary>
        /// 使用できるメタデータ ドキュメントはありません。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Boolean> IsAggregate
        {
            get
            {
                return _IsAggregate;
            }
            set
            {
                OnIsAggregateChanging(value);
                ReportPropertyChanging("IsAggregate");
                _IsAggregate = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("IsAggregate");
                OnIsAggregateChanged();
            }
        }
        private Nullable<global::System.Boolean> _IsAggregate;
        partial void OnIsAggregateChanging(Nullable<global::System.Boolean> value);
        partial void OnIsAggregateChanged();

        #endregion

        #region 複合プロパティ
    
        /// <summary>
        /// 使用できるメタデータ ドキュメントはありません。
        /// </summary>
        [EdmComplexPropertyAttribute()]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
        [XmlElement(IsNullable=true)]
        [SoapElement(IsNullable=true)]
        [DataMemberAttribute()]
        public TypeSpecification ReturnType
        {
            get
            {
                _ReturnType = GetValidValue(_ReturnType, "ReturnType", false, _ReturnTypeInitialized);
                _ReturnTypeInitialized = true;
                return _ReturnType;
            }
            set
            {
                OnReturnTypeChanging(value);
                ReportPropertyChanging("ReturnType");
                _ReturnType = SetValidValue(_ReturnType, value, "ReturnType");
                _ReturnTypeInitialized = true;
                ReportPropertyChanged("ReturnType");
                OnReturnTypeChanged();
            }
        }
        private TypeSpecification _ReturnType;
        private bool _ReturnTypeInitialized;
        partial void OnReturnTypeChanging(TypeSpecification value);
        partial void OnReturnTypeChanged();

        #endregion

    
    }
    
    /// <summary>
    /// 使用できるメタデータ ドキュメントはありません。
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="Store", Name="Table")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Table : TableOrView
    {
        #region ファクトリ メソッド
    
        /// <summary>
        /// 新しい Table オブジェクトを作成します。
        /// </summary>
        /// <param name="id">Id プロパティの初期値。</param>
        /// <param name="name">Name プロパティの初期値。</param>
        public static Table CreateTable(global::System.String id, global::System.String name)
        {
            Table table = new Table();
            table.Id = id;
            table.Name = name;
            return table;
        }

        #endregion

    
    }
    
    /// <summary>
    /// 使用できるメタデータ ドキュメントはありません。
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="Store", Name="TableOrView")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    [KnownTypeAttribute(typeof(Table))]
    [KnownTypeAttribute(typeof(View))]
    public abstract partial class TableOrView : EntityObject
    {
        #region プリミティブ プロパティ
    
        /// <summary>
        /// 使用できるメタデータ ドキュメントはありません。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value, false);
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.String _Id;
        partial void OnIdChanging(global::System.String value);
        partial void OnIdChanged();
    
        /// <summary>
        /// 使用できるメタデータ ドキュメントはありません。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Name
        {
            get
            {
                return _Name;
            }
            set
            {
                OnNameChanging(value);
                ReportPropertyChanging("Name");
                _Name = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Name");
                OnNameChanged();
            }
        }
        private global::System.String _Name;
        partial void OnNameChanging(global::System.String value);
        partial void OnNameChanged();
    
        /// <summary>
        /// 使用できるメタデータ ドキュメントはありません。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String CatalogName
        {
            get
            {
                return _CatalogName;
            }
            set
            {
                OnCatalogNameChanging(value);
                ReportPropertyChanging("CatalogName");
                _CatalogName = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("CatalogName");
                OnCatalogNameChanged();
            }
        }
        private global::System.String _CatalogName;
        partial void OnCatalogNameChanging(global::System.String value);
        partial void OnCatalogNameChanged();
    
        /// <summary>
        /// 使用できるメタデータ ドキュメントはありません。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String SchemaName
        {
            get
            {
                return _SchemaName;
            }
            set
            {
                OnSchemaNameChanging(value);
                ReportPropertyChanging("SchemaName");
                _SchemaName = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("SchemaName");
                OnSchemaNameChanged();
            }
        }
        private global::System.String _SchemaName;
        partial void OnSchemaNameChanging(global::System.String value);
        partial void OnSchemaNameChanged();

        #endregion

    
        #region ナビゲーション プロパティ
    
        /// <summary>
        /// 使用できるメタデータ ドキュメントはありません。
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("Store", "TableOrViewColumn", "Column")]
        public EntityCollection<Column> Columns
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Column>("Store.TableOrViewColumn", "Column");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Column>("Store.TableOrViewColumn", "Column", value);
                }
            }
        }
    
        /// <summary>
        /// 使用できるメタデータ ドキュメントはありません。
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("Store", "TableOrViewConstraint", "Constraint")]
        public EntityCollection<Constraint> Constraints
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Constraint>("Store.TableOrViewConstraint", "Constraint");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Constraint>("Store.TableOrViewConstraint", "Constraint", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// 使用できるメタデータ ドキュメントはありません。
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="Store", Name="TableOrViewColumnConstraint")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    [KnownTypeAttribute(typeof(PrimaryKeyConstraint))]
    [KnownTypeAttribute(typeof(UniqueConstraint))]
    public abstract partial class TableOrViewColumnConstraint : Constraint
    {
    
        #region ナビゲーション プロパティ
    
        /// <summary>
        /// 使用できるメタデータ ドキュメントはありません。
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("Store", "TableOrViewConstraintColumn", "Column")]
        public EntityCollection<Column> Columns
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Column>("Store.TableOrViewConstraintColumn", "Column");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Column>("Store.TableOrViewConstraintColumn", "Column", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// 使用できるメタデータ ドキュメントはありません。
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="Store", Name="UniqueConstraint")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class UniqueConstraint : TableOrViewColumnConstraint
    {
        #region ファクトリ メソッド
    
        /// <summary>
        /// 新しい UniqueConstraint オブジェクトを作成します。
        /// </summary>
        /// <param name="id">Id プロパティの初期値。</param>
        /// <param name="name">Name プロパティの初期値。</param>
        /// <param name="isDeferrable">IsDeferrable プロパティの初期値。</param>
        /// <param name="isInitiallyDeferred">IsInitiallyDeferred プロパティの初期値。</param>
        public static UniqueConstraint CreateUniqueConstraint(global::System.String id, global::System.String name, global::System.Boolean isDeferrable, global::System.Boolean isInitiallyDeferred)
        {
            UniqueConstraint uniqueConstraint = new UniqueConstraint();
            uniqueConstraint.Id = id;
            uniqueConstraint.Name = name;
            uniqueConstraint.IsDeferrable = isDeferrable;
            uniqueConstraint.IsInitiallyDeferred = isInitiallyDeferred;
            return uniqueConstraint;
        }

        #endregion

    
    }
    
    /// <summary>
    /// 使用できるメタデータ ドキュメントはありません。
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="Store", Name="View")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class View : TableOrView
    {
        #region ファクトリ メソッド
    
        /// <summary>
        /// 新しい View オブジェクトを作成します。
        /// </summary>
        /// <param name="id">Id プロパティの初期値。</param>
        /// <param name="name">Name プロパティの初期値。</param>
        /// <param name="isUpdatable">IsUpdatable プロパティの初期値。</param>
        public static View CreateView(global::System.String id, global::System.String name, global::System.Boolean isUpdatable)
        {
            View view = new View();
            view.Id = id;
            view.Name = name;
            view.IsUpdatable = isUpdatable;
            return view;
        }

        #endregion

        #region プリミティブ プロパティ
    
        /// <summary>
        /// 使用できるメタデータ ドキュメントはありません。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Boolean IsUpdatable
        {
            get
            {
                return _IsUpdatable;
            }
            set
            {
                OnIsUpdatableChanging(value);
                ReportPropertyChanging("IsUpdatable");
                _IsUpdatable = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("IsUpdatable");
                OnIsUpdatableChanged();
            }
        }
        private global::System.Boolean _IsUpdatable;
        partial void OnIsUpdatableChanging(global::System.Boolean value);
        partial void OnIsUpdatableChanged();
    
        /// <summary>
        /// 使用できるメタデータ ドキュメントはありません。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String ViewDefinition
        {
            get
            {
                return _ViewDefinition;
            }
            set
            {
                OnViewDefinitionChanging(value);
                ReportPropertyChanging("ViewDefinition");
                _ViewDefinition = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("ViewDefinition");
                OnViewDefinitionChanged();
            }
        }
        private global::System.String _ViewDefinition;
        partial void OnViewDefinitionChanging(global::System.String value);
        partial void OnViewDefinitionChanged();

        #endregion

    
    }

    #endregion

    #region ComplexTypes
    
    /// <summary>
    /// 使用できるメタデータ ドキュメントはありません。
    /// </summary>
    [EdmComplexTypeAttribute(NamespaceName="Store", Name="CharacterSet")]
    [DataContractAttribute(IsReference=true)]
    [Serializable()]
    public partial class CharacterSet : ComplexObject
    {
        #region プリミティブ プロパティ
    
        /// <summary>
        /// 使用できるメタデータ ドキュメントはありません。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String CatalogName
        {
            get
            {
                return _CatalogName;
            }
            set
            {
                OnCatalogNameChanging(value);
                ReportPropertyChanging("CatalogName");
                _CatalogName = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("CatalogName");
                OnCatalogNameChanged();
            }
        }
        private global::System.String _CatalogName;
        partial void OnCatalogNameChanging(global::System.String value);
        partial void OnCatalogNameChanged();
    
        /// <summary>
        /// 使用できるメタデータ ドキュメントはありません。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String SchemaName
        {
            get
            {
                return _SchemaName;
            }
            set
            {
                OnSchemaNameChanging(value);
                ReportPropertyChanging("SchemaName");
                _SchemaName = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("SchemaName");
                OnSchemaNameChanged();
            }
        }
        private global::System.String _SchemaName;
        partial void OnSchemaNameChanging(global::System.String value);
        partial void OnSchemaNameChanged();
    
        /// <summary>
        /// 使用できるメタデータ ドキュメントはありません。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Name
        {
            get
            {
                return _Name;
            }
            set
            {
                OnNameChanging(value);
                ReportPropertyChanging("Name");
                _Name = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Name");
                OnNameChanged();
            }
        }
        private global::System.String _Name;
        partial void OnNameChanging(global::System.String value);
        partial void OnNameChanged();

        #endregion

    }
    
    /// <summary>
    /// 使用できるメタデータ ドキュメントはありません。
    /// </summary>
    [EdmComplexTypeAttribute(NamespaceName="Store", Name="Collation")]
    [DataContractAttribute(IsReference=true)]
    [Serializable()]
    public partial class Collation : ComplexObject
    {
        #region プリミティブ プロパティ
    
        /// <summary>
        /// 使用できるメタデータ ドキュメントはありません。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String CatalogName
        {
            get
            {
                return _CatalogName;
            }
            set
            {
                OnCatalogNameChanging(value);
                ReportPropertyChanging("CatalogName");
                _CatalogName = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("CatalogName");
                OnCatalogNameChanged();
            }
        }
        private global::System.String _CatalogName;
        partial void OnCatalogNameChanging(global::System.String value);
        partial void OnCatalogNameChanged();
    
        /// <summary>
        /// 使用できるメタデータ ドキュメントはありません。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String SchemaName
        {
            get
            {
                return _SchemaName;
            }
            set
            {
                OnSchemaNameChanging(value);
                ReportPropertyChanging("SchemaName");
                _SchemaName = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("SchemaName");
                OnSchemaNameChanged();
            }
        }
        private global::System.String _SchemaName;
        partial void OnSchemaNameChanging(global::System.String value);
        partial void OnSchemaNameChanged();
    
        /// <summary>
        /// 使用できるメタデータ ドキュメントはありません。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Name
        {
            get
            {
                return _Name;
            }
            set
            {
                OnNameChanging(value);
                ReportPropertyChanging("Name");
                _Name = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Name");
                OnNameChanged();
            }
        }
        private global::System.String _Name;
        partial void OnNameChanging(global::System.String value);
        partial void OnNameChanged();

        #endregion

    }
    
    /// <summary>
    /// 使用できるメタデータ ドキュメントはありません。
    /// </summary>
    [EdmComplexTypeAttribute(NamespaceName="Store", Name="TypeSpecification")]
    [DataContractAttribute(IsReference=true)]
    [Serializable()]
    public partial class TypeSpecification : ComplexObject
    {
        #region ファクトリ メソッド
    
        /// <summary>
        /// 新しい TypeSpecification オブジェクトを作成します。
        /// </summary>
        /// <param name="typeName">TypeName プロパティの初期値。</param>
        /// <param name="collation">Collation プロパティの初期値。</param>
        /// <param name="characterSet">CharacterSet プロパティの初期値。</param>
        /// <param name="isMultiSet">IsMultiSet プロパティの初期値。</param>
        public static TypeSpecification CreateTypeSpecification(global::System.String typeName, Collation collation, CharacterSet characterSet, global::System.Boolean isMultiSet)
        {
            TypeSpecification typeSpecification = new TypeSpecification();
            typeSpecification.TypeName = typeName;
            typeSpecification.Collation = StructuralObject.VerifyComplexObjectIsNotNull(collation, "Collation");
            typeSpecification.CharacterSet = StructuralObject.VerifyComplexObjectIsNotNull(characterSet, "CharacterSet");
            typeSpecification.IsMultiSet = isMultiSet;
            return typeSpecification;
        }

        #endregion

        #region プリミティブ プロパティ
    
        /// <summary>
        /// 使用できるメタデータ ドキュメントはありません。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String TypeName
        {
            get
            {
                return _TypeName;
            }
            set
            {
                OnTypeNameChanging(value);
                ReportPropertyChanging("TypeName");
                _TypeName = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("TypeName");
                OnTypeNameChanged();
            }
        }
        private global::System.String _TypeName;
        partial void OnTypeNameChanging(global::System.String value);
        partial void OnTypeNameChanged();
    
        /// <summary>
        /// 使用できるメタデータ ドキュメントはありません。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> MaxLength
        {
            get
            {
                return _MaxLength;
            }
            set
            {
                OnMaxLengthChanging(value);
                ReportPropertyChanging("MaxLength");
                _MaxLength = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("MaxLength");
                OnMaxLengthChanged();
            }
        }
        private Nullable<global::System.Int32> _MaxLength;
        partial void OnMaxLengthChanging(Nullable<global::System.Int32> value);
        partial void OnMaxLengthChanged();
    
        /// <summary>
        /// 使用できるメタデータ ドキュメントはありません。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> Precision
        {
            get
            {
                return _Precision;
            }
            set
            {
                OnPrecisionChanging(value);
                ReportPropertyChanging("Precision");
                _Precision = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Precision");
                OnPrecisionChanged();
            }
        }
        private Nullable<global::System.Int32> _Precision;
        partial void OnPrecisionChanging(Nullable<global::System.Int32> value);
        partial void OnPrecisionChanged();
    
        /// <summary>
        /// 使用できるメタデータ ドキュメントはありません。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> DateTimePrecision
        {
            get
            {
                return _DateTimePrecision;
            }
            set
            {
                OnDateTimePrecisionChanging(value);
                ReportPropertyChanging("DateTimePrecision");
                _DateTimePrecision = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("DateTimePrecision");
                OnDateTimePrecisionChanged();
            }
        }
        private Nullable<global::System.Int32> _DateTimePrecision;
        partial void OnDateTimePrecisionChanging(Nullable<global::System.Int32> value);
        partial void OnDateTimePrecisionChanged();
    
        /// <summary>
        /// 使用できるメタデータ ドキュメントはありません。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> Scale
        {
            get
            {
                return _Scale;
            }
            set
            {
                OnScaleChanging(value);
                ReportPropertyChanging("Scale");
                _Scale = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Scale");
                OnScaleChanged();
            }
        }
        private Nullable<global::System.Int32> _Scale;
        partial void OnScaleChanging(Nullable<global::System.Int32> value);
        partial void OnScaleChanged();
    
        /// <summary>
        /// 使用できるメタデータ ドキュメントはありません。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Boolean IsMultiSet
        {
            get
            {
                return _IsMultiSet;
            }
            set
            {
                OnIsMultiSetChanging(value);
                ReportPropertyChanging("IsMultiSet");
                _IsMultiSet = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("IsMultiSet");
                OnIsMultiSetChanged();
            }
        }
        private global::System.Boolean _IsMultiSet;
        partial void OnIsMultiSetChanging(global::System.Boolean value);
        partial void OnIsMultiSetChanged();

        #endregion

        #region 複合プロパティ
    
        /// <summary>
        /// 使用できるメタデータ ドキュメントはありません。
        /// </summary>
        [EdmComplexPropertyAttribute()]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
        [XmlElement(IsNullable=true)]
        [SoapElement(IsNullable=true)]
        [DataMemberAttribute()]
        public Collation Collation
        {
            get
            {
                _Collation = GetValidValue(_Collation, "Collation", false, _CollationInitialized);
                _CollationInitialized = true;
                return _Collation;
            }
            set
            {
                OnCollationChanging(value);
                ReportPropertyChanging("Collation");
                _Collation = SetValidValue(_Collation, value, "Collation");
                _CollationInitialized = true;
                ReportPropertyChanged("Collation");
                OnCollationChanged();
            }
        }
        private Collation _Collation;
        private bool _CollationInitialized;
        partial void OnCollationChanging(Collation value);
        partial void OnCollationChanged();
    
        /// <summary>
        /// 使用できるメタデータ ドキュメントはありません。
        /// </summary>
        [EdmComplexPropertyAttribute()]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
        [XmlElement(IsNullable=true)]
        [SoapElement(IsNullable=true)]
        [DataMemberAttribute()]
        public CharacterSet CharacterSet
        {
            get
            {
                _CharacterSet = GetValidValue(_CharacterSet, "CharacterSet", false, _CharacterSetInitialized);
                _CharacterSetInitialized = true;
                return _CharacterSet;
            }
            set
            {
                OnCharacterSetChanging(value);
                ReportPropertyChanging("CharacterSet");
                _CharacterSet = SetValidValue(_CharacterSet, value, "CharacterSet");
                _CharacterSetInitialized = true;
                ReportPropertyChanged("CharacterSet");
                OnCharacterSetChanged();
            }
        }
        private CharacterSet _CharacterSet;
        private bool _CharacterSetInitialized;
        partial void OnCharacterSetChanging(CharacterSet value);
        partial void OnCharacterSetChanged();

        #endregion

    }

    #endregion

    
}
#endif