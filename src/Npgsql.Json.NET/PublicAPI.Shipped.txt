#nullable enable
Npgsql.Json.NET.JsonHandlerFactory
Npgsql.Json.NET.JsonHandlerFactory.JsonHandlerFactory(Newtonsoft.Json.JsonSerializerSettings? settings = null) -> void
Npgsql.Json.NET.JsonbHandlerFactory
Npgsql.Json.NET.JsonbHandlerFactory.JsonbHandlerFactory(Newtonsoft.Json.JsonSerializerSettings? settings = null) -> void
Npgsql.NpgsqlJsonNetExtensions
override Npgsql.Json.NET.JsonHandlerFactory.Create(Npgsql.PostgresTypes.PostgresType! postgresType, Npgsql.NpgsqlConnection! conn) -> Npgsql.TypeHandling.NpgsqlTypeHandler<string!>!
override Npgsql.Json.NET.JsonbHandlerFactory.Create(Npgsql.PostgresTypes.PostgresType! postgresType, Npgsql.NpgsqlConnection! conn) -> Npgsql.TypeHandling.NpgsqlTypeHandler<string!>!
static Npgsql.NpgsqlJsonNetExtensions.UseJsonNet(this Npgsql.TypeMapping.INpgsqlTypeMapper! mapper, System.Type![]? jsonbClrTypes = null, System.Type![]? jsonClrTypes = null, Newtonsoft.Json.JsonSerializerSettings? settings = null) -> Npgsql.TypeMapping.INpgsqlTypeMapper!