#nullable enable
*REMOVED*abstract Npgsql.NpgsqlDatabaseInfo.GetTypes() -> System.Collections.Generic.IEnumerable<Npgsql.PostgresTypes.PostgresType!>!
abstract NpgsqlTypes.NpgsqlTsQuery.Equals(NpgsqlTypes.NpgsqlTsQuery? other) -> bool
Npgsql.NpgsqlBinaryExporter.CancelAsync() -> System.Threading.Tasks.Task!
Npgsql.NpgsqlConnection.BeginBinaryExportAsync(string! copyToCommand, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<Npgsql.NpgsqlBinaryExporter!>!
Npgsql.NpgsqlConnection.BeginBinaryImportAsync(string! copyFromCommand, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<Npgsql.NpgsqlBinaryImporter!>!
Npgsql.NpgsqlConnection.BeginRawBinaryCopyAsync(string! copyCommand, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<Npgsql.NpgsqlRawCopyStream!>!
Npgsql.NpgsqlConnection.BeginTextExportAsync(string! copyToCommand, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<System.IO.TextReader!>!
Npgsql.NpgsqlConnection.BeginTextImportAsync(string! copyFromCommand, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<System.IO.TextWriter!>!
Npgsql.NpgsqlConnection.PhysicalOpenAsyncCallback.get -> Npgsql.PhysicalOpenAsyncCallback?
Npgsql.NpgsqlConnection.PhysicalOpenAsyncCallback.set -> void
Npgsql.NpgsqlConnection.PhysicalOpenCallback.get -> Npgsql.PhysicalOpenCallback?
Npgsql.NpgsqlConnection.PhysicalOpenCallback.set -> void
Npgsql.NpgsqlConnection.Settings.get -> Npgsql.NpgsqlConnectionStringBuilder!
Npgsql.NpgsqlConnectionStringBuilder.HostRecheckSeconds.get -> int
Npgsql.NpgsqlConnectionStringBuilder.HostRecheckSeconds.set -> void
Npgsql.NpgsqlConnectionStringBuilder.IncludeErrorDetail.get -> bool
Npgsql.NpgsqlConnectionStringBuilder.IncludeErrorDetail.set -> void
Npgsql.NpgsqlConnectionStringBuilder.LoadBalanceHosts.get -> bool
Npgsql.NpgsqlConnectionStringBuilder.LoadBalanceHosts.set -> void
Npgsql.NpgsqlConnectionStringBuilder.SslCertificate.get -> string?
Npgsql.NpgsqlConnectionStringBuilder.SslCertificate.set -> void
Npgsql.NpgsqlConnectionStringBuilder.SslKey.get -> string?
Npgsql.NpgsqlConnectionStringBuilder.SslKey.set -> void
Npgsql.NpgsqlConnectionStringBuilder.SslPassword.get -> string?
Npgsql.NpgsqlConnectionStringBuilder.SslPassword.set -> void
Npgsql.NpgsqlConnectionStringBuilder.TargetSessionAttributes.get -> string?
Npgsql.NpgsqlConnectionStringBuilder.TargetSessionAttributes.set -> void
*REMOVED*Npgsql.NpgsqlConnectionStringBuilder.WriteCoalescingDelayUs.get -> int
*REMOVED*Npgsql.NpgsqlConnectionStringBuilder.WriteCoalescingDelayUs.set -> void
*REMOVED*Npgsql.INpgsqlDatabaseInfoFactory
*REMOVED*Npgsql.INpgsqlDatabaseInfoFactory.Load(Npgsql.NpgsqlConnection! conn, Npgsql.Util.NpgsqlTimeout timeout, bool async) -> System.Threading.Tasks.Task<Npgsql.NpgsqlDatabaseInfo?>!
*REMOVED*Npgsql.NpgsqlDatabaseInfo
*REMOVED*Npgsql.NpgsqlDatabaseInfo.Host.get -> string!
*REMOVED*Npgsql.NpgsqlDatabaseInfo.Name.get -> string!
*REMOVED*Npgsql.NpgsqlDatabaseInfo.NpgsqlDatabaseInfo(string! host, int port, string! databaseName, System.Version! version) -> void
*REMOVED*Npgsql.NpgsqlDatabaseInfo.Port.get -> int
*REMOVED*Npgsql.NpgsqlDatabaseInfo.Version.get -> System.Version!
Npgsql.NpgsqlCopyTextReader.DisposeAsync() -> System.Threading.Tasks.ValueTask
Npgsql.PhysicalOpenAsyncCallback
Npgsql.PhysicalOpenCallback
Npgsql.Replication.ReplicationConnection.SetReplicationStatus(NpgsqlTypes.NpgsqlLogSequenceNumber lastAppliedAndFlushedLsn) -> void
NpgsqlTypes.NpgsqlTsQuery.Write(System.Text.StringBuilder! stringBuilder) -> void
override Npgsql.NpgsqlRawCopyStream.DisposeAsync() -> System.Threading.Tasks.ValueTask
override NpgsqlTypes.NpgsqlTsQuery.Equals(object? obj) -> bool
override NpgsqlTypes.NpgsqlTsQuery.GetHashCode() -> int
*REMOVED*static Npgsql.NpgsqlDatabaseInfo.ParseServerVersion(string! value) -> System.Version!
*REMOVED*static Npgsql.NpgsqlDatabaseInfo.RegisterFactory(Npgsql.INpgsqlDatabaseInfoFactory! factory) -> void
static NpgsqlTypes.NpgsqlTsQuery.operator ==(NpgsqlTypes.NpgsqlTsQuery? left, NpgsqlTypes.NpgsqlTsQuery? right) -> bool
static NpgsqlTypes.NpgsqlTsQuery.operator !=(NpgsqlTypes.NpgsqlTsQuery? left, NpgsqlTypes.NpgsqlTsQuery? right) -> bool
override NpgsqlTypes.NpgsqlTsQueryEmpty.Equals(NpgsqlTypes.NpgsqlTsQuery? other) -> bool
override NpgsqlTypes.NpgsqlTsQueryEmpty.GetHashCode() -> int
override NpgsqlTypes.NpgsqlTsQueryLexeme.Equals(NpgsqlTypes.NpgsqlTsQuery? other) -> bool
override NpgsqlTypes.NpgsqlTsQueryLexeme.GetHashCode() -> int
override NpgsqlTypes.NpgsqlTsQueryNot.Equals(NpgsqlTypes.NpgsqlTsQuery? other) -> bool
override NpgsqlTypes.NpgsqlTsQueryNot.GetHashCode() -> int
override NpgsqlTypes.NpgsqlTsQueryOr.Equals(NpgsqlTypes.NpgsqlTsQuery? other) -> bool
override NpgsqlTypes.NpgsqlTsQueryOr.GetHashCode() -> int
override NpgsqlTypes.NpgsqlTsQueryAnd.Equals(NpgsqlTypes.NpgsqlTsQuery? other) -> bool
override NpgsqlTypes.NpgsqlTsQueryAnd.GetHashCode() -> int
override NpgsqlTypes.NpgsqlTsQueryFollowedBy.Equals(NpgsqlTypes.NpgsqlTsQuery? other) -> bool
override NpgsqlTypes.NpgsqlTsQueryFollowedBy.GetHashCode() -> int
Npgsql.NpgsqlConnectionStringBuilder.ArrayNullabilityMode.get -> Npgsql.ArrayNullabilityMode
Npgsql.NpgsqlConnectionStringBuilder.ArrayNullabilityMode.set -> void
Npgsql.ArrayNullabilityMode
Npgsql.ArrayNullabilityMode.Never = 0 -> Npgsql.ArrayNullabilityMode
Npgsql.ArrayNullabilityMode.Always = 1 -> Npgsql.ArrayNullabilityMode
Npgsql.ArrayNullabilityMode.PerInstance = 2 -> Npgsql.ArrayNullabilityMode
Npgsql.NpgsqlCommand.Disposed -> System.EventHandler?
Npgsql.NpgsqlConnection.Disposed -> System.EventHandler?
Npgsql.NpgsqlNestedDataReader
override Npgsql.NpgsqlNestedDataReader.Close() -> void
override Npgsql.NpgsqlNestedDataReader.Depth.get -> int
override Npgsql.NpgsqlNestedDataReader.FieldCount.get -> int
override Npgsql.NpgsqlNestedDataReader.GetBoolean(int ordinal) -> bool
override Npgsql.NpgsqlNestedDataReader.GetByte(int ordinal) -> byte
override Npgsql.NpgsqlNestedDataReader.GetBytes(int ordinal, long dataOffset, byte[]? buffer, int bufferOffset, int length) -> long
override Npgsql.NpgsqlNestedDataReader.GetChar(int ordinal) -> char
override Npgsql.NpgsqlNestedDataReader.GetChars(int ordinal, long dataOffset, char[]? buffer, int bufferOffset, int length) -> long
override Npgsql.NpgsqlNestedDataReader.GetDataTypeName(int ordinal) -> string!
override Npgsql.NpgsqlNestedDataReader.GetDateTime(int ordinal) -> System.DateTime
override Npgsql.NpgsqlNestedDataReader.GetDecimal(int ordinal) -> decimal
override Npgsql.NpgsqlNestedDataReader.GetDouble(int ordinal) -> double
override Npgsql.NpgsqlNestedDataReader.GetEnumerator() -> System.Collections.IEnumerator!
override Npgsql.NpgsqlNestedDataReader.GetFieldType(int ordinal) -> System.Type!
override Npgsql.NpgsqlNestedDataReader.GetFieldValue<T>(int ordinal) -> T
override Npgsql.NpgsqlNestedDataReader.GetFloat(int ordinal) -> float
override Npgsql.NpgsqlNestedDataReader.GetGuid(int ordinal) -> System.Guid
override Npgsql.NpgsqlNestedDataReader.GetInt16(int ordinal) -> short
override Npgsql.NpgsqlNestedDataReader.GetInt32(int ordinal) -> int
override Npgsql.NpgsqlNestedDataReader.GetInt64(int ordinal) -> long
override Npgsql.NpgsqlNestedDataReader.GetName(int ordinal) -> string!
override Npgsql.NpgsqlNestedDataReader.GetOrdinal(string! name) -> int
override Npgsql.NpgsqlNestedDataReader.GetProviderSpecificFieldType(int ordinal) -> System.Type!
override Npgsql.NpgsqlNestedDataReader.GetProviderSpecificValue(int ordinal) -> object!
override Npgsql.NpgsqlNestedDataReader.GetProviderSpecificValues(object![]! values) -> int
override Npgsql.NpgsqlNestedDataReader.GetString(int ordinal) -> string!
override Npgsql.NpgsqlNestedDataReader.GetValue(int ordinal) -> object!
override Npgsql.NpgsqlNestedDataReader.GetValues(object![]! values) -> int
override Npgsql.NpgsqlNestedDataReader.HasRows.get -> bool
override Npgsql.NpgsqlNestedDataReader.IsClosed.get -> bool
override Npgsql.NpgsqlNestedDataReader.IsDBNull(int ordinal) -> bool
override Npgsql.NpgsqlNestedDataReader.NextResult() -> bool
override Npgsql.NpgsqlNestedDataReader.Read() -> bool
override Npgsql.NpgsqlNestedDataReader.RecordsAffected.get -> int
override Npgsql.NpgsqlNestedDataReader.this[int ordinal].get -> object!
override Npgsql.NpgsqlNestedDataReader.this[string! name].get -> object!
Npgsql.NpgsqlNestedDataReader.GetData(int ordinal) -> Npgsql.NpgsqlNestedDataReader!
Npgsql.NpgsqlDataReader.GetData(int ordinal) -> Npgsql.NpgsqlNestedDataReader!
*REMOVED*virtual Npgsql.NpgsqlDatabaseInfo.HasIntegerDateTimes.get -> bool
*REMOVED*virtual Npgsql.NpgsqlDatabaseInfo.HasIntegerDateTimes.set -> void
*REMOVED*virtual Npgsql.NpgsqlDatabaseInfo.SupportsAdvisoryLocks.get -> bool
*REMOVED*virtual Npgsql.NpgsqlDatabaseInfo.SupportsCloseAll.get -> bool
*REMOVED*virtual Npgsql.NpgsqlDatabaseInfo.SupportsDiscard.get -> bool
*REMOVED*virtual Npgsql.NpgsqlDatabaseInfo.SupportsDiscardSequences.get -> bool
*REMOVED*virtual Npgsql.NpgsqlDatabaseInfo.SupportsDiscardTemp.get -> bool
*REMOVED*virtual Npgsql.NpgsqlDatabaseInfo.SupportsEnumTypes.get -> bool
*REMOVED*virtual Npgsql.NpgsqlDatabaseInfo.SupportsRangeTypes.get -> bool
*REMOVED*virtual Npgsql.NpgsqlDatabaseInfo.SupportsTransactions.get -> bool
*REMOVED*virtual Npgsql.NpgsqlDatabaseInfo.SupportsTransactions.set -> void
*REMOVED*virtual Npgsql.NpgsqlDatabaseInfo.SupportsUnlisten.get -> bool
Npgsql.NpgsqlParameter<T>.TypedValue.get -> T?
NpgsqlTypes.NpgsqlDate.NpgsqlDate(System.DateOnly date) -> void
static NpgsqlTypes.NpgsqlDate.ToDateOnly(NpgsqlTypes.NpgsqlDate date) -> System.DateOnly
static NpgsqlTypes.NpgsqlDate.ToNpgsqlDate(System.DateOnly date) -> NpgsqlTypes.NpgsqlDate
static NpgsqlTypes.NpgsqlDate.explicit operator NpgsqlTypes.NpgsqlDate(System.DateOnly date) -> NpgsqlTypes.NpgsqlDate
static NpgsqlTypes.NpgsqlDate.explicit operator System.DateOnly(NpgsqlTypes.NpgsqlDate date) -> System.DateOnly
