#nullable enable
const Npgsql.PostgresErrorCodes.IdleSessionTimeout = "57P05" -> string!
Npgsql.NpgsqlDataSourceBuilder.AddTypeInfoResolver(Npgsql.Internal.IPgTypeInfoResolver! resolver) -> void
Npgsql.NpgsqlSlimDataSourceBuilder.AddTypeInfoResolver(Npgsql.Internal.IPgTypeInfoResolver! resolver) -> void
Npgsql.ChannelBinding
Npgsql.ChannelBinding.Disable = 0 -> Npgsql.ChannelBinding
Npgsql.ChannelBinding.Prefer = 1 -> Npgsql.ChannelBinding
Npgsql.ChannelBinding.Require = 2 -> Npgsql.ChannelBinding
Npgsql.NpgsqlBatch.CreateBatchCommand() -> Npgsql.NpgsqlBatchCommand!
Npgsql.NpgsqlConnectionStringBuilder.ChannelBinding.get -> Npgsql.ChannelBinding
Npgsql.NpgsqlConnectionStringBuilder.ChannelBinding.set -> void
Npgsql.NpgsqlSlimDataSourceBuilder.EnableFullTextSearch() -> Npgsql.NpgsqlSlimDataSourceBuilder!
Npgsql.NpgsqlSlimDataSourceBuilder.EnableRecords() -> Npgsql.NpgsqlSlimDataSourceBuilder!
Npgsql.NpgsqlBinaryImporter.WriteRow(params object?[]! values) -> void
Npgsql.NpgsqlBinaryImporter.WriteRowAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken), params object?[]! values) -> System.Threading.Tasks.Task!
Npgsql.NpgsqlDataSourceBuilder.Name.get -> string?
Npgsql.NpgsqlDataSourceBuilder.Name.set -> void
Npgsql.NpgsqlDataSourceBuilder.UseRootCertificate(System.Security.Cryptography.X509Certificates.X509Certificate2? rootCertificate) -> Npgsql.NpgsqlDataSourceBuilder!
Npgsql.NpgsqlDataSourceBuilder.UseRootCertificateCallback(System.Func<System.Security.Cryptography.X509Certificates.X509Certificate2!>? rootCertificateCallback) -> Npgsql.NpgsqlDataSourceBuilder!
Npgsql.NpgsqlDataSourceBuilder.UseSystemTextJson(System.Text.Json.JsonSerializerOptions? serializerOptions = null, System.Type![]? jsonbClrTypes = null, System.Type![]? jsonClrTypes = null) -> Npgsql.NpgsqlDataSourceBuilder!
Npgsql.NpgsqlSlimDataSourceBuilder
Npgsql.NpgsqlSlimDataSourceBuilder.Build() -> Npgsql.NpgsqlDataSource!
Npgsql.NpgsqlSlimDataSourceBuilder.BuildMultiHost() -> Npgsql.NpgsqlMultiHostDataSource!
Npgsql.NpgsqlSlimDataSourceBuilder.ConnectionString.get -> string!
Npgsql.NpgsqlSlimDataSourceBuilder.ConnectionStringBuilder.get -> Npgsql.NpgsqlConnectionStringBuilder!
Npgsql.NpgsqlSlimDataSourceBuilder.DefaultNameTranslator.get -> Npgsql.INpgsqlNameTranslator!
Npgsql.NpgsqlSlimDataSourceBuilder.DefaultNameTranslator.set -> void
Npgsql.NpgsqlSlimDataSourceBuilder.EnableEncryption() -> Npgsql.NpgsqlSlimDataSourceBuilder!
Npgsql.NpgsqlSlimDataSourceBuilder.EnableParameterLogging(bool parameterLoggingEnabled = true) -> Npgsql.NpgsqlSlimDataSourceBuilder!
Npgsql.NpgsqlSlimDataSourceBuilder.EnableRanges() -> Npgsql.NpgsqlSlimDataSourceBuilder!
Npgsql.NpgsqlSlimDataSourceBuilder.MapComposite(System.Type! clrType, string? pgName = null, Npgsql.INpgsqlNameTranslator? nameTranslator = null) -> Npgsql.TypeMapping.INpgsqlTypeMapper!
Npgsql.NpgsqlSlimDataSourceBuilder.MapComposite<T>(string? pgName = null, Npgsql.INpgsqlNameTranslator? nameTranslator = null) -> Npgsql.TypeMapping.INpgsqlTypeMapper!
Npgsql.NpgsqlSlimDataSourceBuilder.MapEnum<TEnum>(string? pgName = null, Npgsql.INpgsqlNameTranslator? nameTranslator = null) -> Npgsql.TypeMapping.INpgsqlTypeMapper!
Npgsql.NpgsqlSlimDataSourceBuilder.Name.get -> string?
Npgsql.NpgsqlSlimDataSourceBuilder.Name.set -> void
Npgsql.NpgsqlSlimDataSourceBuilder.NpgsqlSlimDataSourceBuilder(string? connectionString = null) -> void
Npgsql.NpgsqlSlimDataSourceBuilder.UnmapComposite(System.Type! clrType, string? pgName = null, Npgsql.INpgsqlNameTranslator? nameTranslator = null) -> bool
Npgsql.NpgsqlSlimDataSourceBuilder.UnmapComposite<T>(string? pgName = null, Npgsql.INpgsqlNameTranslator? nameTranslator = null) -> bool
Npgsql.NpgsqlSlimDataSourceBuilder.UnmapEnum<TEnum>(string? pgName = null, Npgsql.INpgsqlNameTranslator? nameTranslator = null) -> bool
Npgsql.NpgsqlSlimDataSourceBuilder.UseClientCertificate(System.Security.Cryptography.X509Certificates.X509Certificate? clientCertificate) -> Npgsql.NpgsqlSlimDataSourceBuilder!
Npgsql.NpgsqlSlimDataSourceBuilder.UseClientCertificates(System.Security.Cryptography.X509Certificates.X509CertificateCollection? clientCertificates) -> Npgsql.NpgsqlSlimDataSourceBuilder!
Npgsql.NpgsqlSlimDataSourceBuilder.UseClientCertificatesCallback(System.Action<System.Security.Cryptography.X509Certificates.X509CertificateCollection!>? clientCertificatesCallback) -> Npgsql.NpgsqlSlimDataSourceBuilder!
Npgsql.NpgsqlSlimDataSourceBuilder.UseLoggerFactory(Microsoft.Extensions.Logging.ILoggerFactory? loggerFactory) -> Npgsql.NpgsqlSlimDataSourceBuilder!
Npgsql.NpgsqlSlimDataSourceBuilder.UsePeriodicPasswordProvider(System.Func<Npgsql.NpgsqlConnectionStringBuilder!, System.Threading.CancellationToken, System.Threading.Tasks.ValueTask<string!>>? passwordProvider, System.TimeSpan successRefreshInterval, System.TimeSpan failureRefreshInterval) -> Npgsql.NpgsqlSlimDataSourceBuilder!
Npgsql.NpgsqlSlimDataSourceBuilder.UsePhysicalConnectionInitializer(System.Action<Npgsql.NpgsqlConnection!>? connectionInitializer, System.Func<Npgsql.NpgsqlConnection!, System.Threading.Tasks.Task!>? connectionInitializerAsync) -> Npgsql.NpgsqlSlimDataSourceBuilder!
Npgsql.NpgsqlSlimDataSourceBuilder.UseRootCertificate(System.Security.Cryptography.X509Certificates.X509Certificate2? rootCertificate) -> Npgsql.NpgsqlSlimDataSourceBuilder!
Npgsql.NpgsqlSlimDataSourceBuilder.UseRootCertificateCallback(System.Func<System.Security.Cryptography.X509Certificates.X509Certificate2!>? rootCertificateCallback) -> Npgsql.NpgsqlSlimDataSourceBuilder!
Npgsql.NpgsqlSlimDataSourceBuilder.UseSystemTextJson(System.Text.Json.JsonSerializerOptions? serializerOptions = null, System.Type![]? jsonbClrTypes = null, System.Type![]? jsonClrTypes = null) -> Npgsql.NpgsqlSlimDataSourceBuilder!
Npgsql.NpgsqlSlimDataSourceBuilder.UseUserCertificateValidationCallback(System.Net.Security.RemoteCertificateValidationCallback! userCertificateValidationCallback) -> Npgsql.NpgsqlSlimDataSourceBuilder!
Npgsql.PostgresTypes.DataTypeName.UnqualifiedName.get -> string!
Npgsql.Replication.PhysicalReplicationConnection.StartReplication(Npgsql.Replication.PhysicalReplicationSlot? slot, NpgsqlTypes.NpgsqlLogSequenceNumber walLocation, System.Threading.CancellationToken cancellationToken, uint timeline = 0) -> System.Collections.Generic.IAsyncEnumerable<Npgsql.Replication.XLogDataMessage!>!
Npgsql.Replication.PhysicalReplicationConnection.StartReplication(NpgsqlTypes.NpgsqlLogSequenceNumber walLocation, System.Threading.CancellationToken cancellationToken, uint timeline = 0) -> System.Collections.Generic.IAsyncEnumerable<Npgsql.Replication.XLogDataMessage!>!
Npgsql.Replication.PhysicalReplicationSlot.PhysicalReplicationSlot(string! slotName, NpgsqlTypes.NpgsqlLogSequenceNumber? restartLsn = null, uint? restartTimeline = null) -> void
Npgsql.Replication.PhysicalReplicationSlot.RestartTimeline.get -> uint?
Npgsql.PostgresTypes.DataTypeName
Npgsql.PostgresTypes.DataTypeName.DataTypeName() -> void
Npgsql.PostgresTypes.DataTypeName.DataTypeName(string! fullyQualifiedDataTypeName) -> void
Npgsql.PostgresTypes.DataTypeName.DisplayName.get -> string!
Npgsql.PostgresTypes.DataTypeName.IsDefault.get -> bool
Npgsql.PostgresTypes.DataTypeName.Schema.get -> string!
Npgsql.PostgresTypes.DataTypeName.ToArrayName() -> Npgsql.PostgresTypes.DataTypeName
Npgsql.PostgresTypes.DataTypeName.ToDefaultMultirangeName() -> Npgsql.PostgresTypes.DataTypeName
Npgsql.PostgresTypes.DataTypeName.Value.get -> string!
Npgsql.PostgresTypes.Oid
Npgsql.PostgresTypes.Oid.Oid() -> void
Npgsql.PostgresTypes.Oid.Oid(uint Value) -> void
Npgsql.PostgresTypes.Oid.Value.get -> uint
Npgsql.PostgresTypes.Oid.Value.init -> void
Npgsql.PostgresTypes.PgTypeId
Npgsql.PostgresTypes.PgTypeId.DataTypeName.get -> Npgsql.PostgresTypes.DataTypeName
Npgsql.PostgresTypes.PgTypeId.Equals(Npgsql.PostgresTypes.PgTypeId other) -> bool
Npgsql.PostgresTypes.PgTypeId.IsDataTypeName.get -> bool
Npgsql.PostgresTypes.PgTypeId.IsOid.get -> bool
Npgsql.PostgresTypes.PgTypeId.Oid.get -> Npgsql.PostgresTypes.Oid
Npgsql.PostgresTypes.PgTypeId.PgTypeId() -> void
Npgsql.PostgresTypes.PgTypeId.PgTypeId(Npgsql.PostgresTypes.DataTypeName name) -> void
Npgsql.PostgresTypes.PgTypeId.PgTypeId(Npgsql.PostgresTypes.Oid oid) -> void
Npgsql.TypeMapping.GlobalTypeMapper
Npgsql.TypeMapping.GlobalTypeMapper.AddTypeInfoResolver(Npgsql.Internal.IPgTypeInfoResolver! resolver) -> void
Npgsql.TypeMapping.GlobalTypeMapper.DefaultNameTranslator.get -> Npgsql.INpgsqlNameTranslator!
Npgsql.TypeMapping.GlobalTypeMapper.DefaultNameTranslator.set -> void
Npgsql.TypeMapping.GlobalTypeMapper.MapComposite(System.Type! clrType, string? pgName = null, Npgsql.INpgsqlNameTranslator? nameTranslator = null) -> Npgsql.TypeMapping.INpgsqlTypeMapper!
Npgsql.TypeMapping.GlobalTypeMapper.MapComposite<T>(string? pgName = null, Npgsql.INpgsqlNameTranslator? nameTranslator = null) -> Npgsql.TypeMapping.INpgsqlTypeMapper!
Npgsql.TypeMapping.GlobalTypeMapper.MapEnum<TEnum>(string? pgName = null, Npgsql.INpgsqlNameTranslator? nameTranslator = null) -> Npgsql.TypeMapping.INpgsqlTypeMapper!
Npgsql.TypeMapping.GlobalTypeMapper.Reset() -> void
Npgsql.TypeMapping.GlobalTypeMapper.UnmapComposite(System.Type! clrType, string? pgName = null, Npgsql.INpgsqlNameTranslator? nameTranslator = null) -> bool
Npgsql.TypeMapping.GlobalTypeMapper.UnmapComposite<T>(string? pgName = null, Npgsql.INpgsqlNameTranslator? nameTranslator = null) -> bool
Npgsql.TypeMapping.GlobalTypeMapper.UnmapEnum<TEnum>(string? pgName = null, Npgsql.INpgsqlNameTranslator? nameTranslator = null) -> bool
Npgsql.TypeMapping.INpgsqlTypeMapper.AddTypeInfoResolver(Npgsql.Internal.IPgTypeInfoResolver! resolver) -> void
Npgsql.TypeMapping.INpgsqlTypeMapper.Reset() -> void
Npgsql.TypeMapping.UserTypeMapping
Npgsql.TypeMapping.UserTypeMapping.ClrType.get -> System.Type!
Npgsql.TypeMapping.UserTypeMapping.PgTypeName.get -> string!
override Npgsql.NpgsqlBatch.Dispose() -> void
*REMOVED*static NpgsqlTypes.NpgsqlBox.Parse(string! s) -> NpgsqlTypes.NpgsqlBox
*REMOVED*static NpgsqlTypes.NpgsqlCircle.Parse(string! s) -> NpgsqlTypes.NpgsqlCircle
*REMOVED*static NpgsqlTypes.NpgsqlLine.Parse(string! s) -> NpgsqlTypes.NpgsqlLine
*REMOVED*static NpgsqlTypes.NpgsqlLSeg.Parse(string! s) -> NpgsqlTypes.NpgsqlLSeg
*REMOVED*static NpgsqlTypes.NpgsqlPath.Parse(string! s) -> NpgsqlTypes.NpgsqlPath
*REMOVED*static NpgsqlTypes.NpgsqlPoint.Parse(string! s) -> NpgsqlTypes.NpgsqlPoint
*REMOVED*static NpgsqlTypes.NpgsqlPolygon.Parse(string! s) -> NpgsqlTypes.NpgsqlPolygon
*REMOVED*Npgsql.NpgsqlBinaryImporter.WriteRow(params object![]! values) -> void
*REMOVED*Npgsql.NpgsqlBinaryImporter.WriteRowAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken), params object![]! values) -> System.Threading.Tasks.Task!
*REMOVED*override Npgsql.NpgsqlDataReader.GetProviderSpecificFieldType(int ordinal) -> System.Type!
*REMOVED*override Npgsql.NpgsqlDataReader.GetProviderSpecificValue(int ordinal) -> object!
*REMOVED*override Npgsql.NpgsqlDataReader.GetProviderSpecificValues(object![]! values) -> int
*REMOVED*override Npgsql.NpgsqlNestedDataReader.GetProviderSpecificFieldType(int ordinal) -> System.Type!
*REMOVED*override Npgsql.NpgsqlNestedDataReader.GetProviderSpecificValue(int ordinal) -> object!
*REMOVED*override Npgsql.NpgsqlNestedDataReader.GetProviderSpecificValues(object![]! values) -> int
*REMOVED*Npgsql.Replication.PhysicalReplicationConnection.StartReplication(Npgsql.Replication.PhysicalReplicationSlot? slot, NpgsqlTypes.NpgsqlLogSequenceNumber walLocation, System.Threading.CancellationToken cancellationToken, ulong timeline = 0) -> System.Collections.Generic.IAsyncEnumerable<Npgsql.Replication.XLogDataMessage!>!
*REMOVED*Npgsql.Replication.PhysicalReplicationConnection.StartReplication(NpgsqlTypes.NpgsqlLogSequenceNumber walLocation, System.Threading.CancellationToken cancellationToken, ulong timeline = 0) -> System.Collections.Generic.IAsyncEnumerable<Npgsql.Replication.XLogDataMessage!>!
*REMOVED*Npgsql.Replication.PhysicalReplicationSlot.PhysicalReplicationSlot(string! slotName, NpgsqlTypes.NpgsqlLogSequenceNumber? restartLsn = null, ulong? restartTimeline = null) -> void
*REMOVED*Npgsql.Replication.PhysicalReplicationSlot.RestartTimeline.get -> ulong?
override Npgsql.PostgresTypes.DataTypeName.ToString() -> string!
override Npgsql.PostgresTypes.Oid.ToString() -> string!
override Npgsql.PostgresTypes.PgTypeId.GetHashCode() -> int
override Npgsql.PostgresTypes.PgTypeId.ToString() -> string!
static Npgsql.NpgsqlConnection.GlobalTypeMapper.get -> Npgsql.TypeMapping.INpgsqlTypeMapper!
static Npgsql.PostgresTypes.DataTypeName.explicit operator string!(Npgsql.PostgresTypes.DataTypeName value) -> string!
static Npgsql.PostgresTypes.DataTypeName.FromDisplayName(string! displayDataTypeName) -> Npgsql.PostgresTypes.DataTypeName
static Npgsql.PostgresTypes.Oid.explicit operator uint(Npgsql.PostgresTypes.Oid oid) -> uint
static Npgsql.PostgresTypes.Oid.implicit operator Npgsql.PostgresTypes.Oid(uint oid) -> Npgsql.PostgresTypes.Oid
static Npgsql.PostgresTypes.PgTypeId.implicit operator Npgsql.PostgresTypes.PgTypeId(Npgsql.PostgresTypes.DataTypeName name) -> Npgsql.PostgresTypes.PgTypeId
static Npgsql.PostgresTypes.PgTypeId.implicit operator Npgsql.PostgresTypes.PgTypeId(Npgsql.PostgresTypes.Oid id) -> Npgsql.PostgresTypes.PgTypeId
